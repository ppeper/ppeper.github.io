{"componentChunkName":"component---src-templates-post-jsx","path":"/serialization/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"bca9a285-eca1-55b0-997c-c39c8dd3560b","excerpt":"서버에서 REST API를 구현하여 데이터를 다룰때는 Json 데이터 형태로 많이 다루게 된다. 안드로이드에서 서버의 데이터를 받아올때 편리하게  라이브러리를 활용하여 객체-Json 간의 Converter 작업을 하였었다. 이번에 구글 프로젝트를 보면서 새로운 직렬화/역직렬화를 다룰 수 있는 라이브러리를 보려고 한다. Kotlin의 Default Valu…","html":"<p>서버에서 REST API를 구현하여 데이터를 다룰때는 Json 데이터 형태로 많이 다루게 된다. 안드로이드에서 서버의 데이터를 받아올때 편리하게 <code class=\"language-text\">Gson</code> 라이브러리를 활용하여 객체-Json 간의 Converter 작업을 하였었다. 이번에 구글 프로젝트를 보면서 새로운 직렬화/역직렬화를 다룰 수 있는 라이브러리를 보려고 한다.</p>\n<h1 id=\"Kotlin의-Default-Value\" style=\"position:relative;\"><a href=\"#Kotlin%EC%9D%98-Default-Value\" aria-label=\"Kotlin의 Default Value permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Kotlin의 Default Value</h1>\n<p>Gson으로도 데이터의 직렬화(역직렬화)를 할 수 있지만 코틀린의 데이터 클래스에서 Dafault Value를 사용하고 있다면 자바로 되어있는 Gson에서는 해당 기능을 제공하지 않기 때문에 NPE 가능성이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> gender<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> hobby<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Work out\"</span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string-literal multiline\"><span class=\"token string\">\"\"\"\n    {\n        \"name\" : \"ppeper\",\n        \"gender\" : \"Male\"\n    } \n\"\"\"</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trimIndent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> User<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>User(name=ppeper, gender=Male, age=0, hobby=null)</p>\n</blockquote>\n<p>age의 값과 hoppy의 값에 Default value가 있지만 Primitive type의 경우 0, Reference type의 경우 null로 나오는 것을 볼 수 있다.   코틀린에서는 Null-Safety 를 통해 hobby가 Not-Null type이지만 null이 들어있어 개발시에 잘못한다면 NPE가 발생할 수 있다.</p>\n<h1 id=\"Kotlinx-Serialization\" style=\"position:relative;\"><a href=\"#Kotlinx-Serialization\" aria-label=\"Kotlinx Serialization permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Kotlinx Serialization</h1>\n<p>코틀린에서 공식적으로 제공하고 있는 <strong>Kotlinx Serialization</strong> 라이브러리를 통해 직렬화/역직렬화를 사용할 수 있다. Kotlin에서 사용하면 위와 같은 Default value의 상황에서도 정상적으로 값을 보여줄 수 있으며 다른 Converter들과 다르게 Reflection을 사용하지 않고 KSerializer을 사용한다.</p>\n<p>사용하는 방법은 변환하고자하는 Class에 <code class=\"language-text\">@Serializable</code> 어노테이션만 추가해 주면 된다.\n이 어노테이션을 추가하면 플러그인이 자동으로 해당하는 클래스의 companion object에 <code class=\"language-text\">serializer()</code> 함수를 생성하여 사용할 수 있게 해준다. 이 함수는 <strong>KSerializer</strong> 타입의 객체를 반환하여 직렬화할때 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"plugin.serialization\"</span></span><span class=\"token punctuation\">)</span> version <span class=\"token string-literal singleline\"><span class=\"token string\">\"1.9.22\"</span></span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.jetbrains.kotlinx:kotlinx-serialization-json:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">latest_version</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Serializable</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> gender<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> hobby<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Work out\"</span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string-literal multiline\"><span class=\"token string\">\"\"\"\n    {\n        \"name\" : \"ppeper\",\n        \"gender\" : \"Male\"\n    } \n\"\"\"</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trimIndent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> Json<span class=\"token punctuation\">.</span>decodeFromString<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>User(name=ppeper, gender=Male, age=28, hobby=Work out)</p>\n</blockquote>\n<p>Default Value를 설정한 프로퍼티 값들이 성공적으로 출력되는 것을 볼 수 있다. kotlinx.serialization에서 Json 관련한 여러 옵션추가하여 입맛에 맞게 사용이 가능하다.</p>\n<h2 id=\"ignoreKnownKeys\" style=\"position:relative;\"><a href=\"#ignoreKnownKeys\" aria-label=\"ignoreKnownKeys permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>ignoreKnownKeys</h2>\n<p>보통 Model로 다시 파싱을 할때 Json에 있는 Key값과 Model의 멤버 변수와 mapping이 되어햐 한다. 이때 Json에 있는 Key 값이 Model에 없을 때 이를 무시할 수 있는 <code class=\"language-text\">ignoreKnwonKeys</code> 옵션을 설정해 놓으면 Model에서 있는 멤버 변수의 값들만 파싱이 된다.</p>\n<p>해당 옵션을 사용하지 않으면 Exception을 통해 알지 못하는 값을 출력해준다.</p>\n<blockquote>\n<p>Exception in thread \"main\" kotlinx.serialization.json.internal.JsonDecodingException: Unexpected JSON token at offset 53: Encountered an unknown key 'id' at path: $.gender\nUse 'ignoreUnknownKeys = true' in 'Json {}' builder to ignore unknown keys.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string-literal multiline\"><span class=\"token string\">\"\"\"\n    {\n        \"name\" : \"ppeper\",\n        \"gender\" : \"Male\",\n        \"id\" : \"1\"\n    } \n\"\"\"</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trimIndent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> json <span class=\"token operator\">=</span> Json <span class=\"token punctuation\">{</span> ignoreUnknownKeys <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> decodeToString <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>decodeFromString<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>decodeToString<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>User(name=ppeper, gender=Male, age=28, hobby=Work out)</p>\n</blockquote>\n<p> 이외에도 공식 <a href=\"https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes.md#enum-classes\">Kotlin Serialization</a>을 보면 직렬화 대상 Model의 멤버 변수에 다양한 어노테이션을 활용할 수 있다. 또한 안드로이드에서 Retrofit을 사용하고 있다면 이를위한 <a href=\"https://github.com/JakeWharton/retrofit2-kotlinx-serialization-converter\">Converter</a>도 현재 제공하고 있다.</p>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/serialization.html#what-s-next\">https://kotlinlang.org/docs/serialization.html#what-s-next</a></li>\n<li><a href=\"https://github.com/google/gson\">https://github.com/google/gson</a></li>\n</ul>","frontmatter":{"title":"코틑린을 위한 Kotlinx Serizalization","date":"March 07, 2024","update":"March 07, 2024","tags":["Kotlin","Serizalization"],"series":"Kotlin"},"fields":{"slug":"/serialization/","readingTime":{"minutes":4.505}}},"seriesList":{"edges":[{"node":{"id":"a6367832-7d8e-5850-aa4d-f21168abd13d","fields":{"slug":"/scope-function/"},"frontmatter":{"title":"코틀린의 Scope Function는 언제쓸까"}}},{"node":{"id":"e2656aa2-770e-598c-a41d-36367e5cc54d","fields":{"slug":"/sort/"},"frontmatter":{"title":"코틀린 리스트 정렬하는 방법 (sort vs sortBy vs sortWith)"}}},{"node":{"id":"8f0d524f-1f01-543b-bd13-0856b4cdb8a1","fields":{"slug":"/generic-in-out/"},"frontmatter":{"title":"Kotlin 제네릭의 in, out 키워드?"}}},{"node":{"id":"c5f8b526-cba6-5186-bbaa-424b59d5644d","fields":{"slug":"/flow/"},"frontmatter":{"title":"Kotlin Coroutines Flow 맛보기"}}},{"node":{"id":"bca9a285-eca1-55b0-997c-c39c8dd3560b","fields":{"slug":"/serialization/"},"frontmatter":{"title":"코틑린을 위한 Kotlinx Serizalization"}}},{"node":{"id":"64930b29-58b8-57af-b3c0-7b695cd8826b","fields":{"slug":"/ktor/"},"frontmatter":{"title":"KMP를 지원하는 Ktor Client를 사용해보자"}}}]},"previous":{"fields":{"slug":"/goodbye-2023/"},"frontmatter":{"title":"2023년 한해 회고록"}},"next":{"fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},"pageContext":{"id":"bca9a285-eca1-55b0-997c-c39c8dd3560b","series":"Kotlin","previousPostId":"69fedf50-0cdc-5aa3-b60b-cfb7b9ea12d7","nextPostId":"bae61635-412c-5e43-8a7b-1eafe2722928"}},"staticQueryHashes":[],"slicesMap":{}}