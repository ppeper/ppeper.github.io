{"componentChunkName":"component---src-templates-post-jsx","path":"/programmers-kakao-blind-2020-3/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"25be2350-7ca4-5657-b192-255f4ac12389","excerpt":"문제 설명 양의 정수 이 주어집니다. 이 숫자를 진수로 바꿨을 때, 변환된 수 안에 아래 조건에 맞는 소수(Prime number)가 몇 개인지 알아보려 합니다.  처럼 소수 양쪽에 0이 있는 경우  처럼 소수 오른쪽에만 0이 있고 왼쪽에는 아무것도 없는 경우  처럼 소수 왼쪽에만 0이 있고 오른쪽에는 아무것도 없는 경우  처럼 소수 양쪽에 아무것도 없는…","html":"<h3>문제 설명</h3>\n<p>양의 정수 <code class=\"language-text\">n</code>이 주어집니다. 이 숫자를 <code class=\"language-text\">k</code>진수로 바꿨을 때, 변환된 수 안에 아래 조건에 맞는 소수(Prime number)가 몇 개인지 알아보려 합니다.</p>\n<ul>\n<li><strong><code class=\"language-text\">0P0</code></strong> 처럼 소수 양쪽에 0이 있는 경우</li>\n<li><strong><code class=\"language-text\">P0</code></strong> 처럼 소수 오른쪽에만 0이 있고 왼쪽에는 아무것도 없는 경우</li>\n<li><strong><code class=\"language-text\">0P</code></strong> 처럼 소수 왼쪽에만 0이 있고 오른쪽에는 아무것도 없는 경우</li>\n<li><strong><code class=\"language-text\">P</code></strong> 처럼 소수 양쪽에 아무것도 없는 경우</li>\n<li>\n<p>단, <strong><code class=\"language-text\">P</code></strong> 는 각 자릿수에 0을 포함하지 않는 소수입니다.</p>\n<ul>\n<li>예를 들어, 101은 <strong><code class=\"language-text\">P</code></strong> 가 될 수 없습니다.</li>\n</ul>\n</li>\n</ul>\n<p>예를 들어, 437674을 3진수로 바꾸면 <code class=\"language-text\">211</code>0<code class=\"language-text\">2</code>0100<code class=\"language-text\">11</code>입니다. 여기서 찾을 수 있는 조건에 맞는 소수는 왼쪽부터 순서대로 211, 2, 11이 있으며, 총 3개입니다. (211, 2, 11을 <code class=\"language-text\">k</code>진법으로 보았을 때가 아닌, 10진법으로 보았을 때 소수여야 한다는 점에 주의합니다.) 211은 <code class=\"language-text\">P0</code> 형태에서 찾을 수 있으며, 2는 <code class=\"language-text\">0P0</code>에서, 11은 <code class=\"language-text\">0P</code>에서 찾을 수 있습니다.</p>\n<p>정수 <code class=\"language-text\">n</code>과 <code class=\"language-text\">k</code>가 매개변수로 주어집니다. <code class=\"language-text\">n</code>을 <code class=\"language-text\">k</code>진수로 바꿨을 때, 변환된 수 안에서 찾을 수 있는 위 조건에 맞는 소수의 개수를 return 하도록 solution 함수를 완성해 주세요.</p>\n<h3>제한사항</h3>\n<ul>\n<li>1 ≤ <code class=\"language-text\">n</code> ≤ 1,000,000</li>\n<li>3 ≤ <code class=\"language-text\">k</code> ≤ 10</li>\n</ul>\n<h3>입출력 예</h3>\n<img src=\"https://user-images.githubusercontent.com/63226023/150669729-1c8bb414-e177-4eee-ac87-4c0b7de5f459.png\">\n<h3>제한시간 안내</h3>\n<ul>\n<li>정확성 테스트 : 10초</li>\n</ul>\n<h3>풀이</h3>\n<p>문제의 요구사항을 보면 주어진 수를 K 진법으로 교체후 이를 <strong>'0'</strong> 을 기준으로 나누어 소수인지를 확인하여 그 개수를 리턴하는 문제였다.</p>\n<p>예시에서 나온 437674를 3진수로 바꾼 예시만 보더라도 <strong>'int'</strong> 형이 가질 수 있는 최대값을 넘기 때문에 <strong>'long'</strong> 형으로 받아야 한다는 것을 먼저 생각하였다. 그 후 주어진 K값의 주어진 진법으로 교체와 <strong>'0'</strong> 을 기준으로 split하여 소수인지 확인을 하여 구하는 값을 리턴하였다.</p>\n<h1>코드</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">K_Prime</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 소수인지 확인</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sNumber<span class=\"token operator\">:</span> split<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sNumber<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>sNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// k진법으로 교체</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> remainder <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> k<span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> remainder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">/=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 소수 확인</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>","frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - k진수에서 소수 개수 구하기","date":"January 23, 2022","update":"January 23, 2022","tags":["Algorithm","programmers"],"series":"Algorithm"},"fields":{"slug":"/programmers-kakao-blind-2020-3/","readingTime":{"minutes":3.44}}},"seriesList":{"edges":[{"node":{"id":"6a88ad07-efd2-5e8e-85cb-d5bba9e8cf17","fields":{"slug":"/programmers-tips-town/"},"frontmatter":{"title":"프로그래머스 2017 팁스타운 - 짝지어 제거하기"}}},{"node":{"id":"814be3a5-2662-5037-a41b-ae3a88c11945","fields":{"slug":"/programmers-kakao-blind-2020-1/"},"frontmatter":{"title":"프로그래머스 2020 KAKAO BLIND RECRUITMENT - 괄호 변환"}}},{"node":{"id":"9235e1fe-da08-5cc6-96e9-5919bddff0fa","fields":{"slug":"/programmers-kakao-blind-2020-2/"},"frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - 신고 결과 받기"}}},{"node":{"id":"25be2350-7ca4-5657-b192-255f4ac12389","fields":{"slug":"/programmers-kakao-blind-2020-3/"},"frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - k진수에서 소수 개수 구하기"}}},{"node":{"id":"8cfe1ce4-abd0-51a5-b257-ee4b1b89dccf","fields":{"slug":"/programmers-kakao-blind-2018-1/"},"frontmatter":{"title":"프로그래머스 2018 KAKAO RECRUITMENT - [1차]캐시"}}},{"node":{"id":"5e3cc442-642e-5777-b707-5f1513b6e7fc","fields":{"slug":"/programmers-kakao-blind-2021-1/"},"frontmatter":{"title":"프로그래머스 2021 KAKAO BLIND RECRUITMENT - 순위 검색"}}},{"node":{"id":"4c2618c6-2138-584d-925b-5ad902505f6b","fields":{"slug":"/brute-force/"},"frontmatter":{"title":"알고리즘 완전탐색(Exhaustive search)이란"}}},{"node":{"id":"b167a775-e860-5c19-8368-765d569da317","fields":{"slug":"/greedy/"},"frontmatter":{"title":"그리디 알고리즘(Greedy Algorithm)에 대해"}}},{"node":{"id":"ef3315e9-7887-56c5-ab56-f0fa510d25a7","fields":{"slug":"/dfs-bfs/"},"frontmatter":{"title":"알고리즘 DFS/BFS 탐색 방법 알아보기"}}},{"node":{"id":"5bfc345a-73e4-5ba2-9ecc-2d0f7cbcc406","fields":{"slug":"/dynamic-programming/"},"frontmatter":{"title":"알고리즘 Dynamic Programming(동적 프로그래밍) 살펴보기"}}},{"node":{"id":"e6cffd30-3ac6-5a9a-8e24-0b0c55c47891","fields":{"slug":"/graph-mst/"},"frontmatter":{"title":"그래프 알고리즘이란 + 최소 신장 트리(MST)"}}},{"node":{"id":"d80bd3c0-f2e9-5a38-a7fd-21ad9685fc86","fields":{"slug":"/graph-sortest-path/"},"frontmatter":{"title":"그래프 최단거리 구하기"}}}]},"previous":{"fields":{"slug":"/programmers-kakao-blind-2020-2/"},"frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - 신고 결과 받기"}},"next":{"fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},"pageContext":{"id":"25be2350-7ca4-5657-b192-255f4ac12389","series":"Algorithm","previousPostId":"9235e1fe-da08-5cc6-96e9-5919bddff0fa","nextPostId":"31f9951e-cfe2-5831-9791-bdd8a3f321f2"}},"staticQueryHashes":[],"slicesMap":{}}