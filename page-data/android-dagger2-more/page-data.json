{"componentChunkName":"component---src-templates-post-jsx","path":"/android-dagger2-more/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","excerpt":"Custom Application 저번 포스팅에서 Dagger의 Inject, Module, Component에 대해서 알아보고 SmartPhone 클래스에 적용시켜 보았다. 불변하는 데이터나 전역으로 사용되는 object 같은 경우 모든 Component 에 공유가 되어 사용되야 할 것이다 (ex) Room Database, SharedPreferenc…","html":"<h1>Custom Application</h1>\n<p>저번 포스팅에서 Dagger의 Inject, Module, Component에 대해서 알아보고 SmartPhone 클래스에 적용시켜 보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Field Injection</span>\n    <span class=\"token annotation builtin\">@Inject</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> smartPhone<span class=\"token operator\">:</span> SmartPhone\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n\n        DaggerSmartPhoneComponent<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            \n        smartPhone<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>불변하는 데이터나 전역으로 사용되는 object 같은 경우 <strong>모든 Component</strong> 에 공유가 되어 사용되야 할 것이다 (ex) Room Database, SharedPreference..)</p>\n<p>위의 예시에서의 SmartPhone 컴포넌트가 필요한 Activity/Fragment가 10개라면 <code class=\"language-text\">DaggerSmartPhoneComponent.create().inject(this)</code> 의 같은 코드를 10번 써야할 것이다 😨</p>\n<blockquote>\n<p>📍Application 서브 클래스를 생성하여 전역으로 사용할 수 있게 한다.</p>\n</blockquote>\n<h2>생성하기</h2>\n<p>Application을 상속 받는 커스텀 SmartPhoneApplication 클래스를 생성한다.</p>\n<p>onCreate() 함수를 오버라이드 하여 어플리케이션 실행전에 Component를 build해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> SmartPhoneApplication<span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> smartPhoneComponent<span class=\"token operator\">:</span> SmartPhoneComponent\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        smartPhoneComponent <span class=\"token operator\">=</span> <span class=\"token function\">initDagger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">initDagger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SmartPhoneComponent <span class=\"token operator\">=</span>\n        DaggerSmartPhoneComponent<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이후에 <code class=\"language-text\">AndroidManifest.xml</code>파일에 이름을 지정해 줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">    &lt;application\n        android:name=\".SmartPhoneApplication\"\n            .\n            .\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>여기서 <strong>android:name</strong> 의 역할은 구글 문서에서 다음과 같이 정의되어 있다.</p>\n<blockquote>\n<p>📃: 어플리케이션에 대해 구현된 어플리케이션 서브클래스의 이름. 어플리케이션 프로세스(앱이 실행)가 시작될 때, 어플리케이션의 다른 어떤 컴포넌트보다 먼저 인스턴스화된다(객체화된다). 서브클래스는 없어도 된다(대부분의 어플리케이션은 서브클래스를 사용하지 않는다). 서브클래스가 없으면, 안드로이드는 기본 어플리케이션 클래스의 객체를 사용한다.</p>\n</blockquote>\n<p>마지막으로 사용하고자하는 Activity/Fragment에서 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Field Injection</span>\n    <span class=\"token annotation builtin\">@Inject</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> smartPhone<span class=\"token operator\">:</span> SmartPhone\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">(</span>application <span class=\"token keyword\">as</span> SmartPhoneApplication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>smartPhoneComponent\n            <span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n\n        smartPhone<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Scope</h1>\n<p>특정 Component에 Scope를 지정하고 이와 같은 생명주기를 같이할 클래스에 Scope를 지정할 수 있다. Scope가 지정되면 해당 Component의 생명주기 동안은 항상 같은 객체를 반환 받는 것을 보장한다.</p>\n<p>🧷Scoping rules</p>\n<ol>\n<li>type에 Scope을 붙일 때는 같은 Scope이 붙은 Component에 의해서만 사용 가능하다.</li>\n<li>Component에 Scope를 지정하면 Scope이 없는 type이나 동일한 Scope이 붙은 type만 제공할 수 있다.</li>\n<li>SubComponent는 상위 Component에서 사용 중인 annotation을 사용할 수 없다.</li>\n</ol>\n<p>Custom Scope를 생성하기 위해서는 다음과 같이 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Scope</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span><span class=\"token function\">Retention</span><span class=\"token punctuation\">(</span>AnnotationRetention<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">annotation</span> <span class=\"token keyword\">class</span> CustomScope</code></pre></div>\n<h2>@Singleton</h2>\n<p>Custom Application의 생성은 어플리케이션에서 공유되어 사용하기 위해서 만들어 준다고 했다. 지금까지 Dagger를 적용하여 SmartPhone을 실행하고 화면의 회전을 하게 되면 <strong>SmartPhone이 다시 생성되어 실행되는 것을 볼 수 있다.</strong></p>\n<img src=\"https://user-images.githubusercontent.com/63226023/161263860-d0937a5d-aa2b-46df-8a57-b079fa97f6c4.png\">\n<p>안드로이드 Room Database의 경우 room DB에 접근을 할때 Database객체를 받아와야 한다. 구글에선 한번 생성된 Database를 이용해서 사용하도록 권고 합니다.(싱글톤으로 만들어준다)</p>\n<p>이때 @Singleton 어노테이션을 붙여서 한개의 컴포넌트만 생성할 수 있게 해준다. </p>\n<blockquote>\n<p>📍@Singleton은 javax.inject 패키지 하위에 있는 어노테이션으로 Dagger의 어노테이션 X.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Singleton</span>\n<span class=\"token keyword\">class</span> SmartPhone <span class=\"token annotation builtin\">@Inject</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> battery<span class=\"token operator\">:</span> Battery<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> simCard<span class=\"token operator\">:</span> SIMCard<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> memoryCard<span class=\"token operator\">:</span> MemoryCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"TAG\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"스마트폰 동작!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Singleton</span>\n<span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">(</span>modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MemoryCardModule<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">interface</span> SmartPhoneComponent <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>mainActivity<span class=\"token operator\">:</span> MainActivity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>싱글톤으로 생성되어야하는 SmartPhone 클래스와 Component 인터페이스에 @Singleton 어노테이션을 붙여주고 아까와 같이 실행후 화면을 돌려봐도 같은 객체를 사용하는 것을 볼 수 있다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/161267195-f762a0ab-6f9e-4496-9a64-3c15b8b2fdb8.png\">\n<h1>Component</h1>\n<h2>Builder</h2>\n<p>Component 인스턴스를 생성하기 위한 <strong>Builder</strong> 용 어노테이션이다. <strong>Module에 초기 설정</strong> 을 할때 사용한다. Component 내의 interface 또는 abstract 클래스에 붙여서 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Singleton</span>\n<span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">(</span>modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MemoryCardModule<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">interface</span> SmartPhoneComponent <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>mainActivity<span class=\"token operator\">:</span> MainActivity<span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">.</span>Builder\n    <span class=\"token keyword\">interface</span> Builder <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">getMemoryCardModule</span><span class=\"token punctuation\">(</span>memoryCardModule<span class=\"token operator\">:</span> MemoryCardModule<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Builder\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SmartPhoneComponent\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> SmartPhoneApplication<span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">initDagger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SmartPhoneComponent <span class=\"token operator\">=</span>\n        DaggerSmartPhoneComponent<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">getMemoryCardModule</span><span class=\"token punctuation\">(</span><span class=\"token function\">MemoryCardModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Builder는 <strong>반드시 Component를 반환하는 메소드</strong> (위의 예시: build()), Builder를 반환값으로 가지면서 Component가 필요로하는 Module을 파라미터로 받는 메소드를 가지고 있어야한다.</p>\n<p>Builder를 사용하지 않고 Dagger2를 생성하였을때도 이미 Component에는 자동으로 Builder가 생성되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Singleton</span>\n<span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">(</span>modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MemoryCardModule<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">interface</span> SmartPhoneComponent <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>mainActivity<span class=\"token operator\">:</span> MainActivity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// DaggerSmartPhoneComponent.java</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MemoryCardModule</span> memoryCardModule<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">memoryCardModule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemoryCardModule</span> memoryCardModule<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memoryCardModule <span class=\"token operator\">=</span> <span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>memoryCardModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SmartPhoneComponent</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memoryCardModule <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memoryCardModule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryCardModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DaggerSmartPhoneComponent</span><span class=\"token punctuation\">(</span>memoryCardModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Factory</h2>\n<p><code class=\"language-text\">daager-android 2.22</code> 버전에서 추가된 Factory 어노테이션은 Builder와 의미는 같지만 사용법 다른 형태이다. Builder는 파라미터를 <strong>1개</strong> 만 받으며 여러 Module을 설정해야 한다면 각각의 메소드를 선언하여 메소드 체이닝이 길어지는 점을 보완한 것이 Factory이다.</p>\n<p>Factory는 <strong>단 하나</strong> 의 메소드(create())만 선언되어야 하고 Component 인스턴스를 반환해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Singleton</span>\n<span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">(</span>modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MemoryCardModule<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> ModuleB<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">interface</span> SmartPhoneComponent <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>mainActivity<span class=\"token operator\">:</span> MainActivity<span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">.</span>Factory\n    <span class=\"token keyword\">interface</span> Factory <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>memoryCardModule<span class=\"token operator\">:</span> MemoryCardModule<span class=\"token punctuation\">,</span> moduleB<span class=\"token operator\">:</span> ModuleB<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SmartPhoneComponent\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>@SubComponent</h1>\n<p>SubComponent는 부모 Component가 있는 자식 Component라고 볼 수 있다. Component는 SubComponent로 계층관계를 만들 수 있으며, SubComponent는 Dagger의 그래프를 형성하는 역할이다.</p>\n<p>Inject으로 의존성 주입을 요청받으면 SubComponent에서 먼저 의존성을 찾고, 없으면 상위 부모로 올라가면서 검색한다.</p>\n<p>@Component를 사용할 때는 직접 해당하는 component의 인스턴스를 반환하는 Factory를 만들어 줄 필요가 없었지만 @SubComponent는 <strong>반드시 부모 컴포넌트가 어떻게 서브 컴포넌트가 만들면 되는지 알도록 해야하므로 Factory를 구현해야한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@CustomScope</span>\n<span class=\"token annotation builtin\">@Subcomponent</span>\n<span class=\"token keyword\">interface</span> PpeperSubComponent <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>aActivity<span class=\"token operator\">:</span> A_Activity<span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Subcomponent</span><span class=\"token punctuation\">.</span>Factory\n    <span class=\"token keyword\">interface</span> Factory <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PpeperSubComponent\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>SubComponentModule을 만들고 서브컴포넌트 클래스를 subcomponents 속성값으로 넣어준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Module</span><span class=\"token punctuation\">(</span>subcomponents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>PpeperSubComponent<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> SubComponentModule <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>만든 모듈을 부모 Component에 추가한다.</li>\n<li>사용할 SubComponent를 외부로 노출시켜 다른곳에서 가져다 쓸수 있게 해준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Singleton</span>\n<span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">(</span>modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ModuleA<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> ModuleB<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> SubComponentModule<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">interface</span> ParentComponent <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">pppeperSubComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PpeperSubComponent<span class=\"token punctuation\">.</span>Factory  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/guide/topics/manifest/application-element.html#nm\">Android 개발자 > 문서 > 가이드</a></li>\n<li><a href=\"https://jaejong.tistory.com/125\">https://jaejong.tistory.com/125</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기","date":"April 08, 2022","update":"April 08, 2022","tags":["Android","Dagger"],"series":"Android"},"fields":{"slug":"/android-dagger2-more/","readingTime":{"minutes":8.31}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"bc850df8-7668-542d-896a-6380a5c90b44","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}}]},"previous":{"fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}},"next":{"fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},"pageContext":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","series":"Android","previousPostId":"a23c3328-e672-5cda-b982-a2a0b412559e","nextPostId":"bb9a7240-98d9-538d-9224-6d110a0f0358"}},"staticQueryHashes":[],"slicesMap":{}}