{"componentChunkName":"component---src-templates-post-jsx","path":"/ktor/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"1da09158-79bc-54c5-8886-5cf392f4154f","excerpt":"안드로이드에서는 Rest Api 통신을 편리하게 해주는  ,  라이브러리를 사용을 현재까지도 많이 사용하고 있다. 최근 Kotlin Multiplatform을 사용하게 되면서 Retrofit을 사용하지 못하게 되어 말로만 듣던 Ktor를 살펴보고자 한다. Ktor? Ktor는 Kotlin으로만 작성된 경량 웹 프레임워크이다.  따라서 플랫폼에 종속적이지 …","html":"<p>안드로이드에서는 Rest Api 통신을 편리하게 해주는 <code class=\"language-text\">Retrofit2</code> , <code class=\"language-text\">Okhttp</code> 라이브러리를 사용을 현재까지도 많이 사용하고 있다. 최근 Kotlin Multiplatform을 사용하게 되면서 Retrofit을 사용하지 못하게 되어 말로만 듣던 Ktor를 살펴보고자 한다.</p>\n<h1>Ktor?</h1>\n<p>Ktor는 Kotlin으로만 작성된 경량 웹 프레임워크이다.  따라서 플랫폼에 종속적이지 않고 Multiplatform 환경에서 사용이 가능하다.</p>\n<p>Ktor는 Server와 Client 두 모듈을 모두 제공을 하고 있으며 Android 및 Multiplatform에서 사용하기 위해 Client 부분을 알아보려고 한다.</p>\n<ol>\n<li>먼저 ktor를 사용하기 위해 gradle에 등록해준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">ktor <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>latest_version<span class=\"token operator\">></span>\n\n<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"io.ktor:ktor-client-core:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">ktor</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"io.ktor:ktor-client-cio:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">ktor</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ktor에서 지원하는 여러 옵션들이 있지만 공식문서에서 말하는  라이브러리를 살펴보면 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">core</code> :  클라이언트 함수들을 제공하는 모듈</li>\n<li><code class=\"language-text\">CIO</code> : 플랫폼 별로 요청을 처리하는 엔진에 관한 모듈</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Engine</th>\n<th>Platforms</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Apache</td>\n<td>JVM</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>JVM</td>\n</tr>\n<tr>\n<td>Jetty</td>\n<td>JVM</td>\n</tr>\n<tr>\n<td>Android</td>\n<td>JVM, Android</td>\n</tr>\n<tr>\n<td>OkHttp</td>\n<td>JVM, Android</td>\n</tr>\n<tr>\n<td>Darwin</td>\n<td>Native</td>\n</tr>\n<tr>\n<td>WinHttp</td>\n<td>Native</td>\n</tr>\n<tr>\n<td>Curl</td>\n<td>Native</td>\n</tr>\n<tr>\n<td>CIO</td>\n<td>JVM, Android, Native</td>\n</tr>\n<tr>\n<td>Js</td>\n<td>JavaScript</td>\n</tr>\n</tbody>\n</table>\n<p>간단한 예시로 네트워크 통신에서 필요한 직렬화는 Ktor에서 직렬화/역직렬화를 위해서 사용되는 <code class=\"language-text\">negotiation</code> 라이브러리와 <code class=\"language-text\">Kotlin-serialization</code> 을 사용하여 요청/응답 값을 파싱할 수 있고 이는 Ktor는 HttpClient 생성할때 <code class=\"language-text\">install</code> 함수를 사용하면 된다.</p>\n<p><a href=\"https://ktor.io/docs/client-create-new-application.html\">(Ktor 공식 문서</a>에는 다양한 옵션, 함수들을 제공하고 있어 필요한 내용을 학습하고 적용하면 될것 같다!)</p>\n<blockquote>\n<p>💡 많이 사용하는 Retrofit2 라이브러리와 같이 어노테이션 기반으로 사용할 수 있는 <a href=\"https://foso.github.io/Ktorfit/\">Ktorfit 라이브러리</a> 도 지원하고 있다!</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"io.ktor:ktor-client-content-negotiation:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">ktor</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"io.ktor:ktor-serialization-kotlinx-json:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">ktor</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> HttpClient <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">install</span><span class=\"token punctuation\">(</span>ContentNegotiation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">json</span><span class=\"token punctuation\">(</span>Json <span class=\"token punctuation\">{</span>\n        isLenient <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        ignoreUnknownKeys <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">install</span><span class=\"token punctuation\">(</span>HttpTimeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    connectTimeoutMillis <span class=\"token operator\">=</span> <span class=\"token number\">5_000L</span>\n    socketTimeoutMillis <span class=\"token operator\">=</span> <span class=\"token number\">5_000L</span>\n    requestTimeoutMillis <span class=\"token operator\">=</span> <span class=\"token number\">5_000L</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 생성된 client를 통해 HttpRequest들을 보낼 수 있다. 공식문서의 get 요청을 하나 만들어 보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 많은 함수들이 존재 (ex. request, post, delete...)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> HttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n    urlString<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    block<span class=\"token operator\">:</span> HttpRequestBuilder<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HttpResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span>urlString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ktor docs를 가져오도록 하자</span>\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://ktor.io/docs\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"[Response]\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">response<span class=\"token punctuation\">.</span><span class=\"token function\">bodyAsText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 Kotlin Multiplatform Wizard로 생성한 프로젝트에 Desktop에서 해당 요청을 사용해 보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token annotation builtin\">@Preview</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    MaterialTheme <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> showContent <span class=\"token keyword\">by</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> horizontalAlignment <span class=\"token operator\">=</span> Alignment<span class=\"token punctuation\">.</span>CenterHorizontally<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> showContent <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>showContent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Ktor Click me!\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">AnimatedVisibility</span><span class=\"token punctuation\">(</span>showContent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">val</span> scope <span class=\"token operator\">=</span> <span class=\"token function\">rememberCoroutineScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">var</span> text <span class=\"token keyword\">by</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Loading\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n                    Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    horizontalAlignment <span class=\"token operator\">=</span> Alignment<span class=\"token punctuation\">.</span>CenterHorizontally\n                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        scope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n                            text <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t                            <span class=\"token comment\">// Get 요청 </span>\n                                <span class=\"token function\">KtorExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">?:</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"UnKnown Error\"</span></span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://github.com/user-attachments/assets/48b1d777-3e20-4560-8537-5d251023b820\">\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://ktor.io/docs/welcome.html\">https://ktor.io/docs/welcome.html</a></li>\n<li><a href=\"https://foso.github.io/Ktorfit/\">https://foso.github.io/Ktorfit/</a></li>\n</ul>","frontmatter":{"title":"KMP를 지원하는 Ktor Client를 사용해보자","date":"December 04, 2024","update":"December 04, 2024","tags":["Android","Kotlin Multiplatform"],"series":"Kotlin"},"fields":{"slug":"/ktor/","readingTime":{"minutes":3.8}}},"seriesList":{"edges":[{"node":{"id":"a7e9c7fb-11d9-59aa-b9c8-faef6cfcd27e","fields":{"slug":"/scope-function/"},"frontmatter":{"title":"코틀린의 Scope Function는 언제쓸까"}}},{"node":{"id":"995d0539-ea55-5757-b642-d423a2fef20c","fields":{"slug":"/sort/"},"frontmatter":{"title":"코틀린 리스트 정렬하는 방법 (sort vs sortBy vs sortWith)"}}},{"node":{"id":"b0b78929-653d-5d49-a7cf-79c5069f2dab","fields":{"slug":"/generic-in-out/"},"frontmatter":{"title":"Kotlin 제네릭의 in, out 키워드?"}}},{"node":{"id":"33959bf6-d080-5100-ac93-0be970a5d159","fields":{"slug":"/flow/"},"frontmatter":{"title":"Kotlin Coroutines Flow 맛보기"}}},{"node":{"id":"770fa80e-3899-50bc-a219-6f0a4abde7eb","fields":{"slug":"/serialization/"},"frontmatter":{"title":"코틑린을 위한 Kotlinx Serizalization"}}},{"node":{"id":"1da09158-79bc-54c5-8886-5cf392f4154f","fields":{"slug":"/ktor/"},"frontmatter":{"title":"KMP를 지원하는 Ktor Client를 사용해보자"}}}]},"previous":{"fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}},"next":{"fields":{"slug":"/decompose/"},"frontmatter":{"title":"Kotlin Multiplatform - Decompose"}}},"pageContext":{"id":"1da09158-79bc-54c5-8886-5cf392f4154f","series":"Kotlin","previousPostId":"9d857459-0fd2-5d37-8f39-eceec94e02b2","nextPostId":"9cf5da48-1c3d-5686-a7e7-3946667cd074"}},"staticQueryHashes":[],"slicesMap":{}}