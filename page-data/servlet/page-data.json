{"componentChunkName":"component---src-templates-post-jsx","path":"/servlet/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"fa0e9c4c-dca8-546b-a3d9-a6a1f05a3fa8","excerpt":"Servlet 자바 서블릿 은 스프링 MVC 아키텍처가 나오기 전 사용하였다. \n자바 서블릿은 자바를 사용하여 웹페이지를 동적으로 생성하는 서버측 프로그램을 말한다. 자바 서블릿은 웹 서버의 성능을 향상 하기 위해 사용되는 자바 클래스의 일종으로. WAS 서버를 쉽게 구축할 수 있도록 도와준다.  즉 servlet은 정적인 리소스가 아닌 클라이언트로 부터…","html":"<h1 id=\"Servlet\" style=\"position:relative;\"><a href=\"#Servlet\" aria-label=\"Servlet permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Servlet</h1>\n<p><strong>자바 서블릿</strong> 은 스프링 MVC 아키텍처가 나오기 전 사용하였다.\n자바 서블릿은 자바를 사용하여 웹페이지를 동적으로 생성하는 서버측 프로그램을 말한다.</p>\n<p>자바 서블릿은 웹 서버의 성능을 향상 하기 위해 사용되는 자바 클래스의 일종으로. WAS 서버를 쉽게 구축할 수 있도록 도와준다. </p>\n<img src='https://user-images.githubusercontent.com/63226023/218739424-acd75b51-9c5c-4aae-8c80-b7c93e92acba.png'>\n&gt; WAS (Web Application Server)이란\n&gt;\n&gt; -&gt; WAS는 웹 애플리케이션을 통하여 필요한 기능을 수행하고 그 결과를 웹 서버에 전달해 준다.\n<p>즉 servlet은 정적인 리소스가 아닌 <strong>클라이언트로 부터 요청을 받고 이에 대한 결과값을 처리하는</strong> 역할을 수행해 주는 자바 프로그램이다.</p>\n<h1 id=\"Servlet-사용하기\" style=\"position:relative;\"><a href=\"#Servlet-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"Servlet 사용하기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Servlet 사용하기</h1>\n<p>자바 Servlet을 만들게 되면 <code class=\"language-text\">@WebServlet</code> 어노테이션으로 간단하게 url을 지정하고 이름 또한 지정해 줄 수 있다. Servlet은 <code class=\"language-text\">HttpServlet</code> 클래스를 상속 받아서 <code class=\"language-text\">service()</code>, <code class=\"language-text\">doGet()</code>, <code class=\"language-text\">doPost()</code> 메소드들을 오바라이딩 하여 request, response에 대한 클래스를 가져와 쉽게 HTTP 통신을 지원한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> urlPatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"/hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">service</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// TODO Auto-generated method stub</span>\n\t\tresponse<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Served at: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// TODO Auto-generated method stub</span>\n\t\t<span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>주요 메소드를 살펴보면 다음과 같다.</p>\n<blockquote>\n<ol>\n<li>init()</li>\n<li>Servlet이 메모리에 로드 될 때 한번 호출된다 (코드가 수정된다면 다시 호출)</li>\n<li>doGet()</li>\n<li>GET 방식으로 data전송 시 호출된다.</li>\n<li>doPost()</li>\n<li>POST 방식으로 data전송 시 호출된다.</li>\n<li>service()</li>\n<li>모든 요청은 service()를 통하여 doXXX()관련 메소드로 이동한다.</li>\n<li>destroy()</li>\n<li>Servlet이 메모레에서 해제되면 호출된다.</li>\n</ol>\n</blockquote>\n<h2 id=\"Hello-요청\" style=\"position:relative;\"><a href=\"#Hello-%EC%9A%94%EC%B2%AD\" aria-label=\"Hello 요청 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Hello 요청</h2>\n<p>Servlet의 doGet() 메소드를 이용하면 HTTP GET 요청을 처리하여 \"Hello\" 라는 메시지를 생성하고 HTML 형식으로 응답을 작성하여 전송할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\tresponse<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;html>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;head>&lt;title>Hello World Servlet&lt;/title>&lt;/head>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;body>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>Hello&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>html 파일을 직접 생성하지 않고 이러한 자바 코드안에 지정하여 사용할 수 있지만 이는 굉장히 코드 작성시 불편함이 있다. 이러한 불편함을 해소 하기 위해 <strong>JSP (Java Server Page)</strong> 가 나오게 되었다.</p>\n<h1 id=\"JSP\" style=\"position:relative;\"><a href=\"#JSP\" aria-label=\"JSP permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>JSP</h1>\n<p>Servlet은 자바 코드안에 HTML이 있지만 JSP는 HTML 내에 자바 코드를 삽입하여 웹 서버에서 동적으로 웹 페이지를 생성하여 웹 브라우저에 돌려주는 언어이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsp\"><pre class=\"language-jsp\"><code class=\"language-jsp\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\n\tpageEncoding=&quot;UTF-8&quot;%&gt;\n&lt;%!\n\tString name;\n\n\tpublic void init() {\n\t\tname = &quot;저는 JSP 입니다&quot;;\n\t}\n%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t&lt;%\n\t\tout.print(name);\n\t%&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>JSP의 문법은 <code class=\"language-text\">&lt;% %></code> 에 대한 블록을 지정하여 내부에 자바 코드를 구현 할 수 있고 많은 문법들은 인터넷에 자료들을 쉽게 볼 찾아 볼 수 있다.</p>\n<p>이렇게 JSP와 함께 Web Application Architecture의 구성은 처음에는 model1의 구조로 사용이 되었다.</p>\n<p>model1 구조는 view와 logic을 JSP 페이지 하나에서 처리하는 구조로 HTML, 자바, 비지니스 로직, JDBC 연결코드 등 이 한 곳에 들어가 있어 굉장히 유지보수가 어려워진다.😨 </p>\n<p>이에 따라 <strong>model2(MVC 패턴) 구조</strong> 가 나오게 되었다.</p>\n<h1 id=\"MVC-패턴\" style=\"position:relative;\"><a href=\"#MVC-%ED%8C%A8%ED%84%B4\" aria-label=\"MVC 패턴 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>MVC 패턴</h1>\n<p>model2의 구조는 모든 처리를 JSP가 아닌 <code class=\"language-text\">클라이언트의 요청에 대한 처리는 Servlet</code>이, <code class=\"language-text\">logic처리는 java class(Service, Dao..)</code>, <code class=\"language-text\">클라이언트에게 출력하는 response page(view)는 JSP</code>가 담당하여 개발한다.</p>\n<p>model2 구조를 흔히 MVC(Model, View, Controller) 패턴이라고 부르게 되는데 Servlet이 Controller의 역할을 맡고, JSP가 View로 사용되어 서로 Model에 대한 데이터를 참조하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeJspPage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"/bookinfo.jsp\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 어떠한 book에 대한 model을 넘긴다고 하자</span>\n        <span class=\"token class-name\">BookDto</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookDto</span><span class=\"token punctuation\">(</span>생성자 세팅<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// model에 book 데이터 전달</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookinfo\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">RequestDispatcher</span> dispatcher <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">RequestDispatcher</code> 클래스를 사용하여 요청을 JSP/Servlet 내에서 원하는 자원으로 요청을 넘기거나, 처리를 요청하고 결과를 얻어오는 기능을 수행해 주는 클래스이다. 위의 예시는 MVC 패턴으로 <code class=\"language-text\">forward()</code> 메소드를 통해여 model(bookinfo)과 함께 bookinfo.jsp로 이동하게 해준다. </p>\n<p>또한 요청을 받은 페이지에서는 request.getAttribute()로 해당하는 데이터를 가져와 동적으로 화면을 보여줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsp\"><pre class=\"language-jsp\"><code class=\"language-jsp\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;\n\tpageEncoding=&quot;UTF-8&quot; import=&quot;com.ssafy.move.BookDto&quot;%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;%\n\tBookDto bookDto = (BookDto) request.getAttribute(&quot;bookinfo&quot;);\n\tif (bookDto == null) {\n%&gt;\n&lt;script&gt;\n\talert(&quot;Book 정보가 없습니다.&quot;);\n&lt;/script&gt;\n&lt;%\n\t} else {\n%&gt;\n\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;책정보(book.jsp)&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t&lt;div&gt;\n\t\t&lt;h3&gt;\n\t\t\t[&lt;%=bookDto.getBookName()%&gt;] 정보\n\t\t&lt;/h3&gt;\n\t\tISBN :\n\t\t&lt;%=bookDto.getIsbn()%&gt;&lt;br&gt; 출판사 :\n\t\t&lt;%=bookDto.getPublisher()%&gt;&lt;br&gt; 가격 :\n\t\t&lt;%=bookDto.getPrice()%&gt;원&lt;br&gt;\n\t&lt;/div&gt;\n\t&lt;%\n\t\t}\n\t%&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p><code class=\"language-text\">dispatcher.forward()</code> 메소드 이외에 redirect의 메소드가 있는데 둘의 차이점은 다음과 같다.</p>\n<blockquote>\n<p>forward()</p>\n<ul>\n<li>forward 메소드는 현재 서블릿에서 다른 서블릿/JSP 페이지로 요청을 전달 할 수 있다.\nredirect()</li>\n<li>redirect 메소드는 새로운 요청을 생성하고, 새로운 URL로 이동을 하게된다. 따라서 클라이언트에서는 두 번의 요청이 발생하게 되고, 이에 따라 URL도 변경된다.</li>\n<li>redirect는 따라서 새로운 요청을 생성하므로, 기존의 요청 객체(bookinfo)에 저장된 데이터는 새로운 요청 객체에서 사용할 수 없다.</li>\n</ul>\n</blockquote>","frontmatter":{"title":"Spring 이전에 자바 Servlet 알아보기","date":"February 15, 2023","update":"February 15, 2023","tags":["Java","Servlet"],"series":"Java"},"fields":{"slug":"/servlet/","readingTime":{"minutes":7.4}}},"seriesList":{"edges":[{"node":{"id":"11de9b4c-f211-5495-8df2-fc446aa56638","fields":{"slug":"/comparable-comparator/"},"frontmatter":{"title":"자바에서의 Comparable, Comparator 정렬"}}},{"node":{"id":"fa0e9c4c-dca8-546b-a3d9-a6a1f05a3fa8","fields":{"slug":"/servlet/"},"frontmatter":{"title":"Spring 이전에 자바 Servlet 알아보기"}}}]},"previous":{"fields":{"slug":"/comparable-comparator/"},"frontmatter":{"title":"자바에서의 Comparable, Comparator 정렬"}},"next":{"fields":{"slug":"/spring-basic/"},"frontmatter":{"title":"스프링 프레임워크의 등장"}}},"pageContext":{"id":"fa0e9c4c-dca8-546b-a3d9-a6a1f05a3fa8","series":"Java","previousPostId":"11de9b4c-f211-5495-8df2-fc446aa56638","nextPostId":"a74da8e5-4604-5278-95db-7f41252490cb"}},"staticQueryHashes":[],"slicesMap":{}}