{"componentChunkName":"component---src-templates-post-jsx","path":"/programmers-tips-town/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"6a88ad07-efd2-5e8e-85cb-d5bba9e8cf17","excerpt":"문제 설명 짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지…","html":"<h3>문제 설명</h3>\n<p>짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.</p>\n<p>예를 들어, 문자열 S = <code class=\"language-text\">baabaa</code> 라면</p>\n<p>b aa baa → bb aa → aa →</p>\n<p>의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.</p>\n<h3>제한사항</h3>\n<ul>\n<li>문자열의 길이 : 1,000,000이하의 자연수</li>\n<li>문자열은 모두 소문자로 이루어져 있습니다.</li>\n</ul>\n<h3>입출력 예</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">s</th>\n<th align=\"left\">result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">baabaa</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">cdcd</td>\n<td align=\"left\">0</td>\n</tr>\n</tbody>\n</table>\n<h3>풀이</h3>\n<hr>\n<ol>\n<li>짝지어 삭제하는 문제에서는 <code class=\"language-text\">Stack/Queue</code> 구조를 많이 사용하기 때문에 이 자료구조부터 생각하였다.</li>\n<li><code class=\"language-text\">Stack</code>이 비어있으면 값을 넣고 그 다음부터 <code class=\"language-text\">Stack</code>에 넣기전에 전에 <code class=\"language-text\">LIFO</code>구조로 가장 최신으로 들어온값을 비교하여 같으면 그값을 삭제하고 <code class=\"language-text\">다르면</code> <code class=\"language-text\">Stack</code>에 push하여 진행한다.</li>\n<li>문자열의 모든 값이 다 지나고 <code class=\"language-text\">Stack</code>이 empty면 -> 모두 제거 1 else 0으로 출력.</li>\n</ol>\n<h1>코드(Java)</h1>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 마지막에 들어온 값과 현재 들어올 값이 같음</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"프로그래머스 2017 팁스타운 - 짝지어 제거하기","date":"December 25, 2021","update":"December 25, 2021","tags":["Algorithm","programmers"],"series":"Algorithm"},"fields":{"slug":"/programmers-tips-town/","readingTime":{"minutes":2.5}}},"seriesList":{"edges":[{"node":{"id":"6a88ad07-efd2-5e8e-85cb-d5bba9e8cf17","fields":{"slug":"/programmers-tips-town/"},"frontmatter":{"title":"프로그래머스 2017 팁스타운 - 짝지어 제거하기"}}},{"node":{"id":"814be3a5-2662-5037-a41b-ae3a88c11945","fields":{"slug":"/programmers-kakao-blind-2020-1/"},"frontmatter":{"title":"프로그래머스 2020 KAKAO BLIND RECRUITMENT - 괄호 변환"}}},{"node":{"id":"9235e1fe-da08-5cc6-96e9-5919bddff0fa","fields":{"slug":"/programmers-kakao-blind-2020-2/"},"frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - 신고 결과 받기"}}},{"node":{"id":"25be2350-7ca4-5657-b192-255f4ac12389","fields":{"slug":"/programmers-kakao-blind-2020-3/"},"frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - k진수에서 소수 개수 구하기"}}},{"node":{"id":"8cfe1ce4-abd0-51a5-b257-ee4b1b89dccf","fields":{"slug":"/programmers-kakao-blind-2018-1/"},"frontmatter":{"title":"프로그래머스 2018 KAKAO RECRUITMENT - [1차]캐시"}}},{"node":{"id":"5e3cc442-642e-5777-b707-5f1513b6e7fc","fields":{"slug":"/programmers-kakao-blind-2021-1/"},"frontmatter":{"title":"프로그래머스 2021 KAKAO BLIND RECRUITMENT - 순위 검색"}}},{"node":{"id":"4c2618c6-2138-584d-925b-5ad902505f6b","fields":{"slug":"/brute-force/"},"frontmatter":{"title":"알고리즘 완전탐색(Exhaustive search)이란"}}},{"node":{"id":"b167a775-e860-5c19-8368-765d569da317","fields":{"slug":"/greedy/"},"frontmatter":{"title":"그리디 알고리즘(Greedy Algorithm)에 대해"}}},{"node":{"id":"ef3315e9-7887-56c5-ab56-f0fa510d25a7","fields":{"slug":"/dfs-bfs/"},"frontmatter":{"title":"알고리즘 DFS/BFS 탐색 방법 알아보기"}}},{"node":{"id":"5bfc345a-73e4-5ba2-9ecc-2d0f7cbcc406","fields":{"slug":"/dynamic-programming/"},"frontmatter":{"title":"알고리즘 Dynamic Programming(동적 프로그래밍) 살펴보기"}}},{"node":{"id":"e6cffd30-3ac6-5a9a-8e24-0b0c55c47891","fields":{"slug":"/graph-mst/"},"frontmatter":{"title":"그래프 알고리즘이란 + 최소 신장 트리(MST)"}}},{"node":{"id":"d80bd3c0-f2e9-5a38-a7fd-21ad9685fc86","fields":{"slug":"/graph-sortest-path/"},"frontmatter":{"title":"그래프 최단거리 구하기"}}}]},"previous":null,"next":{"fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},"pageContext":{"id":"6a88ad07-efd2-5e8e-85cb-d5bba9e8cf17","series":"Algorithm","previousPostId":null,"nextPostId":"ec35f26c-1e41-5966-85a5-26fa93fb5998"}},"staticQueryHashes":[],"slicesMap":{}}