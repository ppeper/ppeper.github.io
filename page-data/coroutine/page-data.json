{"componentChunkName":"component---src-templates-post-jsx","path":"/coroutine/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","excerpt":"코루틴 개요 스레드와 코루틴을 알아보면서 코루틴에 대한 개념을 알아보았었다. 스레드와 코루틴은 둘다 동시성을 보장  관점에서 보면 비슷한 개념이라고 생각이 든다. 코투린은 실행되다가 일시 정지(예: 일정 시간 대기) 할 때 코틀린 런타임에 의해 자신이 실행되던 스레드가 다른 코루틴 에 할당된다. 이번 포스팅을 통해 코루틴의 구현에 필요한 요소 들을 살펴보…","html":"<img src=\"https://user-images.githubusercontent.com/63226023/152948157-588cbe52-ea52-4654-9050-cd98db3a51ba.png\">\n<h1>코루틴 개요</h1>\n<p><a href=\"https://ppeper.github.io/cs/thread-coroutine/\">스레드와 코루틴</a>을 알아보면서 코루틴에 대한 개념을 알아보았었다. 스레드와 코루틴은 둘다 <strong>동시성을 보장</strong>  관점에서 보면 비슷한 개념이라고 생각이 든다.</p>\n<p>코투린은 실행되다가 <strong>일시 정지(예: 일정 시간 대기)</strong> 할 때 코틀린 런타임에 의해 <strong>자신이 실행되던 스레드가 다른 코루틴</strong> 에 할당된다. 이번 포스팅을 통해 <strong>코루틴의 구현에 필요한 요소</strong> 들을 살펴보면서 대략적인 코루틴이란 무엇인지 알아보려고 한다👍</p>\n<h2>안드로이드 앱의 메인 스레드</h2>\n<p>안드로이드 앱이 처음 시작되면 런타인 시스템에서 하나의 스레드를 생성하며 이 스레드를 <strong>메인 스레드(Main)</strong> 라고 한다. 모든 앱 컴포넌트들은 이 <strong>메인 스레드</strong> 에서 실행이 되며, 주된 역할은 <strong>사용자 인터페이스(UI)</strong> 를 처리하는 것이다.</p>\n<p><strong>메인 스레드</strong> 를 사용해서 <strong>시간이 오래걸리는 작업</strong> 을 수행을 하게되면 <strong>해당 작업이 끝날 때까지 앱 전체가 멈춘 것</strong> 🚫 처럼 보이게 된다. 이 경우에 안드로이드에서는 <strong>'ANR(애플리케이션 응답 없음)'</strong> 오류가 발생하게 된다. 이때는 별도의 <strong>백그라운드 스레드</strong> 에서 수행되어야 메인 스레드가 방해를 받지 않고 다른 작업을 계속하게 해주어야 한다.</p>\n<p>코루틴은 이러한 백그라운드 작업을 좀 더 효율적이고 간편하게 개발할 수 있도록 한다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/152943012-23be57c1-e7ad-45ad-9d73-2d1d40522198.png\" width=\"30%\">\n<p>코루틴을 시작하기 전에 간단하게 <strong>메인 스레드</strong> 가 방해받는 예시를 보고 들어가 보려고한다. 이 예시에서는 <code class=\"language-text\">Click을 통하여 textview를 1씩 증가</code>를 하고 <code class=\"language-text\">Download data를 통하여 Log 메시지를 20만번</code> 보여주게 하려고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding<span class=\"token operator\">:</span> ActivityMainBinding\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        binding <span class=\"token operator\">=</span> ActivityMainBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n\n        binding<span class=\"token punctuation\">.</span>btnCount<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n            binding<span class=\"token punctuation\">.</span>tvCount<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        binding<span class=\"token punctuation\">.</span>btnDownload<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">downloadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">downloadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">200000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Coroutines\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Download </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">i</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>downloadData 함수에서 200000번 Log를 출력하고 btnCount는 클릭시 1씩 증가가 되어 사용자 인터페이스 UI에게 보여줄 것이다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/152945466-305bb24c-f0f0-427d-b210-430ae3c63d4a.png\">\n<p>Download Data 버튼을 클릭하면 Log창에 메시지가 뜨는것을 볼 수 있다. </p>\n<p><img src=\"https://user-images.githubusercontent.com/63226023/152945657-ca178551-6316-4f55-8428-68546ed3cae9.png\" width=\"31%\"> <img src=\"https://user-images.githubusercontent.com/63226023/152945695-995e7004-bffe-499d-aec4-9aa35fd31840.png\" width=\"30%\"></p>\n<p>이때 Click버튼을 계속 누르게 되면 <strong>앱이 멈춘것처럼(Freezing)</strong> 있다가 <strong>ANR</strong> 이 발생하여 앱이 종료되는 것을 볼 수 있다. 위에서 앱의 UI는 <strong>메인 스레드</strong> 에서 처리한다고 하였는데 이때에 <strong>메인 스레드에서 바쁘게 작업을 하고 있기 때문에</strong>  UI를 처리하는데 문제가 생긴 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">binding<span class=\"token punctuation\">.</span>btnDownload<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">downloadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 문제를 해결하기 위해 downloadData를 다음으로 감싼다. 코루틴 관련한 개념은 차차 알아가 보려고 한다.</p>\n<p>해당 코드를 추가하고 앱을 실행해보면 Download Data를 클릭을 한 후 Click을 하여도 숫자가 잘 증가하는 것을 볼 수 있다😮</p>\n<hr>\n<h1>코루틴 사용하기</h1>\n<p>코루틴의 사용하기 위해서는 dependency를 추가해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">dependencies {\n    .\n    .\n    .\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'\n}</code></pre></div>\n<p>코루틴을 사용할 준비가 되었다면 크게 다음과 같은 코루틴의 구성요소로 사용한다.</p>\n<ul>\n<li>코루틴 범위(Scope)</li>\n<li>코루틴 디스패처(Dispatchers)</li>\n<li>코루틴 시작</li>\n</ul>\n<h2>코루틴 범위(Scope)</h2>\n<p>모든 코루틴은 <del>개별적으로 실행되지 않고</del> 그룹으로 관리될 수 있는 <strong>범위</strong> 에서 실행이 되어야 한다. 범위에서 실행을 하여 액티비티나 프래그먼트가 소멸될때 이와 관련된 코루틴도 한번에 취소 또는 소멸을 하여 <strong>메모리 누수</strong> 가 생기지 않게 해준다.</p>\n<p>코틀린은 커스텀 범위의 생성뿐만 아니라 내장된 범위도 지원한다.</p>\n<ul>\n<li><strong>GlobalScope</strong> : <strong>앱의 전체 생명주기와 같이 실행</strong> 이 되기 때문에 <strong>앱이 시작될 때 생성되어 종료되어야만 메모리에서 해제</strong> 된다. 코루틴이 필요가 없어도(예: 액티비티가 종료) 계속 실행될 가능성이 있으므로 안드로이드 앱에서는 사용하지 않는 것을 권장한다.</li>\n<li><strong>ViewModelScope</strong> : <strong>ViewModel 컴포넌트를 사용</strong> 할 때 ViewModel 인스턴스에서 사용하기 위해 제공된다. ViewModel 인스턴스가 소멸될 때 코틀린 런타임에 의해 자동으로 취소된다.</li>\n</ul>\n<p>이 외에는 커스텀 범위가 사용된다. 이때에 사용되는 스코프는 <strong>CoroutineScope</strong> 이다.</p>\n<ul>\n<li><strong>CoroutineScope</strong> : 코루틴 라이브러리에서 <strong>기본적으로 제공</strong> 하는 스코프이다. 액티비티가 종료되거나 클래스의 인스턴스가 소멸되면 메모리에서 해제된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">binding<span class=\"token punctuation\">.</span>btnDownload<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">downloadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시를 보면 <code class=\"language-text\">CoroutineScope</code> 를 사용하여 코루틴 실행에 사용될 <code class=\"language-text\">Dispatchers.Main</code> 디스패처를 갖는 <strong>코루틴 범위</strong> 를 선언하였다. </p>\n<h2>코루틴 디스패처(Dispatchers)</h2>\n<p>코틀린은 서로 다른 유형의 <strong>비동기 작업 스레드</strong> 를 유지 관리한다. 코루틴을 시작할때 이러한 디스패처를 지정해 주어야 한다.</p>\n<ul>\n<li><strong>Dispatchers.Main</strong> : <strong>메인 스레드</strong> 에서 코루틴을 실행한다. UI를 변경할 필요가 있는 코루틴에 적합하며, 경량의 작업을 사용하는데 보편적으로 사용된다.</li>\n<li><strong>Dispatchers.IO</strong> : <strong>네트워크, 디스크, 데이터베이스 작업</strong> 을 수행하는 코루틴에 적합하다.</li>\n<li><strong>Dispatchers.Default</strong> : 안드로이드의 <strong>기본 스레드풀을 사용</strong> 한다. <strong>데이터의 정렬이나 복잡한 연산</strong> 과 같은 CPU를 많이 사용하는 코루틴에 적합하다.</li>\n</ul>\n<h2>코루틴 시작</h2>\n<p>코루틴의 범위와 디스패처를 정했으면 코루틴을 시작할 준비가 되었다. 코루틴을 동작하기 위해선 <strong>launch</strong> 와 <strong>async</strong> 로 시작을 하면된다.</p>\n<ul>\n<li>\n<p><strong>launch</strong> </p>\n<ul>\n<li>결과를 반환❌</li>\n<li>Job 객체를 반환한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>async</strong> </p>\n<ul>\n<li>결과를 반환⭕</li>\n<li>Deffered 객체를 반환한다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>References</h1>\n<ul>\n<li>안드로이드 스튜디오 Arctic Fox &#x26; 프로그래밍                                  </li>\n</ul>","frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기","date":"February 14, 2022","update":"February 14, 2022","tags":["Android","Kotlin","Coroutine","비동기"],"series":"Android"},"fields":{"slug":"/coroutine/","readingTime":{"minutes":8.385}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"bc850df8-7668-542d-896a-6380a5c90b44","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}}]},"previous":{"fields":{"slug":"/programmers-kakao-blind-2021-1/"},"frontmatter":{"title":"프로그래머스 2021 KAKAO BLIND RECRUITMENT - 순위 검색"}},"next":{"fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},"pageContext":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","series":"Android","previousPostId":"243a7274-df6b-570a-8a1e-05e4f556f787","nextPostId":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc"}},"staticQueryHashes":[],"slicesMap":{}}