{"componentChunkName":"component---src-templates-post-jsx","path":"/spring-ioc/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"3965c2e7-02fa-5e20-aaef-608db72f48bb","excerpt":"IoC(제어의 역전) Dependency Injection 에서 보았던 자바에서의 객체 간의 결합도가 강하게 되면 클래스와 결합된 다른 클래스도 같이 유지보수 되어야 할 가능성이 높아지게 된다. IoC(제어의 역전)은 이름과 같이 제어하는 주체가 바뀌었다는 의미로 프로그램의 제어 흐름을 개발자가 제어권을 갖지 않고 외부에서 결정 하는 것을 말한다. 이러한…","html":"<h1>IoC(제어의 역전)</h1>\n<p><a href=\"https://ppeper.github.io/cs/dependency-Injection/\">Dependency Injection</a> 에서 보았던 자바에서의 객체 간의 결합도가 강하게 되면 <strong>클래스와 결합된 다른 클래스도 같이 유지보수</strong> 되어야 할 가능성이 높아지게 된다.</p>\n<p>IoC(제어의 역전)은 이름과 같이 제어하는 주체가 바뀌었다는 의미로 <strong>프로그램의 제어 흐름을 개발자가 제어권을 갖지 않고 외부에서 결정</strong> 하는 것을 말한다.</p>\n<p>이러한 IoC의 구현 방법 중 하나가 의존성 주입(Dependency Injection)으로 객체에서 필요로 하는 다른 객체를 외부에서 주입 받아 사용하게 되어 객체간의 결합도를 낮추고 유연성과 재사용성을 높일 수 있다.</p>\n<hr>\n<h1>스프링 컨테이너</h1>\n<p><code class=\"language-text\">컨테이너</code>는 객체의 생성, 사용, 소멸에 해당하는 라이프사이클을 담당하여 이러한 라이프사이클을 기본으로 애플리케이션의 사용에 필요한 주요 기능을 제공한다.</p>\n<p>스프링에서는 자바 객체를 <code class=\"language-text\">빈(Bean)</code>이라고 불리며 기존의 개발자가 객체의 생성, 사용, 소멸에 대한 것을 직접 해주었다면 Ioc, DI의 개념이 들어간 <strong>스프링 컨테이너가 이 역할을 대신해 주며, 객체들 간의 의존 관계를 스프링 컨테이너가 런타임 과정에서 결정해 준다.</strong></p>\n<h2>스프링 컨테이너 종류</h2>\n<p>스프링 컨테이너에는 <code class=\"language-text\">BeanFactory</code> 와 <code class=\"language-text\">ApplicationContext</code> 가 있다.</p>\n<h3>BeanFactory vs ApplicationContext</h3>\n<p><code class=\"language-text\">BeanFactory</code>는 빈을 등록, 생성, 조회, 반환하는 기능을 담당하고 <code class=\"language-text\">getBean()</code> 메소드를 통하여 빈을 인스턴스화 할 수 있다.</p>\n<p><code class=\"language-text\">ApplicationContext</code>는 BeanFactory를 확장한 인테페이스로 IoC 컨테이너로 빈을 동록하고 관리하는 기본적인 기능들은 BeanFactory와 동일하다.</p>\n<p>둘의 차이점은 <strong>BeanFactory는 빈을 사용할 때(getBean() 호출)마다 빈을 생성</strong> 하지만 <strong>ApplicationContext는 Context를 초기화 할 시점에 빈을 미리 로드하고 캐시에 저장</strong> 하기 때문에, BeanFactory보다 빠른 애플리케이션 시작 시간을 제공할 수 있다.</p>\n<p>또한 ApplicationContext는 BeanFactory의 모든 기능 이외 다국어 처리, 이벤트 발행 및 구독, AOP(Aspect-Oriented Programming) 등의 기능을 지원한다.</p>\n<hr>\n<h1>스프링에서 Bean 의존관계</h1>\n<p>스프링에서 자바 객체(Bean)을 사용하기 위한 방법으로는 크게 3가지가 있다.</p>\n<ol>\n<li>XML로 빈 설정</li>\n<li>Annotation으로 빈 설정</li>\n<li>Java 코드로 빈 설정</li>\n</ol>\n<h2>1. XML 문서이용</h2>\n<ul>\n<li>Application에서 사용할 Spring 자원들을 설정하는 파일이다.</li>\n<li>스프링 컨테이너는 설정파일에 설정된 내용들을 읽어 Application에서 필요한 기능들을 제공한다.</li>\n<li>Root tag는 <code class=\"language-text\">&lt;beans></code></li>\n</ul>\n<p>빈 객체 생성 및 주입의 기본 설정은 아래와 같다.</p>\n<blockquote>\n<p>주입할 객체를 설정파일에 설정</p>\n<ul>\n<li>&#x3C;bean> : 스프링 컨테이너가 관리할 빈 객체를 설정한다.\n기본속성</li>\n<li>name : 주입 받을 곳에서 호출할 이름을 설정한다.</li>\n<li>id : 주입 받을 곳에서 호출할 이름을 설정한다 (유일 값이어야한다.)</li>\n</ul>\n</blockquote>\n<p>자바 객체파일에서 필요한 주입 받을 dataSource</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Some1DaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Some1Dao</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// set을 통한 주입</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Some2DaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Some2Dao</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// set을 통한 주입</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Some2DaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>beans 설정 파일에 <code class=\"language-text\">&lt;bean></code> 들을 등록</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ds<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.SimpleDriverDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://127.0.0.1:3306/mydb<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pw<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token comment\">&lt;!-- 라이프 사이클을 Spring이 대신해준다. --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dao1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>패키지위치<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token comment\">&lt;!-- 위에서 만든 id ds를 setDataSource를 호출하라는 의미 --></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ds<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\t\n\t<span class=\"token comment\">&lt;!-- 라이프 사이클을 Spring이 대신해준다. --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dao2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>패키지위치<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token comment\">&lt;!-- 생성자를 호출 -> 이름은 같을것으로 ref만 설정 --></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ds<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">&lt;property></code>, <code class=\"language-text\">&lt;constructor-arg></code> tag등을 통해여 속성, 생성자를 통한 주입을 해 줄 수 있다. 해당하는 빈 객체들은 <strong>ClassPathXmlApplicationContext</strong> 로 context를 생성하여 설정한 빈 들을 주입 받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GuestBookMain</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span>xml이 있는 패키지 <span class=\"token operator\">+</span> xml이름<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// bean 설정파일의 id(유일 값)으로 지정한 이름으로 주입</span>\n        <span class=\"token class-name\">Some1Dao</span> some1Dao <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dao1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some1DaoImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Some2Dao</span> some1Dao <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dao2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some1DaoImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>2. Annotation으로 빈 설정</h2>\n<p>스프링에 프레임워크에서는 <strong>Stereotype annotation</strong> 을 통하여 컴포넌트 스캔을 할 수 있다. 기본적으로 제공하는 어노테이션은 <code class=\"language-text\">@Component</code>, <code class=\"language-text\">@Controller</code>, <code class=\"language-text\">@Service</code>, <code class=\"language-text\">@Repository</code> 이 있다.</p>\n<table>\n<thead>\n<tr>\n<th>StereoType</th>\n<th>적용 대상</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Repository</td>\n<td>Data Access Layer의 DAO 또는 Repository 클래스에 사용한다.</td>\n</tr>\n<tr>\n<td>@Service</td>\n<td>Service Layer 클래스에 사용한다.</td>\n</tr>\n<tr>\n<td>@Controller</td>\n<td>Presentation Layer의 MVC에서 컨트롤러 역할을 수행하는 클래스에 사용한다.</td>\n</tr>\n<tr>\n<td>@Component</td>\n<td>위의 Layer 구분하기 어려운 일반적인 경우에 사용한다.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Repository</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">/**\n\t * The value may indicate a suggestion for a logical component name,\n\t * to be turned into a Spring bean in case of an autodetected component.\n\t * @return the suggested component name, if any (or empty String otherwise)\n\t */</span>\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 어노테이션들은 모두 <strong>@Component</strong> 와 연관 되어 해당하는 어노테이션을 클래스에 명시하면 스프링 컨테이너에서 <strong>컴포넌트 스캔을 통하여 해당 클래스의 객체(Bean)들을 관리해 준다.</strong></p>\n<h2>빈 의존 관계 설정</h2>\n<p>스프링의 빈을 명시해 주었으면 관리되고 있는 클래스간의 의존 관계를 연결해 주어야 한다. 스프링에서 빈 의존 관계를 위한 어노테이션을 제공하여  멤버 변수에 직접 정의하는 경우 <strong>어노테이션을 통하여 setter method를 만들지 않아도 된다.</strong></p>\n<table>\n<thead>\n<tr>\n<th>Annotation</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Resource</td>\n<td>멤버변수, setter method에서 사용이 가능하며 <strong>타입</strong> 에 맞춰서 연결된다.</td>\n</tr>\n<tr>\n<td>@Autowired</td>\n<td>스프링 2.5부터 지원하며 <strong>Spring에서는 사용가능하다.</strong> <br> 멤버변수, setter, constructor, 일반 method에 사용이 가능하며 <strong>타입</strong> 에 맞춰서 연결된다.</td>\n</tr>\n<tr>\n<td>@Inject</td>\n<td>스프링 3.0부터 지원하며 Framework에 종속적이지 않다. <br> <code class=\"language-text\">@Autowired</code>와 마찬지로 사용이 가능하며 <strong>이름</strong> 으로 연결된다.</td>\n</tr>\n</tbody>\n</table>\n<p>스프링 빈 설정을 어노테이션으로 할 경우 반드시 <code class=\"language-text\">component-scan</code>을 설정 해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token comment\">&lt;!-- 스캔할 어노테이션이 있는 패키지 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>패키지 경로<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>3. Java 코드로 설정</h2>\n<p>컴포넌트 어노테이션을 사용하지 않고 직접 빈을 등록할 클래스들을 정의하기 위해서는  자바 클래스를 <code class=\"language-text\">@Configuration</code> 으로 설정파일인것을 명시해주어야 한다. 또한 <code class=\"language-text\">@ComponentScan(basePackages = {})</code> 를 통하여 component 스캔 할 패키지를 설정해 줄 수 있다. 자바 코드에서 관리될 빈 객체는 <code class=\"language-text\">@Bean</code> 어노테이션을 통하여 스프링이 관리되어야 할 클래스임을 알 수 있게 해준다.</p>\n<blockquote>\n<p>@Configuration</p>\n<ul>\n<li>설정파일인것을 명시한다.</li>\n</ul>\n<p>@ComponentScan(basePackages = {})</p>\n<ul>\n<li>컴포넌트 스캔할 패키지를 설정한다.</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComponentScan</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDriverDataSource</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"패키지 경로\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationConfig</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SimpleDriverDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDriverDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>Driver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/mydb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"스프링 IoC와 컨테이너 알아보기","date":"February 19, 2023","update":"February 19, 2023","tags":["Java","Spring"],"series":"Spring"},"fields":{"slug":"/spring-ioc/","readingTime":{"minutes":9.6}}},"seriesList":{"edges":[{"node":{"id":"7c2a5137-3083-5999-8100-ccb108826427","fields":{"slug":"/spring-basic/"},"frontmatter":{"title":"스프링 프레임워크의 등장"}}},{"node":{"id":"3965c2e7-02fa-5e20-aaef-608db72f48bb","fields":{"slug":"/spring-ioc/"},"frontmatter":{"title":"스프링 IoC와 컨테이너 알아보기"}}},{"node":{"id":"1615c639-0404-59d5-abca-da166e43bd79","fields":{"slug":"/spring-mvc/"},"frontmatter":{"title":"Spring Web MVC 프레임워크 보기"}}},{"node":{"id":"d22dd82e-1a09-5438-a537-05a70813157e","fields":{"slug":"/springboot/"},"frontmatter":{"title":"스프링을 편하게 스프링 부트를 사용해보자"}}}]},"previous":{"fields":{"slug":"/spring-basic/"},"frontmatter":{"title":"스프링 프레임워크의 등장"}},"next":{"fields":{"slug":"/spring-mvc/"},"frontmatter":{"title":"Spring Web MVC 프레임워크 보기"}}},"pageContext":{"id":"3965c2e7-02fa-5e20-aaef-608db72f48bb","series":"Spring","previousPostId":"7c2a5137-3083-5999-8100-ccb108826427","nextPostId":"1615c639-0404-59d5-abca-da166e43bd79"}},"staticQueryHashes":[],"slicesMap":{}}