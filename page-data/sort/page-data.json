{"componentChunkName":"component---src-templates-post-jsx","path":"/sort/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"6278f7b7-1d13-53b3-94f8-7f9cfd1520f4","excerpt":"최근에 알고리즘의 풀이를 에서 로 바꾸며 진행해 나가면서 알고리즘 문제 풀이에서 많이 사용되는 정렬을 하는 방법 에 대해서 알아가보려고 한다. 리스트 기본 정렬 코틀린에서 리스트의 정렬은 다음과 같이 크게 , , 의 세가지 방법이 있다. 코틀린에서는 Immutable 과 Mutable 로 나뉜다. 여기서 Immutable(데이터의 변경이 불가능)에서는 함…","html":"<img src=\"https://user-images.githubusercontent.com/63226023/167560322-2806af0e-35ee-4323-be7d-f289948e24d5.png\">\n<p>최근에 알고리즘의 풀이를 <code class=\"language-text\">자바언어</code>에서 <code class=\"language-text\">코틀린언어</code>로 바꾸며 진행해 나가면서 알고리즘 문제 풀이에서 많이 사용되는 <strong>정렬을 하는 방법</strong> 에 대해서 알아가보려고 한다.</p>\n<hr>\n<h1>리스트 기본 정렬</h1>\n<p>코틀린에서 리스트의 정렬은 다음과 같이 크게 <code class=\"language-text\">sort</code>, <code class=\"language-text\">sortBy</code>, <code class=\"language-text\">sortWith</code>의 세가지 방법이 있다.</p>\n<p>코틀린에서는 <strong>Immutable</strong> 과 <strong>Mutable</strong> 로 나뉜다. 여기서 Immutable(데이터의 변경이 불가능)에서는 함수의 끝에 <strong>ed</strong> 로 끝난다.</p>\n<blockquote>\n<ul>\n<li>Mutable(데이터의 변경이 가능): <code class=\"language-text\">sort()</code>, <code class=\"language-text\">reverse()</code></li>\n<li>Immutable(데이터의 변경 불가능): <code class=\"language-text\">sorted()</code>, <code class=\"language-text\">reversed()</code></li>\n</ul>\n</blockquote>\n<h2>sort(), sorted() / reverse(), reversed()</h2>\n<blockquote>\n<p><code class=\"language-text\">sort()</code>는 <strong>데이터의 변경이 가능한</strong> 리스트에 사용되며, <code class=\"language-text\">sort()</code>는 <strong>리스트의 원형 변경하지 않고</strong>, <strong>리스트를 정렬된(오름차순) 리스트로 변경</strong> 합니다. </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> mutablelist <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    mutablelist<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"MutableList: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">mutablelist</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">sorted()</code>는 <strong>데이터의 변경이 불가능</strong> 한 리스트에 사용되며, <code class=\"language-text\">sorted()</code>는 <strong>리스트의 원형 변경하지 않고</strong>, <strong>정렬된(오름차순) 리스트를 생성하여 반환</strong> 합니다. </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> sortedlist <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"List: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">list</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Sortedlist: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">sortedlist</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//    List: [7, 2, 1, 10, 12, 5, 4]</span>\n    <span class=\"token comment\">//    Sortedlist: [1, 2, 4, 5, 7, 10, 12]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">reverse()</code>, <code class=\"language-text\">reversed()</code> 또한 위와 같은 방식으로 리스트를 <strong>역순으로 정렬</strong> 한다.</p>\n<ul>\n<li><code class=\"language-text\">reverse()</code> : Mutable 리스트에 사용한다. <strong>리스트를 역순으로 정렬을 시킨다</strong></li>\n<li><code class=\"language-text\">reversed()</code> : Immutable 리스트에 사용한다. <strong>역순으로 변경된 리스트를 생성하고 반환 한다</strong></li>\n</ul>\n<hr>\n<h1>기본 정렬 -> sort(ed)By</h1>\n<p><code class=\"language-text\">sortBy()</code>는 리스트 요소가 1개 이상으로 있을때 어떤 요소를 기준으로 정렬을 할지 결정할 수 있다.</p>\n<p>아래의 예시에서 <strong>Info</strong> 클래스에 대해서 <strong>이름순으로</strong> 정렬을 하고자 하면 <code class=\"language-text\">sortBy</code>를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> count<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> grade<span class=\"token operator\">:</span> Double\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"E\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Name으로 정렬\"</span></span><span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">sortedBy</span> <span class=\"token punctuation\">{</span>\n        it<span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//    Name으로 정렬</span>\n    <span class=\"token comment\">//    Info(name=A, count=11, grade=3.5)</span>\n    <span class=\"token comment\">//    Info(name=A, count=9, grade=3.5)</span>\n    <span class=\"token comment\">//    Info(name=A, count=9, grade=1.5)</span>\n    <span class=\"token comment\">//    Info(name=B, count=8, grade=2.5)</span>\n    <span class=\"token comment\">//    Info(name=C, count=5, grade=3.0)</span>\n    <span class=\"token comment\">//    Info(name=E, count=1, grade=4.0)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>기준이 2개 이상 -> sort(ed)With</h1>\n<p>위의 예시에서는 Name으로 오름차순으로 정렬을 한것을 볼 수 있다. 여기서 새 프로퍼티 Count를 정렬 조건으로 추가하고 싶다면 <code class=\"language-text\">sortWith()</code>을 사용하면 된다. <code class=\"language-text\">sortWith()</code>는 인자로 Comparator를 구현하여 넘겨주게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"E\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Name으로 정렬후 Count으로 정렬\"</span></span><span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">sortedWith</span><span class=\"token punctuation\">(</span>\n        compareBy<span class=\"token operator\">&lt;</span>Info<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span>name\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenBy</span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span>count\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//    Name으로 정렬후 Count으로 정렬</span>\n    <span class=\"token comment\">//    Info(name=A, count=9, grade=3.5)</span>\n    <span class=\"token comment\">//    Info(name=A, count=9, grade=1.5)</span>\n    <span class=\"token comment\">//    Info(name=A, count=11, grade=3.5)</span>\n    <span class=\"token comment\">//    Info(name=B, count=8, grade=2.5)</span>\n    <span class=\"token comment\">//    Info(name=C, count=5, grade=3.0)</span>\n    <span class=\"token comment\">//    Info(name=E, count=1, grade=4.0)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Name으로 정렬후 Count으로 정렬후 Grade로 정렬\"</span></span><span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">sortedWith</span><span class=\"token punctuation\">(</span>\n        compareBy<span class=\"token operator\">&lt;</span>Info<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span>name\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenBy</span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span>count\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenBy</span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span>grade\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//    Name으로 정렬후 Count으로 정렬후 Grade로 정렬</span>\n    <span class=\"token comment\">//    Info(name=A, count=9, grade=1.5)</span>\n    <span class=\"token comment\">//    Info(name=A, count=9, grade=3.5)</span>\n    <span class=\"token comment\">//    Info(name=A, count=11, grade=3.5)</span>\n    <span class=\"token comment\">//    Info(name=B, count=8, grade=2.5)</span>\n    <span class=\"token comment\">//    Info(name=C, count=5, grade=3.0)</span>\n    <span class=\"token comment\">//    Info(name=E, count=1, grade=4.0)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>정리</h1>\n<blockquote>\n<p>정렬의 기본값은 <strong>오름차순으로 정렬</strong> 이고 이는 <code class=\"language-text\">decending</code>을 통하여 <strong>내림차순으로 정렬</strong> 이 가능하다.</p>\n</blockquote>\n<ul>\n<li>\n<p>Immutable(데이터의 변경이 불가능)</p>\n<ul>\n<li>*ed()를 사용: <strong>정렬된 리스트를 생성하고 반환 한다.</strong></li>\n</ul>\n</li>\n<li>\n<p>Mutable(데이터의 변경이 가능)</p>\n<ul>\n<li>*()를 사용: <strong>현재 리스트를 정렬한다.</strong></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li><strong>기본정렬</strong> : sort(오름차순), reverse(역순), *Decending(내림차순)</li>\n<li><strong>sortBy, sortByDecending</strong> : 리스트 요소가 1개 이상일때 > 어떤 요소를 기준으로 정렬을 할지 결정할 수 있다.</li>\n<li>\n<p><strong>sortWith, sortWithDescending</strong> : 기준이 2개이상으로 정렬을 하려고자 할때 사용이 가능하다.</p>\n<ul>\n<li><code class=\"language-text\">compareBy</code>, <code class=\"language-text\">compareByDescending</code>: Comparator를 사용하여 정렬기준을 정한다.</li>\n<li><code class=\"language-text\">thenBy</code>, <code class=\"language-text\">thenByDecending</code>: compareBy에 이어서 정렬기준을 정할때 사용한다.</li>\n</ul>\n</li>\n</ul>\n</blockquote>","frontmatter":{"title":"코틀린 리스트 정렬하는 방법 (sort vs sortBy vs sortWith)","date":"May 10, 2022","update":"May 10, 2022","tags":["Kotlin","Sort"],"series":"Kotlin"},"fields":{"slug":"/sort/","readingTime":{"minutes":5.165}}},"seriesList":{"edges":[{"node":{"id":"0d63ee82-1c1d-54ac-a186-badae3a4589b","fields":{"slug":"/scope-function/"},"frontmatter":{"title":"코틀린의 Scope Function는 언제쓸까"}}},{"node":{"id":"6278f7b7-1d13-53b3-94f8-7f9cfd1520f4","fields":{"slug":"/sort/"},"frontmatter":{"title":"코틀린 리스트 정렬하는 방법 (sort vs sortBy vs sortWith)"}}},{"node":{"id":"9aac51e6-78e3-571a-9302-70ec8fdcea78","fields":{"slug":"/generic-in-out/"},"frontmatter":{"title":"Kotlin 제네릭의 in, out 키워드?"}}},{"node":{"id":"b75f4d39-6464-5957-92a6-2f2941248846","fields":{"slug":"/flow/"},"frontmatter":{"title":"Kotlin Coroutines Flow 맛보기"}}},{"node":{"id":"40ff7f0f-3ad6-58d6-a98f-b0a986fe1672","fields":{"slug":"/serialization/"},"frontmatter":{"title":"코틑린을 위한 Kotlinx Serizalization"}}},{"node":{"id":"ba5292eb-3683-52ad-81e1-453e0cd6dc42","fields":{"slug":"/ktor/"},"frontmatter":{"title":"KMP를 지원하는 Ktor Client를 사용해보자"}}}]},"previous":{"fields":{"slug":"/dfs-bfs/"},"frontmatter":{"title":"알고리즘 DFS/BFS 탐색 방법 알아보기"}},"next":{"fields":{"slug":"/dynamic-programming/"},"frontmatter":{"title":"알고리즘 Dynamic Programming(동적 프로그래밍) 살펴보기"}}},"pageContext":{"id":"6278f7b7-1d13-53b3-94f8-7f9cfd1520f4","series":"Kotlin","previousPostId":"f808b5c3-3d94-5f20-a7cc-a1441209d3e6","nextPostId":"aa2be475-c199-5487-bf60-b883bea887af"}},"staticQueryHashes":[],"slicesMap":{}}