{"componentChunkName":"component---src-templates-post-jsx","path":"/viewmodel/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","excerpt":"이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 에 대해서 알게된 내용을 정리하려고 한다.😀 ViewModel에 대해 ViewModel 클래스는 UI 관련 데이터만을 저장하고 관리하도록 설계되어 있어 View(Activity/Fragment)의 UI 컨트롤러의 과도한 책임을 분담하여 코드가 복잡해지고 거대해지는것 을 방지하고 화면 회전등을…","html":"<img src=\"https://user-images.githubusercontent.com/63226023/151594101-266890b7-079a-47c5-9daa-2afbc335ccb7.png\">\n<p>이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 <code class=\"language-text\">ViewModel</code>에 대해서 알게된 내용을 정리하려고 한다.😀</p>\n<hr>\n<h1>ViewModel에 대해</h1>\n<p><strong>ViewModel</strong> 클래스는 UI 관련 데이터만을 저장하고 관리하도록 설계되어 있어 <strong>View</strong>(Activity/Fragment)의 UI 컨트롤러의 과도한 책임을 분담하여 <strong>코드가 복잡해지고 거대해지는것</strong> 을 방지하고 화면 회전등을 하여도 <strong>데이터를 유지</strong> 하게 해준다.</p>\n<blockquote>\n<p>MVVM 패턴에서 말하던 ViewModel이 이런거구나~😀</p>\n</blockquote>\n<p>❗조심할 점은 일반적으로 MVVM 패턴에서 말하는 <strong>ViewModel</strong> 과 <strong>ACC-ViewModel</strong> 은 다르다!!</p>\n<p><a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel\">안드로이드 공식문서</a>에서도 ViewModel을 설명할때 MVVM 패턴에 대한 언급이 전혀 없다. 따라서 ViewModel과 구분하기 위하여 안드로이드에서는 <strong>ACC-ViewModel</strong> 이라고 많이 부른다. <strong>ACC-ViewModel</strong> 을 알아보기전에 둘의 차이점에 대해서 알아보자.</p>\n<h1>ViewModel vs ACC-ViewModel</h1>\n<p><strong><a href=\"https://ppeper.github.io/android/android-acc/\">MVVM 패턴</a>에서 ViewModel</strong> 을 보게되면 View로 부터 독립적이게 되어 View를 위한 데이터만을 가지고있도록 하는것으로 코드의 유지 보수를 좋게해준다는 장점이 있다. </p>\n<p><strong>ACC-ViewModel</strong> 은 안드로이드의 생명 주기를 고려하여 UI 관련 데이터를 저장하고 관리하도록 설계되었다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/151693012-5e82e66a-68f0-466c-bb06-6af052697228.png\" width=\"50%\">\n<p>위의 그림을 보면 ViewModel은 Activity가 최초 생성되고 파괴되기 전까지 생명 주기를 유지하여 데이터의 보존을 하는것을 알 수 있다.</p>\n<p>정리하면 <strong>MVVM 패턴에서의 ViewModel은 View에서 필요한 데이터를 바인딩과 데이터의 가공을 처리</strong> 하기 위한 것이고 <strong>안드로이드 ACC-ViewModel은 생명주기를 고려하여 데이터의 유연한 관리</strong> 라고 할 수 있을것 같다.</p>\n<p>두 ViewModel의 개념을 정리해보니 서로 다른 개념이라는 것을 볼 수 있다. 결론적으로 <strong>ACC-ViewModel</strong> 을 사용한다고 해서 MVVM 패턴이 되는것이 아니고 <strong>ACC-ViewModel</strong> 은 안드로이드 앱 개발시 __MVVM 패턴을 쉽게<del>(지않다..)</del> 개발할 때 도와주는 역할이다. </p>\n<blockquote>\n<p>📍정리: 안드로이드 개발 편의를 위한 이름만 ViewModel</p>\n</blockquote>\n<p>추후에 공부해볼 ACC 구성요소의 <code class=\"language-text\">LiveData</code>, <code class=\"language-text\">dataBinding</code>등 활용하여 MVVM 패턴에서 말하는 ViewModel로 써 ACC-ViewModel을 사용이 가능하다.</p>\n<h1>ACC-ViewModel 사용하기</h1>\n<p>ViewModel의 예시를 위해서 <code class=\"language-text\">activity_main.xml</code>을 다음과 같이 구상하자.<br>\n(각 Id는 <code class=\"language-text\">EditText(Number) -> dollarText</code>, <code class=\"language-text\">TextView -> resultText</code>, <code class=\"language-text\">button -> convertButton</code>)</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/151698396-82cbeecd-fd77-4eb4-bfbc-06198b2a9f61.png\" width=\"30%\">\n<p>ViewModel을 생성하여 환전을 하여 보여주는 함수를 만들어 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainViewModel<span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> usd_to_eu_rate <span class=\"token operator\">=</span> <span class=\"token number\">0.74f</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> dollarText <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0f</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dollarText <span class=\"token operator\">=</span> value\n        result <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> usd_to_eu_rate\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Float <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>데이터 변경을 관찰하기 위해서는 ViewModel의 참조를 얻어야한다. 이때 <strong>ViewModelProvider 클래스</strong> 를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> viewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>ViewModelProvider</strong> 인스턴스가 생성되면 <strong>get()</strong> 함수를 호출하여 위에서 만든 <code class=\"language-text\">MainViewModel</code> ViewModel 클래스를 인자로 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> viewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>MainViewModel<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></code></pre></div>\n<p>환전하여 보여줄 코드를 모두 작성한후 간단한 예시를 실행해 본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding<span class=\"token operator\">:</span> ActivityMainBinding\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token operator\">:</span> MainViewModel\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        binding <span class=\"token operator\">=</span> ActivityMainBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n        viewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>MainViewModel<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            convertButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dollarText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span>dollarText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"No Value\"</span></span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>화면의 회전을 하더라도 데이터가 유지되는것을 확인할 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/63226023/151699362-56c37016-7e8e-4de1-b21a-62ead07b4d31.png\" width=\"30%\"> <img src=\"https://user-images.githubusercontent.com/63226023/151699371-f4c84168-c820-4b22-aefe-951c7e2abd2d.png\" width=\"60%\"></p>\n<p>ViewModel의 간단한 예시에서는 생성자의 아무런 인자가 없다. 그래서 별도의 의존성에 대한 고민을 할 필요가 없이 <strong>ViewModelProvider</strong> 를 사용하여 <strong>ViewModel</strong> 을 생성하였다.</p>\n<p>실제로는 생성자에 아무런 매개변수를 쓰지않고 사용하는 경우가 거의 없을것이고, ViewModel에서 사용자에게 보여줄 UI에 표시할 데이터를 보여주기 위하여 여러 인스턴스가 있을것이다.<br>\n앞으로 차근차근 공부해가며 진정한 <strong>MVVM 패턴에 맞는 ViewModel</strong> 을 사용하기 위해 공부를 해야겠다.😁</p>\n<blockquote>\n<p>📍<a href=\"https://ppeper.github.io/android/android-livedata/\">안드로이드 Jetpack의 LiveData 적용하기</a></p>\n</blockquote>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel?hl=ko\">안드로이드 ViewModel 개요</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기","date":"January 30, 2022","update":"January 30, 2022","tags":["Android","ViewModel","ACC"],"series":"Android"},"fields":{"slug":"/viewmodel/","readingTime":{"minutes":5.67}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}},"next":{"fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},"pageContext":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","series":"Android","previousPostId":"4ae3792b-61e4-502c-997f-ea92464eb538","nextPostId":"08c0cd05-8fe6-5461-8c79-629efa4d3099"}},"staticQueryHashes":[],"slicesMap":{}}