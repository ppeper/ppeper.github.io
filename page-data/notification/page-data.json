{"componentChunkName":"component---src-templates-post-jsx","path":"/notification/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","excerpt":"안드로이드의 첫 개발을 진행하면서 채팅기능을 만들어 보면서 푸시알림의 기능을 넣지 못했던것이 많이 생각났다.(공모전에 대한 회고도 조만간 작성해야겠다😢) 따라서 이번 포스팅은 알림에 대해서 정리해 보려고 한다. 알림(Notification) 알림에는 로컬 알림과 원격 알림(푸시 알림)이 있다. 은 장치에서 실행 중인 앱에서 생성되며 은 원격 서버에서 생성…","html":"<img src='https://user-images.githubusercontent.com/63226023/151293802-06329eaf-2910-4f76-ba0b-03f171184691.png' width='90%'>\n<p>안드로이드의 첫 개발을 진행하면서 채팅기능을 만들어 보면서 푸시알림의 기능을 넣지 못했던것이 많이 생각났다.(공모전에 대한 회고도 조만간 작성해야겠다😢) 따라서 이번 포스팅은 알림에 대해서 정리해 보려고 한다.</p>\n<hr>\n<h1 id=\"알림Notification\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EB%A6%BCNotification\" aria-label=\"알림Notification permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>알림(Notification)</h1>\n<p>알림에는 <strong>로컬</strong> 알림과 <strong>원격</strong> 알림(푸시 알림)이 있다. <code class=\"language-text\">로컬 알림</code>은 장치에서 실행 중인 앱에서 생성되며 <code class=\"language-text\">원격 알림</code>은 원격 서버에서 생성되어 장치에 전송된다.<br>\n이번 알림은 안드로이드 앱에서 로컬 알림을 생성하는 방법과 기본적인 구조를 통하여 알림에 대해서 알아보려고 한다.<br>\n알림에 대한 예시코드는 기본적으로 버튼에 <code class=\"language-text\">sendNotification()</code> 함수를 onclick으로 설정하여 보여 줄 것이다. <a href=\"https://github.com/ppeper/Android_Arctic-Fox/tree/main/NotifyDemo\">(알림 예시코드)</a></p>\n<img src='https://user-images.githubusercontent.com/63226023/151316170-56467781-ab13-452d-8615-2f5230e7662c.png' width='20%'>\n<p>알림을 생성하기 위해선 크게 다음과 같이 생성한다.</p>\n<blockquote>\n<ol>\n<li>알림 채널 생성 &#x26; 등록(<strong>NotificationChannel</strong>)</li>\n<li>알림 콘텐츠 설정(<strong>NotificationCompat.Builder</strong>)</li>\n<li>알림 표시(<strong>NotificationManagerCompat.notify()</strong>)</li>\n<li>알림 탭 작업 설정(<strong>PendingIntent</strong>)</li>\n</ol>\n</blockquote>\n<h2 id=\"1-알림-채널-생성--등록\" style=\"position:relative;\"><a href=\"#1-%EC%95%8C%EB%A6%BC-%EC%B1%84%EB%84%90-%EC%83%9D%EC%84%B1--%EB%93%B1%EB%A1%9D\" aria-label=\"1 알림 채널 생성  등록 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1. 알림 채널 생성 &#x26; 등록</h2>\n<p>알림의 콘텐츠를 설정하기 위해 <strong>NotificationCompat.Builder</strong> 객체의 경우 <code class=\"language-text\">채널 ID</code>를 제공해야 한다. 따라서 알림의 콘텐츠를 생성하기 이전에 <code class=\"language-text\">알림 채널</code>을 만들어야 한다.</p>\n<blockquote>\n<p>❗Android 8.0(API 수준 26) 이상에서는 호환성을 유지하기 위해 필요하지만 이전 버전에서는 무시된다고 한다.</p>\n</blockquote>\n<p>알림 채널 설정을 통하여 <code class=\"language-text\">소리</code>, <code class=\"language-text\">진동</code>, <code class=\"language-text\">색상</code>등을 설정 할 수 있다. 기본적으로 알림 채널을 만들기 위해서는 다음과 같다.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">고유한 채널 ID</code>, <code class=\"language-text\">사용자가 볼 수 있는 이름</code>, <code class=\"language-text\">중요도</code> 를 사용하여 <strong>NotificationChannel</strong> 객체를 구성한다.</p>\n<blockquote>\n<p>NotificationChannel(String id, CharSequence name, int importance)</p>\n</blockquote>\n</li>\n<li>선택적으로 <code class=\"language-text\">setDescription()</code> 를 사용하여 시스템 설정에서 사용자에게 보여주는 설명을 지정할 수 있다.</li>\n<li>생성된 NotificationChannel 객체를 <strong>createNotificationChannel()</strong> 함수에 전달하여 등록한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span>\n        id<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">:</span> String\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> importance <span class=\"token operator\">=</span> NotificationManager<span class=\"token punctuation\">.</span>IMPORTANCE_LOW\n        <span class=\"token keyword\">val</span> channel <span class=\"token operator\">=</span> <span class=\"token function\">NotificationChannel</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> importance<span class=\"token punctuation\">)</span>\n\n        channel<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> description\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">enableLights</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        channel<span class=\"token punctuation\">.</span>lightColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>RED\n        channel<span class=\"token punctuation\">.</span><span class=\"token function\">enableVibration</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        channel<span class=\"token punctuation\">.</span>vibrationPattern <span class=\"token operator\">=</span>\n            <span class=\"token function\">longArrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        notificationManager<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>NotificationChannel 매개변수로 들어가는 중요도는 NotificationManager를 통하여 사용하여 가져올 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> notificationManager<span class=\"token operator\">:</span> NotificationManager<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n notificationManager <span class=\"token operator\">=</span>\n            <span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span>\n                Context<span class=\"token punctuation\">.</span>NOTIFICATION_SERVICE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> NotificationManager\n\n<span class=\"token comment\">// 체널 등록</span>\n<span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string-literal singleline\"><span class=\"token string\">\"com.kyonggi.notifydemo.news\"</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-literal singleline\"><span class=\"token string\">\"NotifyDemo News\"</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-literal singleline\"><span class=\"token string\">\"Example News Channel\"</span></span>\n        <span class=\"token punctuation\">)</span></code></pre></div>\n<p>중요도 설정은 채널에 있는 모든 알림의 중단 수준에 영향을 미치게 되고 <code class=\"language-text\">NotificationChannel</code> 생성자에서 지정해야 한다.</p>\n<img src='https://user-images.githubusercontent.com/63226023/151309445-b36b29ea-6043-428a-8352-84c64b586c97.png'>\n<p>앱을 실행하여 설정을 가보면 \"NotifyDemo News\"로 설정한 이름의 채널을 볼 수 있다.</p>\n<img src='https://user-images.githubusercontent.com/63226023/151308576-9677ec3a-1eac-4dc5-b6ff-8049496e7414.png' width='30%'>\n<p>앱에서 알림 채널을 삭제를 하려면 <code class=\"language-text\">NotificationManager</code>의 deleteNotificationChannel() 함수를 호출하면 된다. 매개변수는 삭제할 채널의 id를 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> channelID <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"com.kyonggi.notifydemo.news\"</span></span>\nnotificationManager<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteNotificationChannel</span><span class=\"token punctuation\">(</span>channelID<span class=\"token punctuation\">)</span></code></pre></div>\n<p>중요도 설정은 채널에 있는 모든 알림의 중단 수준에 영향을 미치게 되고 <code class=\"language-text\">NotificationChannel</code> 생성자에서 지정해야 한다.</p>\n<img src='https://user-images.githubusercontent.com/63226023/151309445-b36b29ea-6043-428a-8352-84c64b586c97.png'>\n<h2 id=\"2-알림-콘텐츠-설정\" style=\"position:relative;\"><a href=\"#2-%EC%95%8C%EB%A6%BC-%EC%BD%98%ED%85%90%EC%B8%A0-%EC%84%A4%EC%A0%95\" aria-label=\"2 알림 콘텐츠 설정 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>2. 알림 콘텐츠 설정</h2>\n<blockquote>\n<p>안드로이드 developer 페이지에서 기본적인 알림에 대한 템플릿을 보여준다😎 </p>\n</blockquote>\n<img src='https://user-images.githubusercontent.com/63226023/151313708-87094c32-59e6-4b10-aebb-775de27ee731.png'>\n<p>알림의 콘텐츠를 설정하기 위해서는 <strong>NotificationCompat.Builder</strong> 객체를 사용하여 알림을 생성해야한다.</p>\n<ul>\n<li><code class=\"language-text\">setSmallIcon()</code> : 알림 설정시 유일한 필수 콘텐츠.</li>\n<li><code class=\"language-text\">setContentTitle()</code> : 알림의 제목</li>\n<li>\n<p><code class=\"language-text\">setContentText()</code> : 알림의 본문 내용.</p>\n<ul>\n<li><code class=\"language-text\">setPriority()</code> : 알림의 우선순위. 우선순위에 따라 Android 7.1 이하에서 알림이 얼마나 강제적인지 결정된다.</li>\n</ul>\n<blockquote>\n<p>❗Android 8.0 이상의 경우 알림 채널의 생성(NotificationChannel)에서 중요도를 대신 설정해야 한다.</p>\n</blockquote>\n</li>\n<li><code class=\"language-text\">setNumber()</code> : 앱 아이콘을 길게 누르면 나오는 팝업에서 두 개 이상의 알림이 대기 중일 때 알림 개수를 보여준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"> <span class=\"token keyword\">val</span> channelID <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"com.kyonggi.notifydemo.news\"</span></span>\n\n <span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n            channelID\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setContentTitle</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Example Notification\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setContentText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"This is an example notification.\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setSmallIcon</span><span class=\"token punctuation\">(</span>android<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_dialog_info<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setChannelId</span><span class=\"token punctuation\">(</span>channelID<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에서 설정한 channelID를 setChannelId()로 등록을 하면 기본적인 알림의 생성이 완료된다.</p>\n<h2 id=\"3-알림-표시\" style=\"position:relative;\"><a href=\"#3-%EC%95%8C%EB%A6%BC-%ED%91%9C%EC%8B%9C\" aria-label=\"3 알림 표시 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>3. 알림 표시</h2>\n<p>알림을 표시하기 위해서는 <code class=\"language-text\">NotificationManagerCompat.notify()</code>를 호출해야 한다.<br>\nnotify() 함수는 매개변수로 <code class=\"language-text\">알림 ID</code>와 <code class=\"language-text\">NotificationCompat.Builder</code>에 대한 <code class=\"language-text\">.build()</code>를 전달해야 한다.<br>\n(예시에선 변수 notification)</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">val</span> notificationID <span class=\"token operator\">=</span> <span class=\"token number\">101</span>\n\n <span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n            channelID\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n         <span class=\"token punctuation\">.</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nnotificationManager<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>notificationID<span class=\"token punctuation\">,</span> notification<span class=\"token punctuation\">)</span></code></pre></div>\n<p>앱을 실행하여 버튼을 클릭하면 기본 알림이 오는것을 볼 수 있다.</p>\n<img src='https://user-images.githubusercontent.com/63226023/151315879-8a3a7949-df18-4d86-b8e2-824d128ae4eb.png' width='30%'>\n<h2 id=\"4-알림-탭-작업-설정\" style=\"position:relative;\"><a href=\"#4-%EC%95%8C%EB%A6%BC-%ED%83%AD-%EC%9E%91%EC%97%85-%EC%84%A4%EC%A0%95\" aria-label=\"4 알림 탭 작업 설정 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>4. 알림 탭 작업 설정</h2>\n<p>위에서 알림을 만들었지만 클릭을 하더라도 어떤 형태의 액션도 수행할 수 없다. 대부분 알림을 처리하는 앱은 해당 앱의 액티비티를 시작시킨다. 이러한 작업을 추가하기 위해서는 해당 액티비티를 시작시키는 인텐트를 구성해야한다.</p>\n<p>실행해야하는 액티비티가 ResultActivity로 지정하여 Intent를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> resultIntent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ResultActivity<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이후 이 인텐트를 <code class=\"language-text\">PendingIntent</code> 인스턴스에 포함해야 한다.<a href=\"https://ppeper.github.io/android/pendingIntent/\">(PendingIntent 개념)</a> PendingIntent 객체는 다른 앱에 인텐트를 전달할 수 있게 하며, 전달받은 앱은 향후에 인텐트를 수행할 수 있게 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> pendingIntent <span class=\"token operator\">=</span> PendingIntent<span class=\"token punctuation\">.</span><span class=\"token function\">getActivity</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> resultIntent<span class=\"token punctuation\">,</span> PendingIntent<span class=\"token punctuation\">.</span>FLAG_UPDATE_CURRENT\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에서 설정한 notification 변수에 <code class=\"language-text\">setContentIntent()</code>를 호출하여 PendingIntent 객체를 지정하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n            channelID\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n         <span class=\"token punctuation\">.</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">setContentIntent</span><span class=\"token punctuation\">(</span>pendingIntent<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>이제 상단바에서 알림을 클릭하면 ResultActivity로 가는것을 볼 수 있다👌</p>\n</blockquote>\n<h3 id=\"알림에-액션-추가하기\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EB%A6%BC%EC%97%90-%EC%95%A1%EC%85%98-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"알림에 액션 추가하기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>알림에 액션 추가하기</h3>\n<p>알림에서 액션을 추가하면 또 다른 방법으로 액티비티를 시작시킬 수 있다. 액션은 생성된 알림 메시지의 밑에 <code class=\"language-text\">버튼</code>으로 나타나며, 사용자가 탭을 하여 특정 인텐트를 시작할 수 있다.</p>\n<p>알림 액션은 <strong>NotificationCompat.Action.Builder</strong> 를 통해 action을 생성 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"> <span class=\"token keyword\">val</span> action<span class=\"token operator\">:</span> NotificationCompat<span class=\"token punctuation\">.</span>Action <span class=\"token operator\">=</span>\n            NotificationCompat<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>android<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_dialog_info<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Open\"</span></span><span class=\"token punctuation\">,</span> pendingIntent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>생성된 action을 notification에서 <code class=\"language-text\">addAction()</code>을 통하여 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n            channelID\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n         <span class=\"token punctuation\">.</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">setContentIntent</span><span class=\"token punctuation\">(</span>pendingIntent<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addAction</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>또 다른 방법은 <strong>addAction(int icon, CharSequence title, PendingIntent intent)</strong> 로 설정하는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n            channelID\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n         <span class=\"token punctuation\">.</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">setContentIntent</span><span class=\"token punctuation\">(</span>pendingIntent<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addAction</span><span class=\"token punctuation\">(</span>android<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_dialog_info<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Open\"</span></span><span class=\"token punctuation\">,</span> pendingIntent<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>앱을 실행하여 알림창을 보면 설정한 <code class=\"language-text\">Open</code> 액션이 나타나게 된다.</p>\n<img src='https://user-images.githubusercontent.com/63226023/151322843-071287c7-50e7-49c8-9419-bcdd3271a374.png' width='30%'>\n<h1 id=\"알림-메시지-묶기\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EB%A6%BC-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%AC%B6%EA%B8%B0\" aria-label=\"알림 메시지 묶기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>알림 메시지 묶기</h1>\n<p>Android 7.0(API 수준 24)부터는 관련된 알림을 그룹으로 표시할 수 있다. 알림을 묶으려면 각 알림을 <strong>같은 그룹</strong> 에 속하도록 지정해 한다. 알급 그룹을 위해 <strong>고유 식별자</strong> 를 생성하여 <code class=\"language-text\">setGroup()</code>으로 호출하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> GROUP_KEY_NOTIFY <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"group_key_notify\"</span></span>\n\n<span class=\"token keyword\">var</span> builder <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> channelID<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">setGroup</span><span class=\"token punctuation\">(</span>GROUP_KEY_NOTIFY<span class=\"token punctuation\">)</span></code></pre></div>\n<p>또한 그룹 요약을 설정하기 위해서는 <code class=\"language-text\">setGroupSummary(true)</code>를 호출해야 한다. (예시코드의 주석처리 해제후 sendNotification() 함수 내부의 제일 끝으로 볼 수 있다)</p>\n<hr>\n<h1 id=\"알림-직접-응답\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EB%A6%BC-%EC%A7%81%EC%A0%91-%EC%9D%91%EB%8B%B5\" aria-label=\"알림 직접 응답 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>알림 직접 응답</h1>\n<p>Android 7.0(API 수준 24)에서 도입된 직접 응답 기능을 사용하면 알림에서 사용자가 텍스트를 입력하여 알림 관련 앱에 전달할 수 있다.<br>\n예시는 기본적인 알림에서와 동일하지만 <code class=\"language-text\">직접 응답</code>은 사용자의 입력이 textView를 통하여 보여주는점이 다르다. <a href=\"https://github.com/ppeper/Android_Arctic-Fox/tree/main/DirectReply\">(직접 응답 알림 예시코드)</a></p>\n<img src='https://user-images.githubusercontent.com/63226023/151329014-e1d0b614-194a-4f66-ad8b-d70c81eadf96.png' width='20%'>\n<h2 id=\"RemoteInput-객체-생성\" style=\"position:relative;\"><a href=\"#RemoteInput-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"RemoteInput 객체 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>RemoteInput 객체 생성</h2>\n<img src='https://user-images.githubusercontent.com/63226023/151330082-32633069-2932-4ccf-85d5-2e7aaf07f1de.png'>\n<p>알림에서 직접 응답 텍스트 입력을 가능하게 해주기 위해서는 <strong>RemoteInput</strong> 객체를 생성해야 한다. <strong>RemoteInput</strong> 객체 또한 기본 알림과 같이 <code class=\"language-text\">인텐트</code>와 <code class=\"language-text\">사용자가 입력한 텍스트</code>를 PendingIntent가 포함될 수 있게 해준다.</p>\n<p><strong>RemoteInput.Builder()</strong> 함수를 사용하여 RemoteInput 객체를 생성하게 되고 여기서 필요한 것이 두가지이다.</p>\n<blockquote>\n<ol>\n<li>인텐트의 <code class=\"language-text\">사용자의 입력</code>을 추출하기 위한 <strong>키 문자열</strong></li>\n<li>알림의 <code class=\"language-text\">텍스트 입력 필드</code>에 나타낼 <strong>라벨 문자열</strong></li>\n</ol>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> KEY_TEXT_REPLY <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"key_text_reply\"</span></span>\n\n <span class=\"token keyword\">fun</span> <span class=\"token function\">sendNotification</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> View<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> replyLabel <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Enter your reply here\"</span></span>\n        <span class=\"token keyword\">val</span> remoteInput <span class=\"token operator\">=</span> RemoteInput<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>KEY_TEXT_REPLY<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setLabel</span><span class=\"token punctuation\">(</span>replyLabel<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 기본 알림과 마찬가지로 생성된 RemoteInput 객체를 <code class=\"language-text\">알림 액션</code>객체에 포함시켜야 한다.<br>\n그 전에 PendingIntent 객체를 생성하여 사용자가 응답한 입력을 추출할 수 있게 생성해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> resultIntent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> MainActivity<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">val</span> resultPendingIntent <span class=\"token operator\">=</span> PendingIntent<span class=\"token punctuation\">.</span><span class=\"token function\">getActivity</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> resultIntent<span class=\"token punctuation\">,</span> PendingIntent<span class=\"token punctuation\">.</span>FLAG_UPDATE_CURRENT\n        <span class=\"token punctuation\">)</span></code></pre></div>\n<p>이후 알림 액션에 <code class=\"language-text\">addRemoteInput()</code>을 호출하여 생성한 <strong>RemoteInput</strong> 객체를 연결해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> icon <span class=\"token operator\">=</span> Icon<span class=\"token punctuation\">.</span><span class=\"token function\">createWithResource</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n    android<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_dialog_info\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> replyAction <span class=\"token operator\">=</span> Notification<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>\n    icon<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Reply\"</span></span><span class=\"token punctuation\">,</span> resultPendingIntent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addRemoteInput</span><span class=\"token punctuation\">(</span>remoteInput<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>끝으로 생성된 <code class=\"language-text\">알림</code>을 적용하고 표시한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> newMessageNotification <span class=\"token operator\">=</span> Notification<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> channelID<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>ContextCompat<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n        R<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>design_default_color_primary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setSmallIcon</span><span class=\"token punctuation\">(</span>android<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_dialog_info<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setContentTitle</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"My Notification\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setContentText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"This is a test Message\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">addAction</span><span class=\"token punctuation\">(</span>replyAction<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> notificationManager <span class=\"token operator\">=</span> <span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span>\n    Context<span class=\"token punctuation\">.</span>NOTIFICATION_SERVICE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> NotificationManage\nnotificationManager<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>\n    notificationId<span class=\"token punctuation\">,</span>\n    newMessageNotification\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>앱을 실행해 보면 생성된 <code class=\"language-text\">직접 응답 알림</code>을 확인해 볼 수 있다.</p>\n<p><img src='https://user-images.githubusercontent.com/63226023/151334603-3688781f-8352-4035-9816-a85b98c31f98.png' width='30%'> <img src='https://user-images.githubusercontent.com/63226023/151334622-e927ef45-28b6-4c2c-a283-77dd70ec5b91.png' width='32%'></p>\n<h2 id=\"직접-응답-입력-데이터-수신하기\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91-%EC%9D%91%EB%8B%B5-%EC%9E%85%EB%A0%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%88%98%EC%8B%A0%ED%95%98%EA%B8%B0\" aria-label=\"직접 응답 입력 데이터 수신하기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>직접 응답 입력 데이터 수신하기</h2>\n<p>사용자가 알림의 직접 입력을 하였으므로 앱에서 입력 데이터를 받아와야 할 것이다. 앞서 말했던 textView를 통하여 입력데이터의 수신을 확인해 본다.</p>\n<p>사용자의 입력 데이터를 가져오기 위해서는 위에서 생성한 <strong>RemoteInput.getResultsFromIntent()</strong> 를 통하여 Bundle 객체를 반환하여 가져온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"> <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">handleIntent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intent\n        <span class=\"token keyword\">val</span> remoteInput <span class=\"token operator\">=</span> RemoteInput<span class=\"token punctuation\">.</span><span class=\"token function\">getResultsFromIntent</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remoteInput <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> inputString <span class=\"token operator\">=</span> remoteInput<span class=\"token punctuation\">.</span><span class=\"token function\">getCharSequence</span><span class=\"token punctuation\">(</span>\n                KEY_TEXT_REPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            binding<span class=\"token punctuation\">.</span>textView<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> inputString\n        <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 전에 RemoteInput 객체 생성시 사용한 Key값<code class=\"language-text\">(KEY_TEXT_REPLY)</code>으로 Bundle 값을 가져온다.</p>\n<p>알림에서 응답 텍스트를 입력하고 전송하게되면 전송된 응답 텍스트의 액티비티 수신 확인을 기다리는 것을 나타낸다. 알림 전송시 사용한 동일한 ID로 알림을 업데이트 하여 사용자에게 <code class=\"language-text\">답장이 올바르게 수신되고 처리</code>되었음을 확인하기 위해 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">handleIntent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">val</span> repliedNotification <span class=\"token operator\">=</span> Notification<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> channelID<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setSmallIcon</span><span class=\"token punctuation\">(</span>android<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_dialog_info<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setContentText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Reply received\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        notificationManager<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>notificationId<span class=\"token punctuation\">,</span> repliedNotification<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>앱을 실행하여 메시지를 보내게 되면 생성한 <code class=\"language-text\">repliedNotification</code>으로 알림이 바뀌는것을 볼 수 있다.<br>\n-> (텍스트 \"Hello\"로 직접응답 메시지 전송)</p>\n<p><img src='https://user-images.githubusercontent.com/63226023/151365468-0f00e889-943f-4b47-8072-c1eb231d4480.png' width='30%'> <img src='https://user-images.githubusercontent.com/63226023/151365476-72cf2f63-e0a2-476d-900e-121ecfad7251.png'></p>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/training/notify-user/build-notification?hl=ko\">Android developer 알림 개요</a></li>\n</ul>","frontmatter":{"title":"안드로이드 알림(Notification) 만들기","date":"January 27, 2022","update":"January 27, 2022","tags":["Android","Notification"],"series":"Android"},"fields":{"slug":"/notification/","readingTime":{"minutes":13.32}}},"seriesList":{"edges":[{"node":{"id":"8da53698-7fbf-50de-b57d-674258641696","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"32630555-7ffc-5c77-8e93-41b9441313c7","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"02cd12ae-6f40-58aa-be67-edbe6836235b","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"351d6f88-b8e1-5a92-8ab2-5a18f816e5f2","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"584879b5-e89c-570d-9728-e24e7543a406","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"e77807c0-3767-530f-a643-b3c28eead54b","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"7b7ee01b-c911-5343-9957-c4ef27024778","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"df99c5d4-e349-5463-9a5f-c65c2c714a98","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"c1750e54-c129-5248-b9a4-dc6ead87c256","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"ba69adf2-5458-521e-b6eb-85bbad0e6385","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"cc73ab05-b427-563d-82a2-220a8c3fedb6","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"832ca7b8-20af-5b55-9b16-2610187c24ae","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"379be128-999b-5d4c-b690-3f2552a189f3","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"f004c3a4-f9d8-509d-ab8f-7ae273cc1f6f","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"03b60894-ee1f-5d06-94b7-a41567772d61","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"7a30a0fa-f5f4-5b2a-9e51-03568d97de6d","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"793dad13-2ba5-5df0-957c-4763d3df25a2","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"e7e7c2d3-ace1-53dc-bd3b-ee4e96ad9b6c","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"fcc174d6-e820-5bfb-8407-5db69e9cff26","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"9ca4a2fd-2662-5c91-99af-5ddf44fc5fd4","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"2af94fb4-d2f5-5af1-9f2a-cd678174506d","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"4135a47f-c10c-5535-8b71-3add3f62dd6c","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"3f56723e-63f6-5dd9-b2e2-fe403e99c18b","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"e8c7ca90-23b4-5683-a655-90460391cf01","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"b600df71-260c-567f-8ccf-592f16304768","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"52277946-9258-55cd-9361-7b6cd2c26cf6","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"26ead8cc-53e7-5fca-8930-d6762ae10124","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"abbe933c-9872-5d48-8ef7-04d14e785ccc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f2966618-c744-5fb8-b785-3650ebae1072","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"bbef1829-8d9e-589f-b1c8-22945fc1bd11","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"75dc9cf5-f813-58b3-b426-c9125325ea76","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"1eaf8bbe-518b-5a56-bd4d-230253d4a1db","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"bae61635-412c-5e43-8a7b-1eafe2722928","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"28df186b-d648-5562-a726-a8c7350b5a01","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"eb0bbfb7-fa8e-53da-b0ad-3b250756090e","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}}]},"previous":{"fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}},"next":{"fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},"pageContext":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","series":"Android","previousPostId":"c1750e54-c129-5248-b9a4-dc6ead87c256","nextPostId":"ba69adf2-5458-521e-b6eb-85bbad0e6385"}},"staticQueryHashes":[],"slicesMap":{}}