{"componentChunkName":"component---src-templates-post-jsx","path":"/android-fragment/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","excerpt":"안드로이드에서 UI 화면을 태블릿과 같은 큰 화면에서 역동적이고 유연한 디자인을 하기 위하여 Fragment가 나오게 되었다. Fragment는 Activity와 마찬가지로 자체적인 생명주기를 가지지만 Activity의 생명주기에 영향을 받기 때문에 좀 더 신경쓰고 조심해야 하는 부분들이 많다. 처음 적용하고 공부하였을 때 신경쓰지 못하였던 Fragmen…","html":"<p>안드로이드에서 UI 화면을 태블릿과 같은 큰 화면에서 역동적이고 유연한 디자인을 하기 위하여 Fragment가 나오게 되었다.</p>\n<p>Fragment는 Activity와 마찬가지로 자체적인 생명주기를 가지지만 Activity의 생명주기에 영향을 받기 때문에 좀 더 신경쓰고 조심해야 하는 부분들이 많다. 처음 적용하고 공부하였을 때 신경쓰지 못하였던 Fragment의 내용을 보려고 한다. </p>\n<hr>\n<h1 id=\"Fragment-LifeCycle\" style=\"position:relative;\"><a href=\"#Fragment-LifeCycle\" aria-label=\"Fragment LifeCycle permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Fragment LifeCycle</h1>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/231318855-b5603bfb-265c-4f08-bd2d-5eb5c868cc54.png' width='50%'></p>\n<p>Fragment는 Activity와 다르게 View와 Fragment간의 LifeCycle이 다르다.</p>\n<h4>onAttach()</h4>\n<ul>\n<li>Fragment가 Activity에 붙을(Attach) 때 호출된다.</li>\n<li>아직 Fragment가 완벽하게 생성된 단계는 아니다.</li>\n</ul>\n<h4>onCreate()</h4>\n<ul>\n<li>본격적으로 Fragment가 Activity의 호출을 받아 생성되는 단계</li>\n<li>Fragment를 생성하면서 넘겨준 값들이 있다면, 이 단계에서 값을 꺼내 세팅한ㄷ.</li>\n<li>UI 초기화는 진행할 수 없다.</li>\n</ul>\n<h4>onCreateView()</h4>\n<ul>\n<li>Layout을 inflate하는 단계. 뷰바인딩을 진행한다.</li>\n<li>View가 초기화되는 중이기 때문에, UI 초기화 작업을 진행하면 충돌이 일어날 수 있다.</li>\n</ul>\n<h4>onViewCreate()</h4>\n<ul>\n<li>UI 초기화 진행</li>\n<li>onViewCreated()는 View 생성이 완료되었을 때 호출되는 메서드</li>\n</ul>\n<h4>onStart()</h4>\n<ul>\n<li>Fragment가 사용자에게 보여 지기 직전에 호출되는 단계</li>\n<li>해당 메서드가 호출되었을 때, Activity는 started 상태</li>\n</ul>\n<h4>onResume()</h4>\n<ul>\n<li>사용자와의 상호작용을 시작하는 단계</li>\n<li>특정 이벤트가 발생하여 포커스가 떠날 때까지 onResume 단계에 머무름</li>\n<li>프로그램이 일시정지되면 onPause()가 호출되고, 다시 재개되면 onResume()을 다시 호출함</li>\n<li>Resume 상태로 전환될 때마다 진행해야 되는 초기화 작업들을 세팅</li>\n</ul>\n<h4>onPause()</h4>\n<ul>\n<li>사용자가 Fragment를 떠나면 가장 먼저 onPause()를 호출</li>\n<li>Fragment가 사용자와의 상호작용을 중지하는 단계</li>\n<li>사용자가 해당 Fragment로 돌아오지 않을 수도 있으므로, 지속되어야 하는 변경사항을 onPause에서 저장</li>\n</ul>\n<h4>onStop()</h4>\n<ul>\n<li>다른 Activity가 화면을 완전히 가리거나, 화면이 더이상 보여지지 않게 되는 상황에서 호출된다.</li>\n<li>화면이 보이지 않을 때 실행할 필요가 없는 기능들을 정지시켜 줄 수 있다.</li>\n</ul>\n<h4>onDestroyView()</h4>\n<ul>\n<li>Fragment와 연결된 View Layer가 제거되는 중일 때 호출되는 단계</li>\n</ul>\n<h4>onDestroy()</h4>\n<ul>\n<li>Fragment가 제거되기 직전 단게</li>\n<li>Fragment가 생성될 때 onCreate → onCreateView 순으로 호출된 것과 달리, 파괴는 onDestroyView에서 View를 제거한 후 onDestroy가 호출된다.</li>\n</ul>\n<h2 id=\"getViewLifecycleOwner-vs-getLifecycleOwner\" style=\"position:relative;\"><a href=\"#getViewLifecycleOwner-vs-getLifecycleOwner\" aria-label=\"getViewLifecycleOwner vs getLifecycleOwner permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>getViewLifecycleOwner() vs getLifecycleOwner()</h2>\n<h4>LifecycleOwner</h4>\nLifecycleOwner는 __Fragment의 생명주기__ 를 가지고 있는 클래스로 `onAttach()` ~ `onDestroy()`와 연결되어 있다.\n<h4>viewLifecycleOwner</h4>\nviewLifecycleOwner는 __Fragment View의 생명주기__ 를 가지고 있는 클래스로 `onCreateView()` ~ `onDestroyView()` 와 연결되어 있다.\n<blockquote>\n<p>📍viewLifecycle은 Fragment LifeCycle 보다 생명주기가 짧다!</p>\n</blockquote>\n<p>이러한 서로 다른 생명주기에 따라 대표적으로 liveData를 사용할때 매개변수로 <code class=\"language-text\">this</code>로 넘겨주었다면 <strong>경우에 따라 Fragment가 Destroy 되지 않았지만 새로운 observer가 등록되는 경우</strong> 생길 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// onAttach() ~ onDestroy()</span>\nliveData<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">-></span> \n  <span class=\"token comment\">// this(fragment) -> Destroy 되지 않았을 때 다시 불릴 가능성</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// onCreateView() ~ onDestroyView()</span>\nliveData<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>viewLifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">-></span> \n  <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>구글에서 기본으로 제공하는 Fragment 클래스에서도 View와 Fragment의 생명주기가 달라 메모리 누수가 발생할 수 있기 때문에 이에 코드를 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">  <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> _binding<span class=\"token operator\">:</span> ResultProfileBinding<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token comment\">// This property is only valid between onCreateView and</span>\n  <span class=\"token comment\">// onDestroyView.</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _binding<span class=\"token operator\">!!</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateView</span><span class=\"token punctuation\">(</span>\n      inflater<span class=\"token operator\">:</span> LayoutInflater<span class=\"token punctuation\">,</span>\n      container<span class=\"token operator\">:</span> ViewGroup<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n      savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> View<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n      _binding <span class=\"token operator\">=</span> ResultProfileBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>inflater<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">val</span> view <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>root\n      <span class=\"token keyword\">return</span> view\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroyView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroyView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      _binding <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Fragment는 제거되지 않았지만 <code class=\"language-text\">onCreateView()</code>는 다시 사용할 수 있기 때문에 명시적으로 <code class=\"language-text\">onDestroyView()</code>에서 binding에 할당을 취소해 가비지 컬렉션이 되도록 해야한다. </p>\n<hr>\n<h1 id=\"FragmentManager\" style=\"position:relative;\"><a href=\"#FragmentManager\" aria-label=\"FragmentManager permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>FragmentManager</h1>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/231444667-211d675f-5ce3-4b11-8b55-f745849df216.png' width='70%'></p>\n<ul>\n<li>FragmentManager 속성은 호출된 Fragment 계층 구조에서 어디에 있는지에 따라 어떤 FragmentManager에 액세스하는지 다르다.</li>\n<li>FragmentManager는 Activity와 Fragment의 중간에서 서로를 이어주는 역할을 하여 Fragment Transaction 수행해 준다.</li>\n<li>FragmentManager은 백 스택(Back Stack) 에 Fragment 추가/교체/삭제 작업에 의한 변경 사항을 push 및 pop 하는 작업을 담당한다.</li>\n</ul>\n<blockquote>\n<ul>\n<li>\n<p><code class=\"language-text\">findFragmentById()</code> : Fragment 컨테이너 내의 현재 Fragment 참조</p>\n<ul>\n<li>UI를 제공하는 Fragment를 참조할 때 사용</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> fragment <span class=\"token operator\">=</span> supportFragmentManager<span class=\"token punctuation\">.</span><span class=\"token function\">findFragmentById</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>fragmentContainer<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<ul>\n<li><code class=\"language-text\">findFragmentByTag()</code> : Fragment에 고유한 태그를 부여한 후 태그를 이용해 Fragment 참조</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> fragment <span class=\"token operator\">=</span> supportFragmentManager<span class=\"token punctuation\">.</span><span class=\"token function\">findFragmentByTag</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"my_fragment\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h1 id=\"Fragment-Transaction\" style=\"position:relative;\"><a href=\"#Fragment-Transaction\" aria-label=\"Fragment Transaction permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Fragment Transaction</h1>\n<p>Fragment Transaction의 인스턴스는 FragmentManager의 beginTransaction() 메서드를 통해 얻을 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> manager <span class=\"token operator\">=</span> supportFragmentManager<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Android Jetpack Fragment 라이브러리에서 제공하는 클래스로 Transaction 클래스는 Fragment 추가/교체/삭제 작업을 제공한다.</p>\n<ul>\n<li>Fragment Transaction은 FragmentManager의 단일 수행 단위</li>\n<li>하나의 Fragment Transaction 단위 내에 Fragment Transaction 클래스가 제공하는 Fragment 추가/교체/삭제 작업 등을 명시하면 된다.</li>\n<li>하나의 Fragment Transaction 단위 내에 작성된 Fragment 조작 관련 작업들은 해당 Fragment Transaction 수행될 때 모두 실행된다.</li>\n</ul>\n<h2 id=\"Transaction-메소드\" style=\"position:relative;\"><a href=\"#Transaction-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"Transaction 메소드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Transaction 메소드</h2>\n<p>Fragment의 Transaction 메소드들은 <code class=\"language-text\">add()</code>, <code class=\"language-text\">replace()</code>, <code class=\"language-text\">commit()</code>, <code class=\"language-text\">commitAllowingStateloss()</code>, <code class=\"language-text\">remove()</code>, <code class=\"language-text\">addToBackStack()</code> 등이 있다.</p>\n<blockquote>\n<p><strong>add()</strong></p>\n<ul>\n<li>기존에 있던 Fragment를 지우는 것이 아니라 그 위에 다시 추가한다.</li>\n</ul>\n<p><strong>replace()</strong></p>\n<ul>\n<li>기본에 있던 Fragment를 제거한 후 새로운 Fragment를 추가한다.</li>\n</ul>\n<p><strong>remove()</strong></p>\n<ul>\n<li>기존에 있던 Fragment를 삭제한다.  </li>\n<li>fragment를 찾기 위해 <code class=\"language-text\">findFragmentById()</code>, <code class=\"language-text\">findFragmentByTag()</code> 메서드로 제거할 fragment를 찾는다</li>\n</ul>\n<p><strong>commit()</strong></p>\n<ul>\n<li>FragmentTransaction을 생성하고 Fragment의 추가/교체/삭제 작업을 명시한 후 <strong>반드시 마지막에 commit</strong> 을 해줘야 한다.</li>\n</ul>\n<p><strong>addToBackStack()</strong></p>\n<ul>\n<li>해당 메소드를 해준 후 commit()을 하게 되면 하기 전까지의 모든 변경 내용이 하나의 Transaction으로 backStack에 들어간다.</li>\n</ul>\n</blockquote>\n<h2 id=\"-commit-vs-commitNow\" style=\"position:relative;\"><a href=\"#-commit-vs-commitNow\" aria-label=\" commit vs commitNow permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>📌 commit() vs commitNow()</h2>\n<p>commit()에는 <code class=\"language-text\">Now</code> 가 붙은 메소드들이 있다. commit() 메서드는 <strong>비동기로 처리되는 함수</strong> 이기 때문에 commit 함수 호출 시점에 바로 Transaction이 즉시 수행되는 것이 아니라 Main Thread에 예약된다.</p>\n<p>반면에 commitNow() 메서드는 호출 시점에 즉시 해당 Fragment Transaction이 <strong>동기적으로 수행</strong> 된다.</p>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/231384985-1a4605eb-ce73-454a-8a91-f1069211ce45.png' width='50%'></p>\n<blockquote>\n<p>commitNow()는 동기적으로 실행하기 때문에 <code class=\"language-text\">addToBackStack()</code> 를 통하여 백스택에 Transaction을 추가하려는 경우 프레임워크는 명령에 대한 보증을 할 수 없기 때문에 사용할 수 없다.</p>\n</blockquote>\n<h2 id=\"-commit-vs-commitAllowingStateLoss\" style=\"position:relative;\"><a href=\"#-commit-vs-commitAllowingStateLoss\" aria-label=\" commit vs commitAllowingStateLoss permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>📌 commit() vs commitAllowingStateLoss()</h2>\n<p>Fragment를 사용을 해보았다면 <code class=\"language-text\">onSaveInstanceState()</code> 이후 commit()을 수행할 수 없다는 <code class=\"language-text\">IllegalStateException</code> 을 봤을 것이다.</p>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/231441130-7a39f286-91f8-4994-bd48-2bcd813fcf59.png'></p>\n<ul>\n<li>Fragment Transaction은 호스트 Activity가 자신의 상태(RESUMED, STOPPED 등)를 저장하기 전에 생성되고 commit 되어야 한다.</li>\n<li>\n<p>만약 호스트 Activity가 <code class=\"language-text\">onSaveInstanceState()</code> 메소드를 호출한 후에 Fragment Transaction이 commit 된다면 에러가 발생한다.</p>\n<ul>\n<li>Activity의 상태가 저장될 때 자신에서 <strong>호스팅되어 있는 Fragment의 상태도 저장</strong> 하게 되는데, <strong>이러한 상태 저장 후 Fragment Transaction에 의해 Fragment 추가/교체/삭제 작업이 일어나면 Activity가 저장한 Fragment 상태와 달라</strong> 지기 때문이다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>📍<code class=\"language-text\">commitAllowingStateLoss()</code> 는 commit()과 거의 동일 하지만 상태와 달라질 수 있는(상태 손실)을 허용한다.</p>\n</blockquote>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/guide/fragments?hl=ko\">https://developer.android.com/guide/fragments?hl=ko</a></li>\n<li><a href=\"https://medium.com/hongbeomi-dev/%EB%B2%88%EC%97%AD-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%A2%85%EB%A5%98%EC%9D%98-commit-8f646697559f\">https://medium.com/hongbeomi-dev/%EB%B2%88%EC%97%AD-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%A2%85%EB%A5%98%EC%9D%98-commit-8f646697559f</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Fragment 조각내기","date":"April 12, 2023","update":"April 12, 2023","tags":["Android","FragmentTransaction","Fragment"],"series":"Android"},"fields":{"slug":"/android-fragment/","readingTime":{"minutes":9.535}}},"seriesList":{"edges":[{"node":{"id":"8da53698-7fbf-50de-b57d-674258641696","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"32630555-7ffc-5c77-8e93-41b9441313c7","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"02cd12ae-6f40-58aa-be67-edbe6836235b","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"351d6f88-b8e1-5a92-8ab2-5a18f816e5f2","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"e77807c0-3767-530f-a643-b3c28eead54b","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"584879b5-e89c-570d-9728-e24e7543a406","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"7b7ee01b-c911-5343-9957-c4ef27024778","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"df99c5d4-e349-5463-9a5f-c65c2c714a98","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"c1750e54-c129-5248-b9a4-dc6ead87c256","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"ba69adf2-5458-521e-b6eb-85bbad0e6385","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"cc73ab05-b427-563d-82a2-220a8c3fedb6","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"832ca7b8-20af-5b55-9b16-2610187c24ae","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"379be128-999b-5d4c-b690-3f2552a189f3","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"f004c3a4-f9d8-509d-ab8f-7ae273cc1f6f","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"03b60894-ee1f-5d06-94b7-a41567772d61","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"7a30a0fa-f5f4-5b2a-9e51-03568d97de6d","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"793dad13-2ba5-5df0-957c-4763d3df25a2","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"e7e7c2d3-ace1-53dc-bd3b-ee4e96ad9b6c","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"fcc174d6-e820-5bfb-8407-5db69e9cff26","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"9ca4a2fd-2662-5c91-99af-5ddf44fc5fd4","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"2af94fb4-d2f5-5af1-9f2a-cd678174506d","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"4135a47f-c10c-5535-8b71-3add3f62dd6c","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"3f56723e-63f6-5dd9-b2e2-fe403e99c18b","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"b600df71-260c-567f-8ccf-592f16304768","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"e8c7ca90-23b4-5683-a655-90460391cf01","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"52277946-9258-55cd-9361-7b6cd2c26cf6","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"26ead8cc-53e7-5fca-8930-d6762ae10124","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"abbe933c-9872-5d48-8ef7-04d14e785ccc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f2966618-c744-5fb8-b785-3650ebae1072","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"bbef1829-8d9e-589f-b1c8-22945fc1bd11","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"75dc9cf5-f813-58b3-b426-c9125325ea76","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"1eaf8bbe-518b-5a56-bd4d-230253d4a1db","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"bae61635-412c-5e43-8a7b-1eafe2722928","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"28df186b-d648-5562-a726-a8c7350b5a01","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"eb0bbfb7-fa8e-53da-b0ad-3b250756090e","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}},{"node":{"id":"c4e9fd73-d14b-5068-9741-133bd0ab6738","fields":{"slug":"/android-scope-storage/"},"frontmatter":{"title":"안드로이드 Scope Storage 사용하기"}}}]},"previous":{"fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}},"next":{"fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},"pageContext":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","series":"Android","previousPostId":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","nextPostId":"52277946-9258-55cd-9361-7b6cd2c26cf6"}},"staticQueryHashes":[],"slicesMap":{}}