{"componentChunkName":"component---src-templates-post-jsx","path":"/android-sqlite/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","excerpt":"안드로이드 앱 내부에 데이터를 저장하게 되면 Jetpack 라이브러리에 있는 Room을 사용하게 된다.  처음 안드로이드 개발을 할 시 Room에 대한 학습을 통해 SQLite를 내부적으로 사용을 하고 있다는 것을 알았지만 직접적으로 SQLite를 사용해보지 않아 이번에 SQLite를 직접 사용해 보려고 한다. SQLite SQLite를 사용하면 Loca…","html":"<p>안드로이드 앱 내부에 데이터를 저장하게 되면 Jetpack 라이브러리에 있는 <a href=\"https://ppeper.github.io/android/room-database/\">Room</a>을 사용하게 된다. </p>\n<p>처음 안드로이드 개발을 할 시 Room에 대한 학습을 통해 SQLite를 내부적으로 사용을 하고 있다는 것을 알았지만 직접적으로 SQLite를 사용해보지 않아 이번에 SQLite를 직접 사용해 보려고 한다.</p>\n<h1>SQLite</h1>\n<ul>\n<li>SQLite를 사용하면 Local database 생성 할 수 있다.</li>\n<li>관계형 데이터 베이스 구조를 따른다.</li>\n<li>작은 규모의 안드로이드 앱에서 사용하기 적합한 데이터 베이스이다.</li>\n<li>기존의 SQL문과 동일하여 <strong>insert, delete, update, select</strong> 문을 사용할 수 있다.</li>\n</ul>\n<h2>클래스 및 메서드</h2>\n<h4>SQLiteDatabase</h4>\n<ul>\n<li>데이터베이스를 다루는 작업(추가, 삽입, 삭제, 쿼리) 담당한다.</li>\n</ul>\n<h4>SQLiteOpenHelper</h4>\n<ul>\n<li>데이터베이스의 생성, 열기, 업그레이드 담당한다.</li>\n</ul>\n<h4>ContentValues</h4>\n<ul>\n<li>데이터 베이스에 자료 입력 할 때 사용하는 클래스</li>\n</ul>\n<h4>Cursor</h4>\n<ul>\n<li>Cursor는 SQL을 실행하는 객체, 데이터는 테이블 형식</li>\n<li>Cursor에는 현재 가리키고 있는 로우를 나타내는 위치가 있음</li>\n<li>\n<p>처음 처서를 반환 받았을 때 커서의 위치는 -1번째 행을 가리킴</p>\n<ul>\n<li>\n<p>주요 메서드</p>\n<ul>\n<li>\n<p><code class=\"language-text\">moveToNext()</code></p>\n<ul>\n<li>다음 행으로 이동하는 메서드. 이동 성공 여부에 따라 true/false 리턴</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">moveToFirst()</code></p>\n<ul>\n<li>첫 번째 행으로 위치를 움직여주는 메서드</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">moveToLast()</code></p>\n<ul>\n<li>마지막 행으로 위치를 움직여주는 메서드</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">getColumnIndex(String heading)</code></p>\n<ul>\n<li>컬럼 헤딩을 넘겨주면 특정 컬럼의 인텍스를 가져오는 메서드</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>DBHelper</h3>\n<ul>\n<li>SQLiteOpenHelper를 상속 받고 테이블 생성 및 쿼리 관련 기능 정의</li>\n<li>MainActivity 에서 DBHelper를 이용해 테이블 구성 및 C/R/U/D 처리한다.</li>\n<li>\n<p>라이프 사이클 메서드</p>\n<ul>\n<li><code class=\"language-text\">onCreate</code> : 테이블 생성 등 초기 설정 처리</li>\n<li><code class=\"language-text\">onOpen</code> : 구동될 DB가 있다면 실제 사용 그 DB를 사용</li>\n<li><code class=\"language-text\">onUpgrade</code> : 만약 현재의 DB가 구 버전이라면 DB 업그레이드 처리(drop 후 create, alter table등으로 구현)</li>\n</ul>\n</li>\n<li>\n<p>_id integer은 SQLite를 사용하기 위해서 무조건 필수인 column이다. (primary key)</p>\n<ul>\n<li>없으면 column “_id”  does not exist라는 에러가 발생한다.</li>\n</ul>\n</li>\n</ul>\n<h1>스키마 정의</h1>\n<p>안드로이드 공식문서에서는 Contract 클래스를 생성 후  <code class=\"language-text\">BaseColumns</code> 인터페이스를 구현체를 통하여 내부 클래스는 <code class=\"language-text\">_ID</code> 라는 기본 키 필드를 상속할 수 있도록 가이드 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span>BaseColumns\n<span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span>BaseColumns<span class=\"token punctuation\">.</span>_ID\n\n<span class=\"token keyword\">object</span> MemoContract <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">object</span> MemoEntry <span class=\"token operator\">:</span> BaseColumns <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> TABLE_NAME <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"MEMO\"</span></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> COLUMN_TITLE <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"title\"</span></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> COLUMN_CONTENT <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"content\"</span></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> COLUMN_DATE <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"date\"</span></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> CREATE_QUERY <span class=\"token operator\">=</span> <span class=\"token string-literal multiline\"><span class=\"token string\">\"\"\"\n            CREATE TABLE </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">TABLE_NAME</span></span><span class=\"token string\"> (\n                </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">_ID</span></span><span class=\"token string\"> INTEGER PRIMARY KEY AUTOINCREMENT,\n                </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">COLUMN_TITLE</span></span><span class=\"token string\"> TEXT NOT NULL,\n                </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">COLUMN_CONTENT</span></span><span class=\"token string\"> TEXT NOT NULL,\n                </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">COLUMN_DATE</span></span><span class=\"token string\"> TEXT NOT NULL,\n            )\n        \"\"\"</span></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> DROP_QUERY <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"DROP TABLE if exists </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">TABLE_NAME</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>DPHelper 생성</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">MemoDBHelper</span><span class=\"token punctuation\">(</span>\n    context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">SQLiteOpenHelper</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> DATABASE_NAME<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> DATABASE_VERSION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> db<span class=\"token operator\">:</span> SQLiteDatabase\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>db<span class=\"token operator\">:</span> SQLiteDatabase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span>CREATE_QUERY<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onUpgrade</span><span class=\"token punctuation\">(</span>db<span class=\"token operator\">:</span> SQLiteDatabase<span class=\"token punctuation\">,</span> oldVersion<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> newVersion<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span>DROP_QUERY<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 데이터베이스가 writeable, readable을 호출할 때 open이 된다.</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onOpen</span><span class=\"token punctuation\">(</span>db<span class=\"token operator\">:</span> SQLiteDatabase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onOpen</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> db\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//CRUD 메소드들</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> DATABASE_NAME <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"memo.db\"</span></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> DATABASE_VERSION <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Select</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">selectAllMemos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ArrayList<span class=\"token operator\">&lt;</span>MemoDto<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> memoList <span class=\"token operator\">=</span> ArrayList<span class=\"token operator\">&lt;</span>MemoDto<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> projection <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>COLUMN_TITLE<span class=\"token punctuation\">,</span> COLUMN_CONTENT<span class=\"token punctuation\">,</span> COLUMN_DATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> orderBy <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">COLUMN_DATE</span></span><span class=\"token string\"> ASC\"</span></span>\n    <span class=\"token keyword\">val</span> cursor <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>\n        TABLE_NAME<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 테이블 이름</span>\n        projection<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 반환할 컬럼들 -> null이면 *과 동일</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// WHERE문</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// WHERE문에 들어갈 values</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// groupBy</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// having</span>\n        orderBy<span class=\"token punctuation\">,</span> <span class=\"token comment\">// orderBy</span>\n        <span class=\"token keyword\">null</span> <span class=\"token comment\">// limit</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">moveToNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            memoList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">MemoDto</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> memoList\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>데이터를 조회하는 방법은 <code class=\"language-text\">query</code> 메소드를 이용하면 쉽게 Cursor 구현체를 반환 받아 사용할 수 있다.</p>\n<p>Parameter는 공식문서에 잘 나와 있어, 위의 순서대로 테이블 이름, 조회하려는 칼럼들을 배열로 정의하고 이외 selection, slectionArgs, groupBy, having, orderBy, limit 등으로 다양한 조건을 추가 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">selectAllMemos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ArrayList<span class=\"token operator\">&lt;</span>MemoDto<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> memoList <span class=\"token operator\">=</span> ArrayList<span class=\"token operator\">&lt;</span>MemoDto<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">rawQuery</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"select * from </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">TABLE_NAME</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> cursor <span class=\"token operator\">-></span>\n        <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">moveToNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                memoList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">MemoDto</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> memoList\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다른 방법으로는 SQL문을 직접 사용하는 <code class=\"language-text\">rawQuery</code> 메소드를 사용하여 원하는 쿼리 결과를 얻을 수도 있다.</p>\n<p><code class=\"language-text\">use</code> 키워드는 코틀린 1.2에서 제공된 AutoCloseable 을 제공해 주는 extension 메서드로 try/catch/finally를 모두 포함하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@InlineOnly</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> Closeable<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">{</span>\n    contract <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> exception<span class=\"token operator\">:</span> Throwable<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        exception <span class=\"token operator\">=</span> e\n        <span class=\"token keyword\">throw</span> e\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">apiVersionIsAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeFinally</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            exception <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">-></span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>closeException<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// cause.addSuppressed(closeException) // ignored here</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Insert</h2>\n<p>데이터를 추가하기 위해서는 <code class=\"language-text\">insert</code> 메서드를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">insertMemo</span><span class=\"token punctuation\">(</span>memo<span class=\"token operator\">:</span> MemoDto<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Long <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> contentValues <span class=\"token operator\">=</span> <span class=\"token function\">ContentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>COLUMN_TITLE<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>COLUMN_CONTENT<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>COLUMN_DATE<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>TABLE_NAME<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> contentValues<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SQLiteDatabase 클래스 내에서는 다양한 메서드를 제공하여 추가할 데이터를 <code class=\"language-text\">ContentValue</code> 에 key-value의 형태로 저장할 수 있다.</p>\n<p>두 번째 인자는 ContentValues에 어떤 값도 삽입하지\n않았을 때 실행할 작업을 알려주는 것이다.</p>\n<p>위에서와 같이 <code class=\"language-text\">null</code>을 지정하면 값이 없을 때는 행을 삽입하지 않는다.</p>\n<p>insert() 메서드는 새로 생성된 행의 ID를 반환하거나 데이터 삽입 시 데이터의 충돌과 같은 오류가 발생하면 -1을 반환한다.</p>\n<h2>Update</h2>\n<p>데이터의 수정은 <code class=\"language-text\">update</code> 메서드를 통하여 수정하려는 행에 대한 selection과 selectionArgs를 지정하고 바꾸려는 contentValues를 생성하여 인자로 넘겨준다.</p>\n<p>update 메서드는 데이터베이스에서 영향을 받은 행의 수가 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">updateMemo</span><span class=\"token punctuation\">(</span>memo<span class=\"token operator\">:</span> MemoDto<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> selection <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">_ID</span></span><span class=\"token string\">=?\"</span></span>\n    <span class=\"token keyword\">val</span> selectionArgs <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> contentValues <span class=\"token operator\">=</span> <span class=\"token function\">ContentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>COLUMN_TITLE<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>COLUMN_CONTENT<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>COLUMN_DATE<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>TABLE_NAME<span class=\"token punctuation\">,</span>\n        contentValues<span class=\"token punctuation\">,</span>\n        selection<span class=\"token punctuation\">,</span>\n        selectionArgs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Delete</h2>\n<p>데이터의 삭제는 <code class=\"language-text\">delete</code> 메서드를 통하여 update와 마찬가지로 where 조건절을 설정한 후 호출한다.</p>\n<p>delete 메서드는 데이터베이스에서 삭제된 행의 수가 반환 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">deleteMemo</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> selection <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">_ID</span></span><span class=\"token string\">=?\"</span></span>\n    <span class=\"token keyword\">val</span> selectionArgs <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>TABLE_NAME<span class=\"token punctuation\">,</span> selection<span class=\"token punctuation\">,</span> selectionArgs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Activity에서 사용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span> ActivityMainBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// DB 선언</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> memoDBHelper<span class=\"token operator\">:</span> MemoDBHelper\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> database<span class=\"token operator\">:</span> SQLiteDatabase\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">initDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">initDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        memoDBHelper <span class=\"token operator\">=</span> <span class=\"token function\">MemoDBHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// getWriteableDatabase/getReadbleDatabase를 호출 시 onOpen 메서드 실행</span>\n        <span class=\"token comment\">// database = memoDBHelper.readableDatabase</span>\n        database <span class=\"token operator\">=</span> memoDBHelper<span class=\"token punctuation\">.</span>writableDatabase\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        memoDBHelper<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>데이터베이스가 닫혀 있을 때 <code class=\"language-text\">getWriteableDatabase</code> 및 <code class=\"language-text\">getReadbleDatabase</code> 메서드가 호출 시에는 리소스가 많이 사용되기 때문에 최대한 데이터베이스 연결을 하도록 하고, 사용이 끝나면 <code class=\"language-text\">onDestroy()</code> 에서 데이터베이스를 받는 것이 좋다.</p>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/training/data-storage/sqlite?hl=ko\">https://developer.android.com/training/data-storage/sqlite?hl=ko</a></li>\n</ul>","frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite","date":"March 24, 2023","update":"March 24, 2023","tags":["Android","SQLite"],"series":"Android"},"fields":{"slug":"/android-sqlite/","readingTime":{"minutes":8.765}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"bc850df8-7668-542d-896a-6380a5c90b44","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}}]},"previous":{"fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}},"next":{"fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},"pageContext":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","series":"Android","previousPostId":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","nextPostId":"d5df013b-8ddd-5c33-ab15-38ddacceb71e"}},"staticQueryHashes":[],"slicesMap":{}}