{"componentChunkName":"component---src-templates-post-jsx","path":"/broadcast/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"f324f418-379e-5586-bd19-dea6cc747952","excerpt":"브로드캐스트(Broadcast) 앱의 액티비티를 시작시키는 메커니즘을 제공하는 것과 더불어 인텐트는 시스템의 다른 컴포넌트에 시스템 차원의 메시지를 전파하는 방법으로 사용될 수 있다. 예를 들어 안드로이드 시스템은 부팅이나 배터리가 부족할때와 같은 시스템 이벤트가 발생하면 브로드캐스트 를 전송한다.  브로드캐스트(방송)를 보낸다고 하면 어떠한 정의된 방법…","html":"<hr>\n<h1>브로드캐스트(Broadcast)</h1>\n<p>앱의 액티비티를 시작시키는 메커니즘을 제공하는 것과 더불어 인텐트는 시스템의 다른 컴포넌트에 시스템 차원의 메시지를 전파하는 방법으로 사용될 수 있다. 예를 들어 안드로이드 시스템은 부팅이나 배터리가 부족할때와 같은 시스템 이벤트가 발생하면 <strong>브로드캐스트</strong> 를 전송한다. </p>\n<p>브로드캐스트(방송)를 보낸다고 하면 어떠한 정의된 방법으로 <code class=\"language-text\">포장</code>을 하고 보내는 사람이 있으면 받는 <code class=\"language-text\">수신자</code>가 있을것이다. 안드로이드에서는 이를 <strong>브로드캐스트 인텐트</strong>, <strong>브로드캐스트 수신자</strong> 를 사용한다.</p>\n<h2>브로드캐스트 인텐트 개요</h2>\n<p>브로드캐스트 인텐트는 Activity 클래스의 <code class=\"language-text\">sendBroadcast()</code> 또는 <code class=\"language-text\">sendStickyBroadcast()</code> 또는 <code class=\"language-text\">sendOrderedBroadcast()</code> 함수를 호출하여 전파되는 Intent 객체다. <a href=\"https://ppeper.github.io/android/intent/\">(안드로이드 인텐트 개념)</a></p>\n<p>브로드캐스트 인텐가 생성될 때는 <strong>액션 문자열</strong> 을 포함해야 한다. 그리고 선택적인 데이터와 카테고리 문자열을 추가로 포함할 수 있다. 즉, 일반적인 인텐트와 마찬가지로 <strong>putExtra(String, Bundle)</strong> 를 사용하여 데이터를 브로드캐스트 인텐트에 추가할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nintent<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"com.example.Broadcast\"</span></span>\nintent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtras</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"MyData\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">sendBroadcast</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 예시는 안드로이드 3.0 이전 버전을 실행 중인 장치에서는 성공적으로 브로드캐스트 수신자를 시작시킬 수 있을 것이다. 그러나 3.0 이상 버전에서는 론칭(실행)을 제어하는 보안 조치가 도입되어 브로드캐스트 수신자에 의해 이 인텐트가 수신되지 않는다고 한다. -> <strong>사용 정지된</strong> 앱의 컴포넌트가 인텐트를 통하여 시작되는 것을 막는 조치다.</p>\n<p>앱이 방금 설치되어서 이전에 론칭(시작)된 적이 없거나 장치의 앱 매니저를 사용해서 사용자가 수동으로 정지시켰을 경우, 해당 앱은 사용 정지된 상태에 있다고 간주된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nintent<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"com.example.Broadcast\"</span></span>\nintent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtras</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"MyData\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-></span> intent<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">=</span> Intent<span class=\"token punctuation\">.</span>FLAG_INCLUDE_STOPPED_PACKAGES\n<span class=\"token function\">sendBroadcast</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이것을 해결하려면 인텐트에 <strong>FLAG<em>INCLUDE</em>STOPPED_PACKAGES</strong> 플래그를 추가하여 사용 정지된 앱의 컴포넌트를 시작시키는 것이 인텐트에 허용된다는 것을 나타낼 수 있다.<del>(Flags를 찾아보며 알아가야겠다..))</del></p>\n<h2>브로드캐스트 수신자 개요</h2>\n<p>브로드캐스트 인텐트가 생성이 되었다면 받을 수신자를 등록해야 한다. 브로드캐스트 수신자는 <strong>BroadcastReceiver</strong> 클래스로 부터 상속받고 <strong>onReceive()</strong> 함수를 오버라이딩하여 구현 한다.</p>\n<p>브로드캐스트 인텐트와 받을 브로드캐스트 리시버가 있으면 수신자가 누군지 정해주어야 할 것이다. 안드로이드에서는 이를 <strong>manifest 파일</strong> 및 <strong>컨텍스트</strong>(예: 액티비티 내부)에의 두가지 방식으로 수신자를 등록하여 브로드캐스트 인텐트를 수신할 수 있다. </p>\n<p>인텐트 필터에 특정 브로드캐스트 인텐트를 나타내는 <strong>액션 문자열</strong> 을 정의하면 안드로이드에서 이 액션 문자열과 일치하는 브로드캐스트 인텐트가 감지되면 해당 브로드캐스트 수신자의 <strong>onReceive()</strong> 함수가 호출된다. </p>\n<h3>Manifest.xml에 수신자 등록</h3>\n<p>브로드캐스트 수신자를 매니페스트 파일에 등록할 때는 <strong><code class=\"language-text\">&lt;receiver></code></strong> 항목을 추가해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.kyonggi.sendbroadcast<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>roundIcon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher_round<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>supportsRtl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/Theme.SendBroadcast<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>receiver</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyReceiver<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>exported</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>receiver</span><span class=\"token punctuation\">></span></span>\n                .\n                .\n                .\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>안드로이드 8.0 이전 버전이 실행되는 경우에는 수신자와 관련된 인텐트 필터를 manifest 파일의 receiver에 둘 수 있다. 예시에서는 \"com.exmaple.Broadcast\"를 포함하는 브로드캐스트 인텐트를 리스닝한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>receiver</span> \n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyReceiver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.Broadcast<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>action</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>receiver</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>컨텍스트에 수신자 등록</h3>\n<p>반면에 안드로이드 8.0 이상 버전에서는 코드에서 적합한 <strong>IntentFilter</strong> 객체를 생성한 후 Activity 클래스의 <strong>registerReceiver()</strong> 함수를 호출하여 등록해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> filter <span class=\"token operator\">=</span> <span class=\"token function\">IntentFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfilter<span class=\"token punctuation\">.</span><span class=\"token function\">addAction</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.example.Broadcast\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> receiver <span class=\"token operator\">=</span> <span class=\"token function\">MyReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">registerReceiver</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>코드에서 등록된 브로드캐스트 수신자가 더 이상 필요하지 않을 때는 Activity 클래스의 <strong><code class=\"language-text\">unregisterReceiver(receiver: BroadcastReceiver!)</code></strong> 함수를 호출하여 등록을 해지할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">unregisterReceiver</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h1>예제 코드</h1>\n<ul>\n<li>activity_main.xml</li>\n</ul>\n<p> 버튼과 onclick 속성으로 broadcastIntent()를 함수를 구현한다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/150098676-4b56e257-eb45-4a40-be66-b8f2c751fc62.png\" height=\"50%\">\n<ul>\n<li>MainActivity class</li>\n</ul>\n<p>MainActivity에서 브로드캐스트 인텐트를 지정해주고 액션 문자열은 <strong>com.kyonggi.sendbroadcast</strong> 로 지정한다.</p>\n<p>그 다음은 \"브로드캐스트 수신자\"의 인텐트 필터에 위의 액션 문자과 일치하는 <strong><code class=\"language-text\">&lt;action></code></strong> 요소를 정의할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 브로드캐스트 인텐트를 전송</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">broadcastIntent</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> View<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        intent<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"com.kyonggi.sendbroadcast\"</span></span>\n        intent<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">=</span> Intent<span class=\"token punctuation\">.</span>FLAG_INCLUDE_STOPPED_PACKAGES\n        <span class=\"token function\">sendBroadcast</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>MyReceiver class</li>\n<li>브로드캐스트 리시버는 <strong>BroadcastReceiver()</strong> 와 <strong>onReceive()</strong> 를 구현해야 한다고 하였다.</li>\n<li>예시에서는 Toast메시지를 통하여 브로드캐스트 인텐트를 수신하였는지 확인할 것이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MyReceiver <span class=\"token operator\">:</span> <span class=\"token function\">BroadcastReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onReceive</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> intent<span class=\"token operator\">:</span> Intent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> message <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Broadcast intent detected \"</span></span> <span class=\"token operator\">+</span> intent<span class=\"token punctuation\">.</span>action\n        Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>브로드캐스트 인텐트와 브로드캐스트 리시버가 완성되었기 때문에 이제 수신자를 등록해 주어야 한다.</p>\n<p>수신자는 위에서 말한 인텐트 필터를 통하여 액션 문자열과 리시버를 포함해야한다. </p>\n<p>MyReceiver를 생성하였을 때 안드로이드 스튜디오에서 자동으로 <strong><code class=\"language-text\">&lt;receiver></code></strong> 요소를 manifest 파일에 추가해 주었다. 지금 실행하는 안드로이드는 8.0 이상이기때문에 코드로 <strong>IntentFilter</strong> 를 설정해 주어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 브로드캐스트 인텐트를 지정해야한다.</span>\n    <span class=\"token keyword\">var</span> receiver<span class=\"token operator\">:</span> BroadcastReceiver<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token function\">configureReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">configureReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> filter <span class=\"token operator\">=</span> <span class=\"token function\">IntentFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        filter<span class=\"token punctuation\">.</span><span class=\"token function\">addAction</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.kyonggi.sendbroadcast\"</span></span><span class=\"token punctuation\">)</span>\n        receiver <span class=\"token operator\">=</span> <span class=\"token function\">MyReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">registerReceiver</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">unregisterReceiver</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>onDestroy() 함수는 브로드캐스트 수신자가 더 이상 필요 없을 때 등록을 해지하기 위해 필요하다.</p>\n<p>안드로이드 장치에서 Send Broadcast 버튼을 터치하면 처음 등록한 Toast 메시지가 나타나는걸 볼 수 있다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/150101172-d94e1502-ab10-4e7a-9a7a-58f529acfa1c.png\" height=\"50%\">\n<ul>\n<li>추가: 장치의 외부 전원이 끊어졌을 때 전송되는 시스템 브로드캐스트 인텐트를 리스닝 하도록 브로드캐스트 수신자의 인텐트 필터를 변경해 보자. 이때 사용되는 액션은 <strong>android.intent.action.ACTION<em>POWER</em>DISCONNECTED</strong> 이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">configureReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> filter <span class=\"token operator\">=</span> <span class=\"token function\">IntentFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        filter<span class=\"token punctuation\">.</span><span class=\"token function\">addAction</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"android.intent.action.ACTION_POWER_DISCONNECTED\"</span></span><span class=\"token punctuation\">)</span>\n        receiver <span class=\"token operator\">=</span> <span class=\"token function\">MyReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">registerReceiver</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 다시 앱을 실행하여 전원을 공급을 하지 않게되면 다음과 같은 Toast 메시지가 나올것이다. (에뮬레이터에서 실행 중이라면 확장 제어 대화상자 -> Battery선택 -> Charger connection을 AC charger 선택 했다가 None으로 변경)</p>\n<p><code class=\"language-text\">> Broadcast intent detected android.intent.action.ACTION_POWER_DISCONNECTED</code></p>\n<p><a href=\"https://github.com/ppeper/Android_Arctic-Fox/tree/main/SendBroadcast\">시스템 브로드캐스트 인텐트 수신 예시</a></p>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/broadcasts?hl=ko\">안드로이드 브로드캐스트 개요</a></li>\n</ul>","frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)","date":"January 20, 2022","update":"January 20, 2022","tags":["Android","Broadcast"],"series":"Android"},"fields":{"slug":"/broadcast/","readingTime":{"minutes":9.6}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}},"next":{"fields":{"slug":"/programmers-kakao-blind-2020-2/"},"frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - 신고 결과 받기"}}},"pageContext":{"id":"f324f418-379e-5586-bd19-dea6cc747952","series":"Android","previousPostId":"797d9ee9-2c11-55bc-b727-4ae592506f62","nextPostId":"17ca645f-dd9f-516b-aa44-9221aa906278"}},"staticQueryHashes":[],"slicesMap":{}}