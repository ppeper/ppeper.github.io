{"componentChunkName":"component---src-templates-post-jsx","path":"/runOnUiThread/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","excerpt":"안드로이드 Thread 안드로이드에서는 Main Thread와 Sub Thread가 동시에 자원에 접근하여 생기는 동기화 이슈를 발생 할 수 있기 때문에 메인 스레드(UI 스레드) 에서만 뷰의 값을 바꿀 수 있는 싱글 스레드로 동작 한다. -> 위와 같이 멀티 스레드 환경에서 동시에 스레드가 UI를 갱신을 하여고 한다면 가 어떠한 값으로 변경될지 알 수 …","html":"<h1 id=\"안드로이드-Thread\" style=\"position:relative;\"><a href=\"#%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-Thread\" aria-label=\"안드로이드 Thread permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>안드로이드 Thread</h1>\n<p>안드로이드에서는 Main Thread와 Sub Thread가 동시에 자원에 접근하여 생기는 동기화 이슈를 발생 할 수 있기 때문에 <strong>메인 스레드(UI 스레드)</strong> 에서만 뷰의 값을 바꿀 수 있는 <strong>싱글 스레드로 동작</strong> 한다.</p>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/195595735-1577e824-1979-410c-860c-7b0a01fc54da.png' width='70%'></p>\n<blockquote>\n<p>-> 위와 같이 멀티 스레드 환경에서 동시에 스레드가 UI를 갱신을 하여고 한다면 <code class=\"language-text\">TextView</code>가 어떠한 값으로 변경될지 알 수 없다. </p>\n</blockquote>\n<h2 id=\"싱글-스레드에서-중요한-점\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90%EC%84%9C-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%A0%90\" aria-label=\"싱글 스레드에서 중요한 점 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>싱글 스레드에서 중요한 점</h2>\n<p>싱글 스레드로 동작하는 안드로이드에서 중요한 점은 따라서 아래와 같이 조심해야 하는 포인트가 있다.</p>\n<blockquote>\n<p><strong>❗메인 스레드(UI 스레드) 를 오랜시간 블로킹하면 안된다</strong></p>\n<p>-> 메인 스레드를 블로킹한다는 의미는 사용자가 보고 있는 UI가 멈춘다는 의미와 같다. 안드로이드에서는 메인 스레드를 블로킹하면 ANR(Application Not Responding)이 발생하여 강제 종료가 된다.</p>\n</blockquote>\n<h2 id=\"메인-스레드에서는-무거운-작업을-피하자\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%9D%B8-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90%EC%84%9C%EB%8A%94-%EB%AC%B4%EA%B1%B0%EC%9A%B4-%EC%9E%91%EC%97%85%EC%9D%84-%ED%94%BC%ED%95%98%EC%9E%90\" aria-label=\"메인 스레드에서는 무거운 작업을 피하자 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>메인 스레드에서는 무거운 작업을 피하자</h2>\n<p>안드로이드에서 메인 스레드를 블로킹하지 않기 위해서 다른 스레드에게 사진을 서버에서 다운 받는 작업을 한다고 하자. 해당하는 사진은 결국 UI에서 보여주기 위해 <strong>메인 스레드에서 처리를 해줘야 할 것이다.</strong></p>\n<p>-> 이때 스레드간에 통신을 위해서는 <strong><code class=\"language-text\">Handler</code>와 <code class=\"language-text\">Looper</code></strong> 를 통해서 처리 작업을\n바꿔주어야 한다.</p>\n<hr>\n<h1 id=\"Handler--Looper\" style=\"position:relative;\"><a href=\"#Handler--Looper\" aria-label=\"Handler  Looper permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Handler &#x26; Looper</h1>\n<blockquote>\n<p>스레드가 시작 되면 스레드는 <code class=\"language-text\">Handler</code>, <code class=\"language-text\">Looper</code>, <code class=\"language-text\">MessagingQueue</code> 를 하나씩 가지고 있다. 각자의 기능은 스레드간의 통신을 위하여 사용된다.</p>\n</blockquote>\n<h2 id=\"Looper\" style=\"position:relative;\"><a href=\"#Looper\" aria-label=\"Looper permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Looper</h2>\n<p>하나의 스레드는 단 하나의 <code class=\"language-text\">Looper</code>를 가지며, 해당 <code class=\"language-text\">Looper</code>는 오직 하나의 스레드를 담당한다.</p>\n<p><code class=\"language-text\">Looper</code>의 내부에는 <code class=\"language-text\">MessageQueue</code>라는 것이 존재한다. 이름과 같이 MessageQueue는 <strong>스레드가 처리 해야할 일들이</strong>  <code class=\"language-text\">Message</code><strong>의 형태로 들어가 있는 FIFO 구조로 동작하는 친구</strong> 이다. <code class=\"language-text\">Looper</code>는 MessageQueue가 비어있으면 아무 행동을 하지 않다가 Message가 들어오면 적절한 <code class=\"language-text\">Handler</code>에게 전달하는 역할을 한다.</p>\n<blockquote>\n<p><strong>Message?</strong></p>\n<ul>\n<li><code class=\"language-text\">Message</code> 객체는 스레드가 처리하는 작업이라고 생각할 수 있다. MessageQueue 에서 이러한 작업을 넣어주거나 꺼내어 적절한 <strong>Handler</strong> 에게 전달한다.</li>\n<li>Message 객체는 <code class=\"language-text\">Message</code>와 <code class=\"language-text\">Runnable</code> 두개로 나누어 진다.</li>\n</ul>\n</blockquote>\n<p>종합적으로 <code class=\"language-text\">Looper</code>는 <strong>MessageQueue에 있는 메시지를 꺼내어 해당하는 <code class=\"language-text\">Handler</code> 에게 전달하는 역할</strong> 을 한다.</p>\n<h2 id=\"Handler\" style=\"position:relative;\"><a href=\"#Handler\" aria-label=\"Handler permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Handler</h2>\n<p><code class=\"language-text\">Handler</code> 는 이름과 비슷하게 어떠한 것을 다루는 일을 한다. 구체적으로 하는 일은 <code class=\"language-text\">Looper</code> <strong>라는 친구의 MessagingQueue에 어떠한 값을 넣거나</strong> <code class=\"language-text\">Looper</code>에서 <strong>MessagingQueue의 특정 메시지를 주면 이를 처리</strong> 한다.</p>\n<h3 id=\"1-Looper에게-메시지-전달\" style=\"position:relative;\"><a href=\"#1-Looper%EC%97%90%EA%B2%8C-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%A0%84%EB%8B%AC\" aria-label=\"1 Looper에게 메시지 전달 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1. Looper에게 메시지 전달</h3>\n<p>Looper는 <code class=\"language-text\">Message</code>와 <code class=\"language-text\">Runnable</code> 객체를 담을 수 있다.</p>\n<blockquote>\n<p><strong>sendMessage()</strong></p>\n<ul>\n<li>MessageQueue에 <code class=\"language-text\">Message</code> 객체를 담을 수 있다.</li>\n</ul>\n<p><strong>post()</strong></p>\n<ul>\n<li>post 메소드를 통하여 <code class=\"language-text\">Runnable</code> 객체를 담을 수 있다.</li>\n</ul>\n</blockquote>\n<h3 id=\"2-Looper에게서-메시지를-받음\" style=\"position:relative;\"><a href=\"#2-Looper%EC%97%90%EA%B2%8C%EC%84%9C-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%B0%9B%EC%9D%8C\" aria-label=\"2 Looper에게서 메시지를 받음 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>2. Looper에게서 메시지를 받음</h3>\n<p>Looper의 Message Queue에서 <code class=\"language-text\">(something)</code>을 꺼냈을때 아래와 같이 구분이 된다.</p>\n<blockquote>\n<p><strong>Message</strong></p>\n<ul>\n<li>해당 메시지의 내부에 있는 <code class=\"language-text\">Handler</code>가 가지고 있는 <code class=\"language-text\">handleMessage()</code>를 호출하여 <code class=\"language-text\">Handler</code>가 메시지를 전달 받을 수 있다.</li>\n</ul>\n<p><strong>Runnable</strong></p>\n<ul>\n<li><code class=\"language-text\">Runnable</code>의 <code class=\"language-text\">run()</code> 메소드를 통하여 작업을 실행할 수 있다.</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"정리해-보기\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"정리해 보기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>정리해 보기</h1>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/195654013-d526bca7-1c79-495f-bc6e-8976ebc5363a.png' width='50%'></p>\n<blockquote>\n<ol>\n<li>처음 스레드를 생성을 하여 <code class=\"language-text\">(something)</code>을 처리하고 UI를 갱신하기 위해서는 <strong>메인 스레드(UI 스레드)</strong> 로 전달해야 한다.</li>\n<li>특정 스레드 <code class=\"language-text\">Handler</code>의 <code class=\"language-text\">sendMessage()</code> 또는 <code class=\"language-text\">post()</code> 메소드를 호출하여 메인 스레드의 <code class=\"language-text\">Looper</code>의 MessageQueue에 메시지를 전달한다.</li>\n<li>해당 스레드의 <code class=\"language-text\">Looper</code>가 MessageQueue에서 <code class=\"language-text\">Handler</code>에게 메시지를 하나씩 전달한다.</li>\n<li><code class=\"language-text\">Handler</code>는 <code class=\"language-text\">handleMessage()</code>를 통해 받은 메시지를 처리한다.</li>\n</ol>\n</blockquote>\n<h1 id=\"안드로이드에서-적접-보기\" style=\"position:relative;\"><a href=\"#%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90%EC%84%9C-%EC%A0%81%EC%A0%91-%EB%B3%B4%EA%B8%B0\" aria-label=\"안드로이드에서 적접 보기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>안드로이드에서 적접 보기</h1>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Other Thread</span>\n        <span class=\"token keyword\">val</span> mThread <span class=\"token operator\">=</span> Thread <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 익명 객체 구현</span>\n            <span class=\"token comment\">// 여기서 UI 작업을 수행하면 Exception 발생</span>\n        <span class=\"token punctuation\">}</span>\n        mThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>안드로이드의 UI관련한 작업은 <strong>메인 스레드</strong> 에서 동작한다고 하였다. 따라서 다른 스레드에서 UI 관련 작업을 하려고 하면 Exception이 발생한다.</p>\n<p>앞서 말한 대로 <code class=\"language-text\">Handler</code>를 통하여 <strong>메시지를 메인 스레드의 MessageQueue에 전달</strong> 해 주어야 한다.</p>\n<p>안드로이드에서는 <strong>메인 스레드</strong> 가 가지고 있는 <code class=\"language-text\">Looper</code>를 명시하는 <code class=\"language-text\">getMainLooper()</code>를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mHandler<span class=\"token operator\">:</span> Handler<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 명시적으로 메인 스레드의 Looper를 생성</span>\n        mHandler <span class=\"token operator\">=</span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>Looper<span class=\"token punctuation\">.</span><span class=\"token function\">getMainLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Other Thread</span>\n        <span class=\"token keyword\">val</span> mThread <span class=\"token operator\">=</span> Thread <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 익명 객체 구현</span>\n            <span class=\"token comment\">// 여기서 UI 작업을 수행하면 Exception 발생</span>\n            mHandler<span class=\"token operator\">!!</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// UI 작업 가능.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        mThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서브 스레드에서의 작업을 메인 스레드의 Looper의 <code class=\"language-text\">mHandler!!.post</code> 를 통하여 메인 스레드에서 UI 작업을 할 수 있다.</p>\n<h1 id=\"runOnUiThread는-그래서\" style=\"position:relative;\"><a href=\"#runOnUiThread%EB%8A%94-%EA%B7%B8%EB%9E%98%EC%84%9C\" aria-label=\"runOnUiThread는 그래서 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>runOnUiThread는 그래서?</h1>\n<img src='https://user-images.githubusercontent.com/63226023/195632360-67bc0531-85bd-4182-943e-0889dc703619.png'>\n<p>안드로이드 <code class=\"language-text\">runOnUiThread</code>는 <code class=\"language-text\">Activity</code> 클래스에서 제공되는 메소드이다. Android developer에서는 <code class=\"language-text\">Runnable</code> 객체를 메인 스레드에서 실행하도록 만드는 메소드로 <strong>현재 스레드가 메인 스레드이면 <code class=\"language-text\">Runnable</code> 객체의 <code class=\"language-text\">run()</code> 메소드를 직접 실행</strong> 을 하고 아니라면 <code class=\"language-text\">Handler</code>에게 <code class=\"language-text\">post()</code> 메소드를 통하여 메인 스레드로 이벤트 큐를 발송한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> mUiThread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 <code class=\"language-text\">runOnUiThread()</code>를 사용하면 메인 스레드가 아닐때만 <code class=\"language-text\">Handler</code>는 <code class=\"language-text\">post()</code>를 통하여 이벤트를 발생시키기 때문에 좀 더 효율적이라고 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Other Thread</span>\n        <span class=\"token keyword\">val</span> mThread <span class=\"token operator\">=</span> Thread <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 익명 객체 구현</span>\n            <span class=\"token comment\">// 여기서 UI 작업을 수행하면 Exception 발생</span>\n            runOnUiThread <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// UI 작업 가능.</span>\n                <span class=\"token comment\">// UI 스레드가 아니라면 내부적으로 handler.post() 호출</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        mThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://hungseong.tistory.com/26\">https://hungseong.tistory.com/26</a></li>\n</ul>","frontmatter":{"title":"안드로이드 runOnUiThread?","date":"October 16, 2022","update":"October 16, 2022","tags":["Android","Thread","runOnUiThread"],"series":"Android"},"fields":{"slug":"/runOnUiThread/","readingTime":{"minutes":7.99}}},"seriesList":{"edges":[{"node":{"id":"8da53698-7fbf-50de-b57d-674258641696","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"32630555-7ffc-5c77-8e93-41b9441313c7","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"02cd12ae-6f40-58aa-be67-edbe6836235b","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"351d6f88-b8e1-5a92-8ab2-5a18f816e5f2","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"584879b5-e89c-570d-9728-e24e7543a406","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"e77807c0-3767-530f-a643-b3c28eead54b","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"7b7ee01b-c911-5343-9957-c4ef27024778","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"df99c5d4-e349-5463-9a5f-c65c2c714a98","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"c1750e54-c129-5248-b9a4-dc6ead87c256","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"ba69adf2-5458-521e-b6eb-85bbad0e6385","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"cc73ab05-b427-563d-82a2-220a8c3fedb6","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"832ca7b8-20af-5b55-9b16-2610187c24ae","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"379be128-999b-5d4c-b690-3f2552a189f3","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"f004c3a4-f9d8-509d-ab8f-7ae273cc1f6f","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"03b60894-ee1f-5d06-94b7-a41567772d61","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"7a30a0fa-f5f4-5b2a-9e51-03568d97de6d","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"793dad13-2ba5-5df0-957c-4763d3df25a2","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"e7e7c2d3-ace1-53dc-bd3b-ee4e96ad9b6c","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"fcc174d6-e820-5bfb-8407-5db69e9cff26","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"9ca4a2fd-2662-5c91-99af-5ddf44fc5fd4","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"2af94fb4-d2f5-5af1-9f2a-cd678174506d","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"4135a47f-c10c-5535-8b71-3add3f62dd6c","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"3f56723e-63f6-5dd9-b2e2-fe403e99c18b","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"e8c7ca90-23b4-5683-a655-90460391cf01","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"b600df71-260c-567f-8ccf-592f16304768","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"52277946-9258-55cd-9361-7b6cd2c26cf6","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"26ead8cc-53e7-5fca-8930-d6762ae10124","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"abbe933c-9872-5d48-8ef7-04d14e785ccc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f2966618-c744-5fb8-b785-3650ebae1072","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"bbef1829-8d9e-589f-b1c8-22945fc1bd11","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"75dc9cf5-f813-58b3-b426-c9125325ea76","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"1eaf8bbe-518b-5a56-bd4d-230253d4a1db","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"bae61635-412c-5e43-8a7b-1eafe2722928","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"28df186b-d648-5562-a726-a8c7350b5a01","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"eb0bbfb7-fa8e-53da-b0ad-3b250756090e","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}},{"node":{"id":"c4e9fd73-d14b-5068-9741-133bd0ab6738","fields":{"slug":"/android-scope-storage/"},"frontmatter":{"title":"안드로이드 Scope Storage 사용하기"}}},{"node":{"id":"86411f6e-6586-595e-913b-476b89495496","fields":{"slug":"/proguard/"},"frontmatter":{"title":"안드로이드 Proguard 사용하여 빌드 하기"}}}]},"previous":{"fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}},"next":{"fields":{"slug":"/hello-2023/"},"frontmatter":{"title":"2022 회고지만 새해가 밝은..?"}}},"pageContext":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","series":"Android","previousPostId":"2af94fb4-d2f5-5af1-9f2a-cd678174506d","nextPostId":"6c04ce33-a9a1-5d51-b739-0deab0b3aa74"}},"staticQueryHashes":[],"slicesMap":{}}