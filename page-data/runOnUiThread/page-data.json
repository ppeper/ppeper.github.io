{"componentChunkName":"component---src-templates-post-jsx","path":"/runOnUiThread/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","excerpt":"안드로이드 Thread 안드로이드에서는 Main Thread와 Sub Thread가 동시에 자원에 접근하여 생기는 동기화 이슈를 발생 할 수 있기 때문에 메인 스레드(UI 스레드) 에서만 뷰의 값을 바꿀 수 있는 싱글 스레드로 동작 한다. -> 위와 같이 멀티 스레드 환경에서 동시에 스레드가 UI를 갱신을 하여고 한다면 가 어떠한 값으로 변경될지 알 수 …","html":"<h1>안드로이드 Thread</h1>\n<p>안드로이드에서는 Main Thread와 Sub Thread가 동시에 자원에 접근하여 생기는 동기화 이슈를 발생 할 수 있기 때문에 <strong>메인 스레드(UI 스레드)</strong> 에서만 뷰의 값을 바꿀 수 있는 <strong>싱글 스레드로 동작</strong> 한다.</p>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/195595735-1577e824-1979-410c-860c-7b0a01fc54da.png\" width=\"70%\"></p>\n<blockquote>\n<p>-> 위와 같이 멀티 스레드 환경에서 동시에 스레드가 UI를 갱신을 하여고 한다면 <code class=\"language-text\">TextView</code>가 어떠한 값으로 변경될지 알 수 없다. </p>\n</blockquote>\n<h2>싱글 스레드에서 중요한 점</h2>\n<p>싱글 스레드로 동작하는 안드로이드에서 중요한 점은 따라서 아래와 같이 조심해야 하는 포인트가 있다.</p>\n<blockquote>\n<p><strong>❗메인 스레드(UI 스레드) 를 오랜시간 블로킹하면 안된다</strong></p>\n<p>-> 메인 스레드를 블로킹한다는 의미는 사용자가 보고 있는 UI가 멈춘다는 의미와 같다. 안드로이드에서는 메인 스레드를 블로킹하면 ANR(Application Not Responding)이 발생하여 강제 종료가 된다.</p>\n</blockquote>\n<h2>메인 스레드에서는 무거운 작업을 피하자</h2>\n<p>안드로이드에서 메인 스레드를 블로킹하지 않기 위해서 다른 스레드에게 사진을 서버에서 다운 받는 작업을 한다고 하자. 해당하는 사진은 결국 UI에서 보여주기 위해 <strong>메인 스레드에서 처리를 해줘야 할 것이다.</strong></p>\n<p>-> 이때 스레드간에 통신을 위해서는 <strong><code class=\"language-text\">Handler</code>와 <code class=\"language-text\">Looper</code></strong> 를 통해서 처리 작업을\n바꿔주어야 한다.</p>\n<hr>\n<h1>Handler &#x26; Looper</h1>\n<blockquote>\n<p>스레드가 시작 되면 스레드는 <code class=\"language-text\">Handler</code>, <code class=\"language-text\">Looper</code>, <code class=\"language-text\">MessagingQueue</code> 를 하나씩 가지고 있다. 각자의 기능은 스레드간의 통신을 위하여 사용된다.</p>\n</blockquote>\n<h2>Looper</h2>\n<p>하나의 스레드는 단 하나의 <code class=\"language-text\">Looper</code>를 가지며, 해당 <code class=\"language-text\">Looper</code>는 오직 하나의 스레드를 담당한다.</p>\n<p><code class=\"language-text\">Looper</code>의 내부에는 <code class=\"language-text\">MessageQueue</code>라는 것이 존재한다. 이름과 같이 MessageQueue는 <strong>스레드가 처리 해야할 일들이</strong>  <code class=\"language-text\">Message</code><strong>의 형태로 들어가 있는 FIFO 구조로 동작하는 친구</strong> 이다. <code class=\"language-text\">Looper</code>는 MessageQueue가 비어있으면 아무 행동을 하지 않다가 Message가 들어오면 적절한 <code class=\"language-text\">Handler</code>에게 전달하는 역할을 한다.</p>\n<blockquote>\n<p><strong>Message?</strong></p>\n<ul>\n<li><code class=\"language-text\">Message</code> 객체는 스레드가 처리하는 작업이라고 생각할 수 있다. MessageQueue 에서 이러한 작업을 넣어주거나 꺼내어 적절한 <strong>Handler</strong> 에게 전달한다.</li>\n<li>Message 객체는 <code class=\"language-text\">Message</code>와 <code class=\"language-text\">Runnable</code> 두개로 나누어 진다.</li>\n</ul>\n</blockquote>\n<p>종합적으로 <code class=\"language-text\">Looper</code>는 <strong>MessageQueue에 있는 메시지를 꺼내어 해당하는 <code class=\"language-text\">Handler</code> 에게 전달하는 역할</strong> 을 한다.</p>\n<h2>Handler</h2>\n<p><code class=\"language-text\">Handler</code> 는 이름과 비슷하게 어떠한 것을 다루는 일을 한다. 구체적으로 하는 일은 <code class=\"language-text\">Looper</code> <strong>라는 친구의 MessagingQueue에 어떠한 값을 넣거나</strong> <code class=\"language-text\">Looper</code>에서 <strong>MessagingQueue의 특정 메시지를 주면 이를 처리</strong> 한다.</p>\n<h3>1. Looper에게 메시지 전달</h3>\n<p>Looper는 <code class=\"language-text\">Message</code>와 <code class=\"language-text\">Runnable</code> 객체를 담을 수 있다.</p>\n<blockquote>\n<p><strong>sendMessage()</strong></p>\n<ul>\n<li>MessageQueue에 <code class=\"language-text\">Message</code> 객체를 담을 수 있다.</li>\n</ul>\n<p><strong>post()</strong></p>\n<ul>\n<li>post 메소드를 통하여 <code class=\"language-text\">Runnable</code> 객체를 담을 수 있다.</li>\n</ul>\n</blockquote>\n<h3>2. Looper에게서 메시지를 받음</h3>\n<p>Looper의 Message Queue에서 <code class=\"language-text\">(something)</code>을 꺼냈을때 아래와 같이 구분이 된다.</p>\n<blockquote>\n<p><strong>Message</strong></p>\n<ul>\n<li>해당 메시지의 내부에 있는 <code class=\"language-text\">Handler</code>가 가지고 있는 <code class=\"language-text\">handleMessage()</code>를 호출하여 <code class=\"language-text\">Handler</code>가 메시지를 전달 받을 수 있다.</li>\n</ul>\n<p><strong>Runnable</strong></p>\n<ul>\n<li><code class=\"language-text\">Runnable</code>의 <code class=\"language-text\">run()</code> 메소드를 통하여 작업을 실행할 수 있다.</li>\n</ul>\n</blockquote>\n<hr>\n<h1>정리해 보기</h1>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/195654013-d526bca7-1c79-495f-bc6e-8976ebc5363a.png\" width=\"50%\"></p>\n<blockquote>\n<ol>\n<li>처음 스레드를 생성을 하여 <code class=\"language-text\">(something)</code>을 처리하고 UI를 갱신하기 위해서는 <strong>메인 스레드(UI 스레드)</strong> 로 전달해야 한다.</li>\n<li>특정 스레드 <code class=\"language-text\">Handler</code>의 <code class=\"language-text\">sendMessage()</code> 또는 <code class=\"language-text\">post()</code> 메소드를 호출하여 메인 스레드의 <code class=\"language-text\">Looper</code>의 MessageQueue에 메시지를 전달한다.</li>\n<li>해당 스레드의 <code class=\"language-text\">Looper</code>가 MessageQueue에서 <code class=\"language-text\">Handler</code>에게 메시지를 하나씩 전달한다.</li>\n<li><code class=\"language-text\">Handler</code>는 <code class=\"language-text\">handleMessage()</code>를 통해 받은 메시지를 처리한다.</li>\n</ol>\n</blockquote>\n<h1>안드로이드에서 적접 보기</h1>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Other Thread</span>\n        <span class=\"token keyword\">val</span> mThread <span class=\"token operator\">=</span> Thread <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 익명 객체 구현</span>\n            <span class=\"token comment\">// 여기서 UI 작업을 수행하면 Exception 발생</span>\n        <span class=\"token punctuation\">}</span>\n        mThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>안드로이드의 UI관련한 작업은 <strong>메인 스레드</strong> 에서 동작한다고 하였다. 따라서 다른 스레드에서 UI 관련 작업을 하려고 하면 Exception이 발생한다.</p>\n<p>앞서 말한 대로 <code class=\"language-text\">Handler</code>를 통하여 <strong>메시지를 메인 스레드의 MessageQueue에 전달</strong> 해 주어야 한다.</p>\n<p>안드로이드에서는 <strong>메인 스레드</strong> 가 가지고 있는 <code class=\"language-text\">Looper</code>를 명시하는 <code class=\"language-text\">getMainLooper()</code>를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mHandler<span class=\"token operator\">:</span> Handler<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 명시적으로 메인 스레드의 Looper를 생성</span>\n        mHandler <span class=\"token operator\">=</span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>Looper<span class=\"token punctuation\">.</span><span class=\"token function\">getMainLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Other Thread</span>\n        <span class=\"token keyword\">val</span> mThread <span class=\"token operator\">=</span> Thread <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 익명 객체 구현</span>\n            <span class=\"token comment\">// 여기서 UI 작업을 수행하면 Exception 발생</span>\n            mHandler<span class=\"token operator\">!!</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// UI 작업 가능.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        mThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서브 스레드에서의 작업을 메인 스레드의 Looper의 <code class=\"language-text\">mHandler!!.post</code> 를 통하여 메인 스레드에서 UI 작업을 할 수 있다.</p>\n<h1>runOnUiThread는 그래서?</h1>\n<img src=\"https://user-images.githubusercontent.com/63226023/195632360-67bc0531-85bd-4182-943e-0889dc703619.png\">\n<p>안드로이드 <code class=\"language-text\">runOnUiThread</code>는 <code class=\"language-text\">Activity</code> 클래스에서 제공되는 메소드이다. Android developer에서는 <code class=\"language-text\">Runnable</code> 객체를 메인 스레드에서 실행하도록 만드는 메소드로 <strong>현재 스레드가 메인 스레드이면 <code class=\"language-text\">Runnable</code> 객체의 <code class=\"language-text\">run()</code> 메소드를 직접 실행</strong> 을 하고 아니라면 <code class=\"language-text\">Handler</code>에게 <code class=\"language-text\">post()</code> 메소드를 통하여 메인 스레드로 이벤트 큐를 발송한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> mUiThread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 <code class=\"language-text\">runOnUiThread()</code>를 사용하면 메인 스레드가 아닐때만 <code class=\"language-text\">Handler</code>는 <code class=\"language-text\">post()</code>를 통하여 이벤트를 발생시키기 때문에 좀 더 효율적이라고 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Other Thread</span>\n        <span class=\"token keyword\">val</span> mThread <span class=\"token operator\">=</span> Thread <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 익명 객체 구현</span>\n            <span class=\"token comment\">// 여기서 UI 작업을 수행하면 Exception 발생</span>\n            runOnUiThread <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// UI 작업 가능.</span>\n                <span class=\"token comment\">// UI 스레드가 아니라면 내부적으로 handler.post() 호출</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        mThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://hungseong.tistory.com/26\">https://hungseong.tistory.com/26</a></li>\n</ul>","frontmatter":{"title":"안드로이드 runOnUiThread?","date":"October 16, 2022","update":"October 16, 2022","tags":["Android","Thread","runOnUiThread"],"series":"Android"},"fields":{"slug":"/runOnUiThread/","readingTime":{"minutes":7.99}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}},"next":{"fields":{"slug":"/hello-2023/"},"frontmatter":{"title":"2022 회고지만 새해가 밝은..?"}}},"pageContext":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","series":"Android","previousPostId":"b3372752-9e81-5642-ae8e-179f5c6bc152","nextPostId":"ca4a471c-90d3-5730-993f-fb4e1d812737"}},"staticQueryHashes":[],"slicesMap":{}}