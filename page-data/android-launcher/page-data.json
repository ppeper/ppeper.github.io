{"componentChunkName":"component---src-templates-post-jsx","path":"/android-launcher/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","excerpt":"기존의 startActivityForResult 안드로이드에서 일반적으로 Activity를 전환하기 위해서는 startActivity() 를 사용하지만 화면 전환 이후에 해당 Activity에서의 결과값을 전달 받기 위해서는 startActivityForResult() 과 onActivityResult() 를 사용 하였다. // 결과를 받는 FromAct…","html":"<h1>기존의 startActivityForResult</h1>\n<p>안드로이드에서 일반적으로 Activity를 전환하기 위해서는 <strong>startActivity()</strong> 를 사용하지만 화면 전환 이후에 해당 Activity에서의 결과값을 전달 받기 위해서는 <strong>startActivityForResult()</strong> 과 <strong>onActivityResult()</strong> 를 사용 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 두 번째 인자인 requestCode는 어떤 Activity인지 식별해주는 값</span>\n<span class=\"token function\">startActivityForResult</span><span class=\"token punctuation\">(</span><span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@FromActivity</span><span class=\"token punctuation\">,</span> ToActivity<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>setResult()</h4>\n해당하는 ToActivity의 종료 시점에 작성하여 Activity가 종료되면 해당 메서드를 통해 호출한 Activity에 데이터를 되돌려 줄 수 있다.\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 호출당한 ToActivity</span>\n<span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nintent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"result\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"some data\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span>RESULT_OK<span class=\"token punctuation\">,</span> intent<span class=\"token punctuation\">)</span>\n<span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>onActivityResult()</h4>\n```kotlin\n<p>// 결과를 받는 FromActivity\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\nsuper.onActivityResult(requestCode, resultCode, data)\nif (requestCode == 101) {\nif (resultCode == Activity.RESULT_OK) {\nval result = data?.getStringExtra(\"result\")\n...\n}\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 새로운 API\n\n&lt;img src=\"https://user-images.githubusercontent.com/63226023/223721056-cb480e59-aa90-4b29-a149-633276f74475.png\">\n\n해당하는 startActivityForResult API는 2020년 5월에 deprecated 되었다고 한다. 구글에서는 새로운 AndroidX Activity와 Fragment에 도입된 __Activity Result API__ 사용을 적극 권장한다.\n\n&lt;h4>deprecated 된 이유와 새로운 API&lt;/h4>\n안드로이드에서 메모리 부족으로 인해 프로세스와 Activity가 사라질 수 있다. 기존의 방식은 같은 곳에서 `startActivityForResult`와 `onActivityResult`에서 콜백을 처리해야 했다. \n\n만약 Activity가 종료되고 다시 만들어 진다면 Activity에게 Result를 기다린다고 다시 알려주어야 한다. 따라서 호출과 콜백을 따로 분리해서 만들어 주어야 하는데 이에 대한 역할을 해주는 것이 __ActivityResultLauncher__ 이다.\n\n`registActivityForResult()` 메소드는 ActivityResultContract 및 ActivityResultCallback 을 가져와서 다른 활동을 실행하는 데 사용할 ActivityResultLauncher를 반환해 준다.\n\nregistActivityForResult()는 콜백을 등록해 주는 역할을 해주어 Activity가 종료되었다가 다시 생성이 되어도 결과를 기다리고 있다고 알려줄 수 있다.\n\n> 기존의 방식 \n> - A -> B를 호출하다 A가 종료된다.\n> - B에서는 setResult()로 결과값을 반환한다.\n> - 다시 돌아와서 보니 A가 종료 되었다가 다시 생성되어 결과값을 요청한지 모름\n>\n> 새로운 API\n> - A -> B를 호출하다 A가 종료된다.\n> - B에서는 setResult()로 결과값을 반환한다.\n> - A가 다시 생성되도 registForActivityResult() 메소드가 다시 콜백을 등록해 주기 떄문에 결과값을 받아 올 수 있다.\n\n```kotlin\n// 호출하는 부분 기존\nstartActivityForResult(Intent(this@FromActivity, ToActivity.class.java), 101)\n// 새로운 API -> launch() 로 시작\nresult.launch(Intent(this@FromActivity, ToActivity::class.java))\n\n// Contract 및 결과를 받기 위한 Callback 등록 \nprivate val result = registerForActivityResult(\n    ActivityResultContracts.StartActivityForResult()) {\n    if (it.resultCode == Activity.RESULT_OK) {\n        val intent = it.data\n        val data = intent?.getStringExtra(\"result\")\n        ...\n    }\n}</code></pre></div>\n<p>기존에서와 다르게 result라는 <strong>ActivityResultLauncher</strong> 를 생성하여 콜백을 등록한다. 함수의 첫 번째 인자인 Contract는 현재 결과를 받을 Activity를 실행하는 함수인 <code class=\"language-text\">ActivityResultContracts.StartActivityForResult()</code>를 등록한다. launch()를 통하여 이동한 Activity에서는 동일하게 <strong>setResult()</strong> 함수를 그대로 사용하면 된다.</p>\n<blockquote>\n<p>📍requestCode가 필요없는 이유</p>\n<ul>\n<li>원하는 Activity의 요청 마다 registForAcitivtyResult를 실행하여 콜백을 분리하였기 때문에 기존처럼 Acitivity를 구분할 필요가 없어졌다.</li>\n</ul>\n</blockquote>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/training/basics/intents/result?hl=ko\">https://developer.android.com/training/basics/intents/result?hl=ko</a></li>\n</ul>","frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달","date":"February 27, 2023","update":"February 27, 2023","tags":["Android","registForActivityResult"],"series":"Android"},"fields":{"slug":"/android-launcher/","readingTime":{"minutes":4.025}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/springboot/"},"frontmatter":{"title":"스프링을 편하게 스프링 부트를 사용해보자"}},"next":{"fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},"pageContext":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","series":"Android","previousPostId":"25066a66-4883-50a8-9ab2-c92296bdba0e","nextPostId":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22"}},"staticQueryHashes":[],"slicesMap":{}}