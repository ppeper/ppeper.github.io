{"componentChunkName":"component---src-templates-series-jsx","path":"/series/Android/","result":{"data":{"posts":{"nodes":[{"excerpt":"지난 안드로이드에 대한 회고 처음 안드로이드 공부를 시작을 한것은 7월 여름방학이였다. 1학기가 끝나가는 6월달 말에 동기를 통하여 공개SW 개발자대회라는 좋은 기회가 있다는 소식을 들었다. 평소에 어느정도 개념을 알고 진행되는 프로젝트만 했기 때문에 처음부터 끝까지 한번도 경험하지못한 안드로이드라는 모바일 플랫폼쪽을 공부를 하며  개발한다는것에 대한 해…","fields":{"slug":"/android-start/"},"frontmatter":{"date":"December 28, 2021","update":"Dec 28, 2021","title":"첫 안드로이드 개발에 대한 회고","tags":["Android","Blog"]}},{"excerpt":"안드로이드 Lifecycle? 안드로이드를 처음 공부를 하였을때 가장 놀랐던것이 앱이 회전이 되었을때도 앱을 다시 처음부터 그려준다는것이였다. 사용자들이 어플을 쓰게되면 한 화면에서 여러가지 이벤트가 발생할 수 있다(ex. 사용자가 정보를 입력, 게임을 하던도중 전화가 옴..) 정보를 입력하다가 화면이 회전되었음 -> 많은 정보가 사라진다면? 게임을 하던…","fields":{"slug":"/lifecycle/"},"frontmatter":{"date":"January 01, 2022","update":"Jan 01, 2022","title":"안드로이드 Lifecycle 제대로 알기","tags":["Android","Lifecycle"]}},{"excerpt":"프래그먼트란? 프래그먼트는 대표적으로 큰 화면은 가진 태블릿과 같은 기기에서 보다 역동적이고 유연한 UI 디자인을 지원하는 것이 목적이다.  image 이러한 큰화면에서 하나의 액티비티를 통한 레이아웃을 구성하기엔 구현하기도 버겁고 유지보수에도 좋지 않을것이다. 이러한 버거움을 해결하고자 나온것이 프래그먼트이다. 프래그먼트는 액티비티 내부에서 독립적으로 …","fields":{"slug":"/fragment/"},"frontmatter":{"date":"January 03, 2022","update":"Jan 03, 2022","title":"안드로이드 Fragment 사용","tags":["Android","Fragment"]}},{"excerpt":"Intent?? 인텐트는 하나의 액티비티가 다른 액티비티를 시작할 수 있는 메시징 시스템이며, 이때  클래스 인스턴스를 사용한다. 액티비티가 안드로이드 런타임에 인텐트를 요청하면 해당 인텐트에 부합되는 액티비티를 안드로이드 런타임이 찾아서 시작한다. Intent 유형 인텐트의 유형에는  인텐트와  인텐트가 있다. 명시적 인텐트 : 클래스 이름으로 액티비티…","fields":{"slug":"/intent/"},"frontmatter":{"date":"January 09, 2022","update":"Jan 09, 2022","title":"안드로이드 인텐트의 개념","tags":["Android","Intent"]}},{"excerpt":"image 안드로이드 4대 컴포넌트 안드로이드 공부를 시작하면 \"안드로이드 4대 컴포넌트\" 라는 말을 많이 봤을 것이다.  4대 컴포넌트는 안드로이드의 대표적인 구성으로 \"액티비티\", \"브로드캐스트\", \"서비스\", \"콘텐트 제공자\" 가 있다. 이 주요 컴포넌트들은 안드로이드에서 를 사용하여 상호작용 할 수 있다. (안드로이드 Intent) 인텐트를 이용하…","fields":{"slug":"/recyclerview/"},"frontmatter":{"date":"January 17, 2022","update":"Jan 17, 2022","title":"안드로이드 4대 컴포넌트란","tags":["Android","Component"]}},{"excerpt":"Context?? 안드로이드 개발시 의 사용은 거의 모든 곳에서 사용되며 필자 또한 당연하게 생각하고 사용하였다.  를 자세하게 알고 사용하지 못하면 안드로이드 어플리케이션 개발시 메모리 누수가 쉽게 발생할 수 있다고 하여 제대로 정리를 하려고 한다. 안드로이드에서 Context(문맥, 맥락)는 현재 사용되고 있는 앱에 대한 전역 환경 정보 라고 한다. …","fields":{"slug":"/android-context/"},"frontmatter":{"date":"January 17, 2022","update":"Jan 17, 2022","title":"안드로이드 Context의 개념","tags":["Android","Context"]}},{"excerpt":"브로드캐스트(Broadcast) 앱의 액티비티를 시작시키는 메커니즘을 제공하는 것과 더불어 인텐트는 시스템의 다른 컴포넌트에 시스템 차원의 메시지를 전파하는 방법으로 사용될 수 있다. 예를 들어 안드로이드 시스템은 부팅이나 배터리가 부족할때와 같은 시스템 이벤트가 발생하면 브로드캐스트 를 전송한다.  브로드캐스트(방송)를 보낸다고 하면 어떠한 정의된 방법…","fields":{"slug":"/broadcast/"},"frontmatter":{"date":"January 20, 2022","update":"Jan 20, 2022","title":"안드로이드 브로드캐스트(Broadcast)","tags":["Android","Broadcast"]}},{"excerpt":"서비스(Service) 안드로이드 Service 클래스는 앱이 백그라운드 작업을 시작시켜 수행할 수 있게 특별히 설계되었다. 작업을 빨리 수행하고 종료하는 브로드캐스트 수신자와는 다르게, 서비스는 실행 시간이 길면서 사용자 인터페이스를 필요로 하지 않는 작업을 수행 한다. (예시: 음악을 스트리밍을 하거나, 다른앱을 사용하면서 전화를 한다.) 서\n비스는 …","fields":{"slug":"/android-service/"},"frontmatter":{"date":"January 24, 2022","update":"Jan 24, 2022","title":"안드로이드 서비스(Service) 개요","tags":["Android","Service"]}},{"excerpt":"안드로이드의 개념을 다시 한번 보면서 Notification(알림)을 처음으로 공부해 보았다. 알림 구현에서 를 사용하라고 하여 사용했지만 명확한 개념을 알려주지 않고 넘어가 와 가 무엇이 다른지 궁금하여 정리해 보았다. PendingIntent 안드로이드 developer에서 PendingIntent는 다른 응용 프로그램(프로세스)이 동일한 권한 및 I…","fields":{"slug":"/pendingintent/"},"frontmatter":{"date":"January 25, 2022","update":"Jan 25, 2022","title":"안드로이드 PendingIntent의 개념","tags":["Android","PendingIntent"]}},{"excerpt":"안드로이드의 첫 개발을 진행하면서 채팅기능을 만들어 보면서 푸시알림의 기능을 넣지 못했던것이 많이 생각났다.(공모전에 대한 회고도 조만간 작성해야겠다😢) 따라서 이번 포스팅은 알림에 대해서 정리해 보려고 한다. 알림(Notification) 알림에는 로컬 알림과 원격 알림(푸시 알림)이 있다. 은 장치에서 실행 중인 앱에서 생성되며 은 원격 서버에서 생성…","fields":{"slug":"/notification/"},"frontmatter":{"date":"January 27, 2022","update":"Jan 27, 2022","title":"안드로이드 알림(Notification) 만들기","tags":["Android","Notification"]}},{"excerpt":"안드로이드 Jetpack은 2018년도에 릴리스가 되어 많은 시간이 지났지만 공부하기전에 이해하기 쉽게 정리를 하고가는것은 공부하는데 매우 효과적이라고 생각하여 조금 늦었지만 Jetpack에 대해서 정리해 보려고 한다.(나를 위한 포스팅😅) 안드로이드 JetPack이란 안드로이드 Jetpack은 개발자가 고품질 앱을 손쉽게 개발할 수 있도록 지원하는 라이…","fields":{"slug":"/android-jetpack/"},"frontmatter":{"date":"January 28, 2022","update":"Jan 28, 2022","title":"안드로이드 Jetpack에 대해","tags":["Android","Jetpack"]}},{"excerpt":"안드로이드 앱 개발을 시작하면 Activity에 거의 모든 동작하는 코드 를 직접 넣는다. 이렇게 모든 코드를 넣다보면 구조화된 코드의 작성이 없게되고 추후에 유지 보수 가 어려워진다. 처음 안드로이드 프로젝트를 진행하면서 기능을 바꾸거나 추가할 때 어느 부분을 수정해야하는지 굉장히 난해했던 경험이 있었고 자연스럽게 디자인 패턴을 공부를 하고 적용을 해봐…","fields":{"slug":"/android-acc/"},"frontmatter":{"date":"January 29, 2022","update":"Jan 29, 2022","title":"안드로이드 MVVM 패턴과 ACC 알아보기","tags":["Android","MVVM","ACC"]}},{"excerpt":"이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 에 대해서 알게된 내용을 정리하려고 한다.😀 ViewModel에 대해 ViewModel 클래스는 UI 관련 데이터만을 저장하고 관리하도록 설계되어 있어 View(Activity/Fragment)의 UI 컨트롤러의 과도한 책임을 분담하여 코드가 복잡해지고 거대해지는것 을 방지하고 화면 회전등을…","fields":{"slug":"/viewmodel/"},"frontmatter":{"date":"January 30, 2022","update":"Jan 30, 2022","title":"안드로이드 Jetpack의 ViewModel 사용해보기","tags":["Android","ViewModel","ACC"]}},{"excerpt":"이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 에 대해서 알게된 내용을 정리하려고 한다.😀\nViewModel을 사용하여 간단한 화폐 변환을 하는 예제에 LiveData 를 추가하여 좀 더 개선해 보려고 한다. LiveData 핵심 요약 LiveData 는 관찰 가능한(obserable) 데이터 홀더 클래스 이다. LiveData 의 인스…","fields":{"slug":"/livedata/"},"frontmatter":{"date":"January 31, 2022","update":"Jan 31, 2022","title":"안드로이드 Jetpack의 LiveData 적용하기","tags":["Android","LiveData","ACC"]}},{"excerpt":"이전의 포스팅은 를 추가하였었다.😀\n안드로이드 Jetpack의 LiveData 적용하기 이번에는 ACC 구성요소의 DataBinding 을 LiveData와 함께 사용하여 프로젝트를 더 개선된 형태로 만들어 보려고 한다. DataBinding(데이터 바인딩) 데이터 바인딩 의 주목적은 UI 레이아웃의 뷰(xml)와 앱 코드에 저장된 데이터(주요사용->Vi…","fields":{"slug":"/databinding/"},"frontmatter":{"date":"February 02, 2022","update":"Feb 02, 2022","title":"안드로이드 DataBinding + LiveData 적용하기","tags":["Android","DataBinding","ACC"]}},{"excerpt":"코루틴 개요 스레드와 코루틴을 알아보면서 코루틴에 대한 개념을 알아보았었다. 스레드와 코루틴은 둘다 동시성을 보장  관점에서 보면 비슷한 개념이라고 생각이 든다. 코투린은 실행되다가 일시 정지(예: 일정 시간 대기) 할 때 코틀린 런타임에 의해 자신이 실행되던 스레드가 다른 코루틴 에 할당된다. 이번 포스팅을 통해 코루틴의 구현에 필요한 요소 들을 살펴보…","fields":{"slug":"/coroutine/"},"frontmatter":{"date":"February 14, 2022","update":"Feb 14, 2022","title":"안드로이드 코루틴의 기초 알아보기","tags":["Android","Kotlin","Coroutine","비동기"]}},{"excerpt":"Room Room은 안드로이드 앱 내부에서 데이터를 저장 하기 위한 jetpack 라이브러리이다. Room은 데이터베이스의 데이터(객체)를 자바나 코틀린 객체로 매핑해주는 ORM 라이브러리 이다. 📍ORM(Object Relational Mapping) : 객체-관계 매핑의 줄인말로 객체와 관계형 데이터베이스의 데이터 를 자동으로 매핑(연결) 해주는 것을…","fields":{"slug":"/room-database/"},"frontmatter":{"date":"March 04, 2022","update":"Mar 04, 2022","title":"안드로이드 Room 사용하면서 알아보기","tags":["Android","Room"]}},{"excerpt":"Dagger Dagger는 의존성 주입(DI)을 도와주는 프레임워크이다. 의존성 주입(DI)에 대해서 전 포스팅에서 알아보았다. Dagger를 사용하여 의존성 주입을 자동화하도록 지원하여 코드 작성에 편의성을 제공한다. 전 포스팅에서 만들어 보았던 스마트폰 예시에 Dagger를 적용해 보려고 한다. 시작하기 build.gradle 프로젝트에 Dagger를…","fields":{"slug":"/android-dagger2/"},"frontmatter":{"date":"March 31, 2022","update":"Mar 31, 2022","title":"안드로이드 Dagger2 맛보기","tags":["Android","Dagger"]}},{"excerpt":"Custom Application 저번 포스팅에서 Dagger의 Inject, Module, Component에 대해서 알아보고 SmartPhone 클래스에 적용시켜 보았다. 불변하는 데이터나 전역으로 사용되는 object 같은 경우 모든 Component 에 공유가 되어 사용되야 할 것이다 (ex) Room Database, SharedPreferenc…","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"date":"April 08, 2022","update":"Apr 08, 2022","title":"안드로이드 Dagger2 좀 더 알아가기","tags":["Android","Dagger"]}},{"excerpt":"Hilt Hilt란 Google의 Dagger2를 기본으로 만든 의존성 주입 라이브러리이다. 따라서 Dagger2에 대한 Component, Scope를 기본적을 제공하며, 초기 프로젝트 환경 구축 비용을 크게 줄이는 것이 목적이 있다. Hilt에 대해 알아보기 전에 Dagger2를 사용하여 의존성 주입을 사용한 간단한 예시를 구성해 보면 다음과 같다. …","fields":{"slug":"/android-hilt/"},"frontmatter":{"date":"April 10, 2022","update":"Apr 10, 2022","title":"안드로이드 Hilt에 대해 알아보기","tags":["Android","Hilt"]}},{"excerpt":"Repository 이전의 포스팅에서 안드로이드 MVVM 디자인 패턴에 대해서 알아보면서 아주 잠깐 Repository의 개념 대해서 알아보았다. 이번에 새로운 프로젝트에 Repository를 적용하면서 공부하였던 내용들을 정리해 보려고 한다. 단어의 의미보면 파악할 수 있듯이 Repository는 필요한 데이터들을 저장하고 있는 저장소라고 생각하면 된다…","fields":{"slug":"/repository-pattern/"},"frontmatter":{"date":"April 19, 2022","update":"Apr 19, 2022","title":"안드로이드 Repository 패턴은 무엇인가","tags":["Android","MVVM","Repository Pattern"]}},{"excerpt":"로컬 저장 지금까지 안드로이드 로컬에 간단한 데이터를 저장하기 위해 를 사용하였다. 구글에서는 DataStore 의 사용을 적극 권장하고 있고 (SharedPreferences는 구글 공식 문서에서도 사용가이드가 사라졌다..😨) Datastore를 사용하면 어떤 좋은점들이 있어서 사용을 이렇게 권고하는 것인가? Datastore를 하나씩 알아가 보자! 🚀…","fields":{"slug":"/datastore/"},"frontmatter":{"date":"June 16, 2022","update":"Jun 16, 2022","title":"새로운 동료 DataStore 알아보기","tags":["Datastore","Local Data","jetpack"]}},{"excerpt":"DiffUtil 넌 뭐니 안드로이드를 공부하거나 개발하다보면 대부분 리스트를 보여주기 위하여  의 사용을 하게되고, 리스트의 데이터가 변하게 되면  를 호출하여 리사이클러뷰를 갱신하였다. 이는 바뀐 데이터가 적더라도 간혹 를 호출하여 갱신하기도 하는데 이는 앱 성능에 굉장히 악영향 을 미치게된다. (난가..😅)  를 호출하게 되면 리스트의 모든 데이터를 …","fields":{"slug":"/android-diffutil/"},"frontmatter":{"date":"September 01, 2022","update":"Sep 01, 2022","title":"안드로이드 RecyclerView의 DiffUtil 알아보기","tags":["Android","DiffUtil","RecyclerView"]}},{"excerpt":"🚀 ViewPager2 안드로이드 어플을 개발을 하다보면 RecyclerView를 통하여 데이터 목록을 보여주는 경우가 많다. 안드로이드에서 데이터의 목록이 아니라 Pager 형식의 ViewHolder를 구현하려면 를 사용을 해야한다. ViewPager와 ViewPager2 ViewPager2는 AndroidX가 발표된 이후에 새롭게 나온 ViewPage…","fields":{"slug":"/viewpager2/"},"frontmatter":{"date":"September 17, 2022","update":"Sep 17, 2022","title":"안드로이드 ViewPager2 사용기","tags":["Android","ViewPager2"]}},{"excerpt":"안드로이드 Thread 안드로이드에서는 Main Thread와 Sub Thread가 동시에 자원에 접근하여 생기는 동기화 이슈를 발생 할 수 있기 때문에 메인 스레드(UI 스레드) 에서만 뷰의 값을 바꿀 수 있는 싱글 스레드로 동작 한다. -> 위와 같이 멀티 스레드 환경에서 동시에 스레드가 UI를 갱신을 하여고 한다면 가 어떠한 값으로 변경될지 알 수 …","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"date":"October 16, 2022","update":"Oct 16, 2022","title":"안드로이드 runOnUiThread?","tags":["Android","Thread","runOnUiThread"]}},{"excerpt":"기존의 startActivityForResult 안드로이드에서 일반적으로 Activity를 전환하기 위해서는 startActivity() 를 사용하지만 화면 전환 이후에 해당 Activity에서의 결과값을 전달 받기 위해서는 startActivityForResult() 과 onActivityResult() 를 사용 하였다. // 결과를 받는 FromAct…","fields":{"slug":"/android-launcher/"},"frontmatter":{"date":"February 27, 2023","update":"Feb 27, 2023","title":"안드로이드에서 Launcher를 통한 결과 전달","tags":["Android","registForActivityResult"]}},{"excerpt":"안드로이드 Menu 안드로이드에서는 다양한 Menu들을 제공하여 편하게 옵션들을 보여줄 수 있다. 최근에는 사용자 경험이 바뀌어 Menu들을 통하여 옵션 세트들을 보여주는 방식이 변경이 되었지만 기본이 되는 Menu들의 각 차이점과 사용법을 알아 보려고 한다. 안드로이드에서 Menu는 크게 , , 로 구현할 수 있다. Menu 안드로이드에서 Menu를 X…","fields":{"slug":"/android-menu/"},"frontmatter":{"date":"March 10, 2023","update":"Mar 10, 2023","title":"안드로이드 다양한 Menu들 사용하기","tags":["Android","Menu"]}},{"excerpt":"Android Permission 안드로이드에서는 특정한 앱을 실행하기 위해서는 권한이 필요하다. 안드로이드 마시멜로 버전(API 23) 이전에는 앱 설치시 모든 권한이 요청되었지만 이후에는 일반 권한, 위험 권한 으로 나눠게 되었다. 따라서 API 23 이후 버전의 기기에서는 위험 권한은 기능이 동작할 때 사용자가 직접 권한을 허락하도록 런타임에 권한을…","fields":{"slug":"/android-permission/"},"frontmatter":{"date":"March 24, 2023","update":"Mar 24, 2023","title":"안드로이드 Permission 가져오기","tags":["Android","Permission"]}},{"excerpt":"안드로이드 앱 내부에 데이터를 저장하게 되면 Jetpack 라이브러리에 있는 Room을 사용하게 된다.  처음 안드로이드 개발을 할 시 Room에 대한 학습을 통해 SQLite를 내부적으로 사용을 하고 있다는 것을 알았지만 직접적으로 SQLite를 사용해보지 않아 이번에 SQLite를 직접 사용해 보려고 한다. SQLite SQLite를 사용하면 Loca…","fields":{"slug":"/android-sqlite/"},"frontmatter":{"date":"March 24, 2023","update":"Mar 24, 2023","title":"안드로이드 내부 데이터 저장 SQLite","tags":["Android","SQLite"]}},{"excerpt":"안드로이드의 4대 컴포넌트중에 하나인 Service의 구성은 과거에 한번 나누어 본적이 있다.  안드로이드에서 Activity/Fragment는 많이 사용하지만 실제로 Service를 사용을 하지 않아 이번에 서비스에 대한 예시로 Local  Service 의 동작 과정을 보려고 한다. Bind Service 안드로이드에서 바운드 서비스는 와는 달리 하나…","fields":{"slug":"/android-local-service/"},"frontmatter":{"date":"April 10, 2023","update":"Apr 10, 2023","title":"안드로이드 Local Service 알아보기","tags":["Android","Service"]}},{"excerpt":"안드로이드에서 UI 화면을 태블릿과 같은 큰 화면에서 역동적이고 유연한 디자인을 하기 위하여 Fragment가 나오게 되었다. Fragment는 Activity와 마찬가지로 자체적인 생명주기를 가지지만 Activity의 생명주기에 영향을 받기 때문에 좀 더 신경쓰고 조심해야 하는 부분들이 많다. 처음 적용하고 공부하였을 때 신경쓰지 못하였던 Fragmen…","fields":{"slug":"/android-fragment/"},"frontmatter":{"date":"April 12, 2023","update":"Apr 12, 2023","title":"안드로이드 Fragment 조각내기","tags":["Android","FragmentTransaction","Fragment"]}},{"excerpt":"안드로이드에서 LiveData를 데이터를 저장하고 변화를 관찰 할 수 있는 객체이다.이번에는 LiveData를 조금 더 유연하게 사용하는 방법에 대해 몰랐던 내용을 알아보려고 한다. MediatorLiveData 지금까지 하나의 LiveData는 Observer 인터페이스를 구현하는 객체를 생성하여 LiveData 값이 변경될 때 호출되는  메소드를 통해…","fields":{"slug":"/livedata-transform/"},"frontmatter":{"date":"May 02, 2023","update":"May 02, 2023","title":"안드로이드 MediatorLiveData와 Transformations","tags":["MediatorLiveData","Transformations","LiveData"]}},{"excerpt":"SAA (Single Activity Architecture) SAA는 Google IO 2018에 소개된 개념으로 하나 혹은 적은 수의 Activity로 애플리케이션을 개발하는 것을 말한다. Fragment에 비해 상대적으로 무거운 Activity의 사용을 자제하고, Navigation 을 사용하여 한 눈에 앱의 흐름을 보여주고 유연한 화면 구성을 할 …","fields":{"slug":"/android-navigation/"},"frontmatter":{"date":"July 01, 2023","update":"Jul 01, 2023","title":"안드로이드 Navigation 사용하기","tags":["MediatorLiveData","Navigation","SafeArgs"]}},{"excerpt":"최근에 Compose를 적용하여 프로젝트를 진행하면서 하나씩 만들어 보았는데 해당 내용들을 정리해 보려고 한다. Compose Compose는 Kotlin언어를 사용하여  방식으로 UI를 그리는 방식으로 기존의 xml의 방식과는 차이가 있다. Compose를 사용하면 아래와 같은 장점이 있다. 코드 감소 Kotlin, xml로 나눠서 개발하는 것이 아닌 …","fields":{"slug":"/compose-start/"},"frontmatter":{"date":"August 21, 2023","update":"Aug 21, 2023","title":"안드로이드 Compose 알아보기","tags":["Android","Compose"]}},{"excerpt":"컴포지션(Composition) Jetpack Compose는 처음 컴포저블을 실행할때 생성되는 것으로 일종의 트리 구조로 되어 있다. 컴포지션에서 UI를 그리기 위해 호출한 한다.  컴포지션은 초기 컴포지션을 통해서만 생성 되고 리컴포지션을 통해서만 업데이트될 수 있다. 따라서 컴포지션을 수정하는 유일한 방법은 리컴포지션을 통하는 것이다. 📍 컴포저블의…","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"date":"August 22, 2023","update":"Aug 22, 2023","title":"안드로이드 Compose 수명 주기","tags":["Android","Compose","State"]}},{"excerpt":"Stateful vs Stateless Compose에서는 의 상태를 트리거하여 리컴포지션을 통해 화면을 갱신한다. 여기서 remember와 mutableStateOf를 써서 객체를 저장하는 컴포저블은 내부 상태를 생성해서 컴포저블을 Stateful 로 만든다. Stateless Composable은 상태를 가지지 않는 컴포저블 이다. Stateless가…","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"date":"August 23, 2023","update":"Aug 23, 2023","title":"안드로이드 Compose 상태 호이스팅","tags":["Android","Compose","State Hoisting"]}},{"excerpt":"Side Effect Sife Effect(부수 효과)는 컴포지블 외부에서 발생하는 앱의 상태 변경사항을 말한다. Compose에서는 Side Effect를 처리하기 위해 아래의 동작을 실행할 수 있는 를 사용할 수 있다. LaunchedEffect LaunchedEffect: 컴포저블에서 suspend fun을 실행하기 위해 사용된다. 컴포저블에서 시작…","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"date":"August 25, 2023","update":"Aug 25, 2023","title":"안드로이드 Side Effect란?","tags":["Android","Compose","Side Effect"]}},{"excerpt":"안드로이드에서는 gradle 파일을 통하여 버전관리를 하고 있다. 프로젝트를 진행하면서 같은 implement를 해야하는 라이브러리들을 관리를 하지 못하여 유지보수에 좋지 못하다는 점에 있어서 공통된 파일로 관리하면 좋겠다는 생각이 들었다. 이번에 Gradle 7.0에서 추가된 가 있다는 것을 알게되어 이를 통하여 간편하게 버전관리를 하는 방법을 공부하고…","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"date":"October 30, 2023","update":"Oct 30, 2023","title":"안드로이드 Version Catalog 도입하기","tags":["Android","Version Catalog"]}},{"excerpt":"WebView 모바일 앱을 사용하다 보면 웹으로 리다이렉트 하거나 웹 페이지를 보여주는 화면들을 많이 볼 수 있다. 앱에서 웹페이지를 보여줄 수 있는 웹뷰를 사용하기 위해서는 안드로이드에서 WebView 를 사용하여 여러가지 옵션을 설정하고 웹 페이지와 상호작용 할 수 있다. 기본적으로 WebView를 사용하기 위해서는 안드로이드에서 Internet 퍼미…","fields":{"slug":"/android-webview/"},"frontmatter":{"date":"November 20, 2023","update":"Nov 20, 2023","title":"안드로이드 WebView로 웹과 놀기","tags":["Android","Webview"]}},{"excerpt":"안드로이드에서는 Material Design을 사용하여 컬러를 적용하여 라이트, 다크모드를 지원하는 앱을 만들 수 있게 해주고 있습니다. 하지만 Material의 지정된 테마가 한정적이고, 디자이너가 만든 색상의 네임을 사용해야 하는 경우에는 사용자 지정 테마를 만들어야 합니다. 이번에 Compose에서 사용자 지정 테마를 적용하는 방법을 하나씩 살펴보도…","fields":{"slug":"/compose-theme/"},"frontmatter":{"date":"April 26, 2024","update":"Apr 26, 2024","title":"Compose 나만의 Custom Theme 설정하기","tags":["Android","Compose"]}},{"excerpt":"사이드 프로젝트 중 스쿼클 모양을 디자인에 구현해야 하는 상황이 생겨, Compose의 Custom View를 활용하여 해당 화면을 구현하며 학습한 내용을 정리하고자 합니다. 스쿼클? 스쿼클은 정사각형과 원의 중간 형태로, 과 의 합성어이다. 위의 이미지에서 볼 수 있듯이, 일반적인 라운드 처리된 사각형과 비교하면 더 부드러운 곡률로 연결된 것을 알 수 …","fields":{"slug":"/compose-bezier/"},"frontmatter":{"date":"January 07, 2025","update":"Jan 07, 2025","title":"Compose에서 Bezier 곡선으로 스쿼클 만들기","tags":["Android","Compose","Canvas"]}},{"excerpt":"모바일 개발을 진행하다 보면 이미지, 동영상과 같이 파일을 업로드 하는 경우가 생기기 마련이다. 이때  라는 개념을 처음 접하게 된다. 이전에 안드로이드 네트워크 라이브러리로 Retrofit을 사용했던 경험을 토대로 Multiplarform에서 사용가능한 Ktor에서 사용하는 방법을 보려고 한다. (근데 Ktrofit을 곁들인 👏🏼) Multipart 모바…","fields":{"slug":"/multipart/"},"frontmatter":{"date":"March 20, 2025","update":"Mar 20, 2025","title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인","tags":["Android","Compose","Multipart","Ktor"]}}]}},"pageContext":{"series":"Android"}},"staticQueryHashes":[],"slicesMap":{}}