{"componentChunkName":"component---src-templates-post-jsx","path":"/compose-lifecycle/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","excerpt":"컴포지션(Composition) Jetpack Compose는 처음 컴포저블을 실행할때 생성되는 것으로 일종의 트리 구조로 되어 있다. 컴포지션에서 UI를 그리기 위해 호출한 한다.  컴포지션은 초기 컴포지션을 통해서만 생성 되고 리컴포지션을 통해서만 업데이트될 수 있다. 따라서 컴포지션을 수정하는 유일한 방법은 리컴포지션을 통하는 것이다. 📍 컴포저블의…","html":"<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/3ee7a814-cc90-42ba-9411-6a20ff29c970\">\n<h1>컴포지션(Composition)</h1>\n<p>Jetpack Compose는 처음 컴포저블을 실행할때 생성되는 것으로 일종의 트리 구조로 되어 있다. 컴포지션에서 UI를 그리기 위해 호출한 <code class=\"language-text\">컴포저블을 추적</code>한다. </p>\n<p>컴포지션은 초기 컴포지션을 통해서만 생성 되고 리컴포지션을 통해서만 업데이트될 수 있다. 따라서 컴포지션을 수정하는 유일한 방법은 리컴포지션을 통하는 것이다.</p>\n<blockquote>\n<p>📍 컴포저블의 수명주기는 <strong>1. 컴포지션 시작</strong>, <strong>2. 0회 이상 리컴포지션</strong>, <strong>3. 컴포지션 종료 이벤트</strong> 로 정의된다.\n안드로이드에서 Compose에서는 <code class=\"language-text\">State</code>를 통해서 관리를 한다.  </p>\n</blockquote>\n<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/c237ff4e-ead6-49ae-a8e8-11f5c2c36b9e\">\n<hr>\n<h1>State</h1>\n<p>리컴포지션은 일반적으로 <code class=\"language-text\">State&lt;T></code>가 변경되면 트리게 된다. 즉 Compose에서는 앱의 상태가 변경되면 Jetpack Compose는 <code class=\"language-text\">리컴포지션</code>을 예약하고 변경 되어야 할 UI를 반영하도록 컴포지션을 업데이트 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Preview</span>\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> expanded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token function\">Surface</span><span class=\"token punctuation\">(</span>\n        modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>vertical <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        color <span class=\"token operator\">=</span> MaterialTheme<span class=\"token punctuation\">.</span>colorScheme<span class=\"token punctuation\">.</span>secondary\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Row</span><span class=\"token punctuation\">(</span>\n            modifier <span class=\"token operator\">=</span> Modifier\n                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            horizontalArrangement <span class=\"token operator\">=</span> Arrangement<span class=\"token punctuation\">.</span>SpaceBetween\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span>Alignment<span class=\"token punctuation\">.</span>CenterVertically<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Compose State Expanded\"</span></span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>\n                onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> expanded <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>expanded <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span>Alignment<span class=\"token punctuation\">.</span>CenterVertically<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">)</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Show Less\"</span></span> <span class=\"token keyword\">else</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Show More\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/0504e579-ea4e-422f-a233-ec5eb5f59c40\">\n<p>expanded 라는 변수를 선언해서 Text의 내용을 변경하지만, 동작하지 않는다.</p>\n<p>상태가 바뀌면 compose가 UI를 업데이트 하지만, 이렇게 선언된 변수는 기본적으로 모니터링 하지 않는다.</p>\n<blockquote>\n<p>Compose에서는 <code class=\"language-text\">mutableStateOf()</code> 함수를 사용해서 내부 상태를 모니터링하게 할 수 있다.</p>\n</blockquote>\n<h2>mutableStateOf, remember</h2>\n<p>Composable 내부에 <code class=\"language-text\">mutableStateOf()</code>를 할당하면 동작할 것 같으나, 이 값은 Composable이 다시 만들어질때 false값이 assign된다.</p>\n<blockquote>\n<p>상태값을 유지하기 위해서는 <code class=\"language-text\">remember</code>를 사용해서 변경가능한 상태를 기억해야 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Preview</span>\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> expanded <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n            <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>\n                onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> expanded<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>expanded<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span>Alignment<span class=\"token punctuation\">.</span>CenterVertically<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Show Less\"</span></span> <span class=\"token keyword\">else</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Show More\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>expanded의 data type은 MutableState<Boolean> 이다.</li>\n<li>값을변경하려면 <code class=\"language-text\">.value</code> 로 속성에 접근해야 한다.</li>\n</ul>\n<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/4b0a301b-2c34-4acd-8070-232ab3c81e12\">\n<h2>by를 통한 위임</h2>\n<ul>\n<li>\n<p>immutable 을 위임하기 위해서는 (val)</p>\n<ul>\n<li>getValue(thisRef: R, property: KProperty&#x3C;*>)를 제공해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>mutable을 위임하기 위해서는 (var)</p>\n<ul>\n<li>setValue(thisRef: R, property: KProperty&#x3C;*>, value: T)를 추가로 제공해야 한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Preview</span>\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> expanded <span class=\"token keyword\">by</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n            <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>\n                onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> expanded <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>expanded <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span>Alignment<span class=\"token punctuation\">.</span>CenterVertically<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expanded<span class=\"token punctuation\">)</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Show Less\"</span></span> <span class=\"token keyword\">else</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Show More\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>State 유지 - rememberSaveable</h2>\n<p>일반적인 rememeber 함수는 컴포지션 내에서 컴포저블 객체들이 유지될때만 동작한다. 따라서 화면이 회전과 같이 환경구성이 변경되거나 프로세스가 죽는 경우 Activity가 재시작 되기 때문에 모든 상태를 잃게 된다.</p>\n<p>이러한 경우 remember대신에 <code class=\"language-text\">rememberSaveable</code>을 사용하면 상태를 보존할 수 있게 된다.</p>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/jetpack/compose/state?hl=ko#state-in-composables\">상태 및 Jetpack Compose</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Compose 수명 주기","date":"August 22, 2023","update":"August 22, 2023","tags":["Android","Compose","State"],"series":"Android"},"fields":{"slug":"/compose-lifecycle/","readingTime":{"minutes":3.975}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}},"next":{"fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},"pageContext":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","series":"Android","previousPostId":"38730b0e-28e4-544e-a8db-aad5668516cc","nextPostId":"a3a56595-ff49-5d63-b85a-4db183a541b5"}},"staticQueryHashes":[],"slicesMap":{}}