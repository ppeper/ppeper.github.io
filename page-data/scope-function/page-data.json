{"componentChunkName":"component---src-templates-post-jsx","path":"/scope-function/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"a7e9c7fb-11d9-59aa-b9c8-faef6cfcd27e","excerpt":"Scope Function 코틀린에서는 기본적으로 \"표준 스코프 함수\" 라는것을 제공한다. 스코프 함수들을 사용하여 기존의 복잡한 코드를 단순화하고 효율적으로 만들 수 있다. 스코프 함수를 람다식으로 사용을 하게되면 일시적인 Scope(범위)가 형성 되고, 이 범위 안에서는 객체에 대해서 일일이 참조하지 않고 객체에 대한 접근 을 하여 사용할 수 있다. …","html":"<h1>Scope Function</h1>\n<p>코틀린에서는 기본적으로 <strong>\"표준 스코프 함수\"</strong> 라는것을 제공한다.<br>\n스코프 함수들을 사용하여 기존의 복잡한 코드를 단순화하고 효율적으로 만들 수 있다.</p>\n<p>스코프 함수를 <strong>람다식으로 사용을 하게되면 일시적인 Scope(범위)가 형성</strong> 되고, 이 범위 안에서는 <strong>객체에 대해서 일일이 참조하지 않고 객체에 대한 접근</strong> 을 하여 사용할 수 있다.</p>\n<p>코틀린에서 제공하는 스코프 함수들은 <code class=\"language-text\">let</code>, <code class=\"language-text\">also</code>, <code class=\"language-text\">with</code>, <code class=\"language-text\">run</code>, <code class=\"language-text\">apply</code>로 5가지로 이루어져 있다.<br>\n각 키워드에 대해서 단어의 의미를 보면 어렴풋이 어떠한 기능을 할 것이다라는 감은 오지만 <strong>역할이나 수행하는 기능들이 비슷하여</strong> 어떤 상황에 알맞은 스코프 함수를 써야하는지 <strong>헷갈리게 된다.</strong>(지금상태..😨)</p>\n<p>최근에 안드로이드 프로젝트에서 스코프 함수를 사용하고 있지만 명확한 차이점을 알지못하고 제대로 사용하고 있나? 라는 의문이 생겨 이번 포스팅을 통하여 각각의 차이점, 특징들을 정리하려고 한다.</p>\n<h2>let</h2>\n<blockquote>\n<p>fun &#x3C;T, R> T.let(block: (T) -> R): R</p>\n</blockquote>\n<p><code class=\"language-text\">let</code> 함수는 제네릭으로 매개변수화된 타입 T의 확장 함수이다. 따라서 <strong>자기자신을 인수로 전달하고 수행된 결과(블록의 마지막 값)를 반환</strong> 하며, 인수로 전달한 객체의 참조는 <strong>it</strong> 으로 참조를 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> favorite<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> person1 <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"페퍼\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Dr pepper\"</span></span><span class=\"token punctuation\">)</span>\n    person1<span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"이름: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">it<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 좋아하는것: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">it<span class=\"token punctuation\">.</span>favorite</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 이름: 페퍼, 좋아하는것: Dr pepper</span>\n\n    <span class=\"token keyword\">val</span> person2 <span class=\"token operator\">=</span> person1<span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span>\n        it<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"준후\"</span></span>\n        it<span class=\"token punctuation\">.</span>favorite <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"닥터페퍼\"</span></span>\n        <span class=\"token string-literal singleline\"><span class=\"token string\">\"이름: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">it<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 좋아하는것: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">it<span class=\"token punctuation\">.</span>favorite</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span>    <span class=\"token comment\">// (T) -> R 부분에서의 반환값</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 이름: 준후, 좋아하는것: 닥터페퍼</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>안드로이드에서 let은 <code class=\"language-text\">T?.let{ }</code>(safe call)의 형태로 let 블록안에 <strong>not-null</strong> 만 들어올 수 있어 null 체크 시에 유용하게 쓰인다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token comment\">// 서버로부터 데이터 요청</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>isSuccessful<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// body()가 null이 아니라면 실행</span>\n            <span class=\"token comment\">// it -> result라는 이름의 인자로 바꾸어 사용가능</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">-></span>\n                <span class=\"token keyword\">return</span> <span class=\"token comment\">// Something</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>also</h2>\n<blockquote>\n<p>fun <T> T.also(block: (T) -> Unit): T</p>\n</blockquote>\n<p><code class=\"language-text\">also</code>는 언듯보면 <code class=\"language-text\">let</code>과 역할이 거의 동일해 보인다. 하지만 반환값을 보면 <strong>T</strong> 라는 것으로 조금 다른데, <strong>let은 마지막으로 수행된 코드 블록의 결과를 반환</strong> 하고 <strong>also는 블록 안의 코드와 상관없이 T인 객체를 반환</strong> 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> person2 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span>\n    it<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"준후\"</span></span>\n    it<span class=\"token punctuation\">.</span>favorite <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"닥터페퍼\"</span></span>\n    <span class=\"token string-literal singleline\"><span class=\"token string\">\"이름: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">it<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 좋아하는것: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">it<span class=\"token punctuation\">.</span>favorite</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span>    <span class=\"token comment\">// (T) -> R 부분에서의 반환값</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 이름: 준후, 좋아하는것: 닥터페퍼</span>\n\n<span class=\"token keyword\">val</span> person3 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n    it<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"준후\"</span></span>\n    it<span class=\"token punctuation\">.</span>favorite <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"닥터페퍼\"</span></span>\n    <span class=\"token string-literal singleline\"><span class=\"token string\">\"이름: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">it<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 좋아하는것: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">it<span class=\"token punctuation\">.</span>favorite</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span>    <span class=\"token comment\">// 무시</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Person(name=준후, favorite=닥터페퍼) -> T인 person 객체 반환</span></code></pre></div>\n<h2>with</h2>\n<blockquote>\n<p>fun &#x3C;T, R> with(receiver: T, block: T.() -> R): R</p>\n</blockquote>\n<p><code class=\"language-text\">with</code>는 다른 스코프 함수들과 다르게 <strong>일반 함수</strong> 이다. 따라서 <strong>객체 receiver를 직접 입력</strong> 받고 <code class=\"language-text\">receiver</code>로 객체를 입력 받으면 , <code class=\"language-text\">this</code> 키워드 없이 <strong>객체의 속성</strong> 을 변경할 수 있다.</p>\n<p><code class=\"language-text\">with</code>는 <code class=\"language-text\">not-null</code>객체를 이용하여 사용하고, 블록의 반환값이 필요하지 않을 때 사용한다.</p>\n<p>주로 <code class=\"language-text\">with</code>는 <strong>객체의 함수나 속성을 여러개 호출할 때 그룹화</strong> 하는 용도로 많이 활용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">binding<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">.</span>text~\nbinding<span class=\"token punctuation\">.</span>userpwd<span class=\"token punctuation\">.</span>text~\n\n<span class=\"token comment\">// 주로 안드로이드에서 view binding을 사용할때 with사용</span>\n<span class=\"token function\">with</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    userId<span class=\"token punctuation\">.</span>text ~~\n    userpwd<span class=\"token punctuation\">.</span>text ~\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>run</h2>\n<p><code class=\"language-text\">run</code>은 두 가지 형태로 선언이 되어 있는데, 첫 번째는 아래와 같다.</p>\n<blockquote>\n<p>fun &#x3C;T, R> T.run(block: T.() -> R): R</p>\n</blockquote>\n<p><code class=\"language-text\">run</code>은 with와 유사하지만 T의 확장함수라는 점에서 차이가 있다. 또한 확장함수 이기때문에 <code class=\"language-text\">T?.</code>(safe call)을 사용하면 <strong>null 객체가 들어와도 not-null을 체크하고 실행</strong> 이 가능하다. </p>\n<p><code class=\"language-text\">run</code>은 <strong>어떤 값을 계산할 필요</strong> 가 있거나, <strong>여러 개의 지역변수 범위를 제한</strong> 하고자 할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> favorite <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// person을 수신객체로 변환하여 favorite 값을 사용</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"가장좋아하는것: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">favorite</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    favorite<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\" 존맛탱!!\"</span></span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// run은 마지막 실행문의 결과를 반환</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"가장좋아하는것: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">favorite</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 가장좋아하는것: 닥터페퍼</span>\n<span class=\"token comment\">// 가장좋아하는것: 닥터페퍼 존맛탱!!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 번째 선언 방식은 아래와 같다.</p>\n<blockquote>\n<p>fun <R> run(block: () -> R): R</p>\n</blockquote>\n<p>이 <code class=\"language-text\">run</code>은 <strong>확장함수도 아니고, 블록에 대한 입력값도 없다.</strong> 따라서 객체를 전달 받고 속성을 이용할때 사용하는 함수가 아니고, <strong>어떤 객체를 생성하기 위한 명령문들을 하나로 묶음으로써 가독성을 높이는 역할을 한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> run <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"ppeper\"</span></span>\n    <span class=\"token keyword\">val</span> favorite <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"닥터페퍼\"</span></span>\n    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> favorite<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 사용한다면 Person() 객체 가 <code class=\"language-text\">person</code>에 담기게 된다.</p>\n<h2>apply</h2>\n<blockquote>\n<p>fun <T> T.apply(block: T.() -> Unit): T</p>\n</blockquote>\n<p><code class=\"language-text\">apply</code>는 T의 확장함수로 run과 유사하지만 반환값을 받지않고 객체 T를 반환한다는 점이 다르다. 따라서 apply는 이름에서 느낄수 있듯이, <strong>새로운 인스턴스를 생성하고 특정 변수에 할당하기 전</strong> 에 <strong>초기화 작업</strong> 을 하거나 변경할때 사용한다. 따라서 앞서 설명한 것처럼 <code class=\"language-text\">apply</code> 스코프 내에 모든 명령을 수행하여 적용된 새로운 인스턴스가 (T) 반환 한다는 특징이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"ppeper\"</span></span>\n    favorite <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"닥터페퍼\"</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">person</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Person(name=ppeper, favorite=닥터페퍼)</span></code></pre></div>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://blog.yena.io/studynote/2020/04/15/Kotlin-Scope-Functions.html\">https://blog.yena.io/studynote/2020/04/15/Kotlin-Scope-Functions.html</a></li>\n</ul>","frontmatter":{"title":"코틀린의 Scope Function는 언제쓸까","date":"April 20, 2022","update":"April 20, 2022","tags":["Kotlin","Scope Function"],"series":"Kotlin"},"fields":{"slug":"/scope-function/","readingTime":{"minutes":7.61}}},"seriesList":{"edges":[{"node":{"id":"a7e9c7fb-11d9-59aa-b9c8-faef6cfcd27e","fields":{"slug":"/scope-function/"},"frontmatter":{"title":"코틀린의 Scope Function는 언제쓸까"}}},{"node":{"id":"995d0539-ea55-5757-b642-d423a2fef20c","fields":{"slug":"/sort/"},"frontmatter":{"title":"코틀린 리스트 정렬하는 방법 (sort vs sortBy vs sortWith)"}}},{"node":{"id":"b0b78929-653d-5d49-a7cf-79c5069f2dab","fields":{"slug":"/generic-in-out/"},"frontmatter":{"title":"Kotlin 제네릭의 in, out 키워드?"}}},{"node":{"id":"33959bf6-d080-5100-ac93-0be970a5d159","fields":{"slug":"/flow/"},"frontmatter":{"title":"Kotlin Coroutines Flow 맛보기"}}},{"node":{"id":"770fa80e-3899-50bc-a219-6f0a4abde7eb","fields":{"slug":"/serialization/"},"frontmatter":{"title":"코틑린을 위한 Kotlinx Serizalization"}}},{"node":{"id":"1da09158-79bc-54c5-8886-5cf392f4154f","fields":{"slug":"/ktor/"},"frontmatter":{"title":"KMP를 지원하는 Ktor Client를 사용해보자"}}}]},"previous":{"fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}},"next":{"fields":{"slug":"/greedy/"},"frontmatter":{"title":"그리디 알고리즘(Greedy Algorithm)에 대해"}}},"pageContext":{"id":"a7e9c7fb-11d9-59aa-b9c8-faef6cfcd27e","series":"Kotlin","previousPostId":"c20926f6-1320-5a8c-9f4a-59e5892e6350","nextPostId":"b167a775-e860-5c19-8368-765d569da317"}},"staticQueryHashes":[],"slicesMap":{}}