{"componentChunkName":"component---src-templates-post-jsx","path":"/room-database/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","excerpt":"Room Room은 안드로이드 앱 내부에서 데이터를 저장 하기 위한 jetpack 라이브러리이다. Room은 데이터베이스의 데이터(객체)를 자바나 코틀린 객체로 매핑해주는 ORM 라이브러리 이다. 📍ORM(Object Relational Mapping) : 객체-관계 매핑의 줄인말로 객체와 관계형 데이터베이스의 데이터 를 자동으로 매핑(연결) 해주는 것을…","html":"<img src='https://user-images.githubusercontent.com/63226023/151594101-266890b7-079a-47c5-9daa-2afbc335ccb7.png'>\n<h1 id=\"Room\" style=\"position:relative;\"><a href=\"#Room\" aria-label=\"Room permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Room</h1>\n<p>Room은 안드로이드 <strong>앱 내부에서 데이터를 저장</strong> 하기 위한 jetpack 라이브러리이다. Room은 데이터베이스의 데이터(객체)를 자바나 코틀린 객체로 매핑해주는 <strong>ORM 라이브러리</strong> 이다.</p>\n<blockquote>\n<p>📍ORM(Object Relational Mapping) : 객체-관계 매핑의 줄인말로 <strong>객체와 관계형 데이터베이스의 데이터</strong> 를 <strong>자동으로 매핑(연결)</strong> 해주는 것을 말한다.</p>\n</blockquote>\n<ol>\n<li>객체 지향 프로그래밍에서는 <strong>클래스</strong> 를 사용하고, 관계형 데이터베이스는 <strong>테이블</strong> 을 사용하기 때문에 둘간의 <strong>불일치</strong> 가 발생한다.</li>\n<li>ORM을 통하여 객체의 관계를 자동으로 SQL문을 생성을 해주어 이러한 불일치 문제를 해결해준다.</li>\n</ol>\n<p> Room 라이브러리가 나오기전에는 SQLite을 사용하여 데이터를 저장하였다. SQLite를 사용하여 DB를 사용하기 위해선 여러가지 많은 작업들을 해주어야 한다.</p>\n<blockquote>\n<p>🤔 <a href=\"https://developer.android.com/training/data-storage/sqlite?hl=ko\">SQLite를 사용하여 데이터 저장</a></p>\n</blockquote>\n<p> Room도 내부적으론 SQLite를 사용하지만 이를 좀더 편하게 사용할 수 있도록 제공하며 다양한 장점이 있다.</p>\n<ul>\n<li>컴파일 동안 SQL 쿼리의 유효성 검사 가능.</li>\n<li>오류가 발생하기 쉬운 상용구 코드없이 OBM 라이브러리를 통하여 매핑 가능.</li>\n<li>스키마 변경시 자동으로 업데이트가 가능.</li>\n<li>LiveData, RxJava와 같이 사용 가능.</li>\n</ul>\n<hr>\n<h1 id=\"Room의-구조--Annotation\" style=\"position:relative;\"><a href=\"#Room%EC%9D%98-%EA%B5%AC%EC%A1%B0--Annotation\" aria-label=\"Room의 구조  Annotation permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Room의 구조 &#x26; Annotation</h1>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/156314796-580f6154-d163-4642-912a-df39d48aa217.png' width='70%'></p>\n<p>Room 라이브러리의 구성요소는 Entity(데이터 모델), DAO(데이터 접근 객체), Database(데이터베이스 소유 객체)로 되어있다.</p>\n<h2 id=\"Entity\" style=\"position:relative;\"><a href=\"#Entity\" aria-label=\"Entity permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Entity</h2>\n<p>데이터베이스에서 Table역할을 한다. class의 변수들의 column이 된다.</p>\n<ul>\n<li>\n<p><strong>@Entity(tableName = 원하는 테이블 이름)</strong></p>\n<ul>\n<li>Table의 이름을 설정해준다.(기본적으론 Entity class 이름을 Database table의 이름으로 인식한다) </li>\n</ul>\n</li>\n<li>\n<p><strong>@PrimaryKey</strong></p>\n<ul>\n<li>데이터베이스 의 기본키를 지정해준다.(모든 Entity는 <strong>하나의 Primary Key</strong> 를 가지고 있어야한다)</li>\n<li><strong>(autoGenerate=true)</strong> 로 설정해주면 자동으로 Key값을 생성한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@ColumnInfo</strong></p>\n<ul>\n<li>Table 내의 column을 변수들과 매칭한다.(기본적으론 Entity의 필드 이름을 열이름으로 인식한다)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DAO\" style=\"position:relative;\"><a href=\"#DAO\" aria-label=\"DAO permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>DAO</h2>\n<p>데이터베이스에 접근하여 상호작용하기 위한 작업들을 메서드 형태로 정의한다.</p>\n<ul>\n<li>\n<p><strong>@Insert</strong></p>\n<ul>\n<li>파라미터로 넘겨받은 데이터를 테이블에 저장한다.</li>\n<li><strong>onConflict = OnConflictStrategy.REPLACE</strong> 를 사용하면 Update와 동일한 기능으로 사용할 수 있다. IGNORE을 사용하면 데이터 중복시 기존 데이터를 유지한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@Update</strong></p>\n<ul>\n<li>데이터베이스의 값을 업데이트한다. 리턴 값으로 업데이트된 행 수를 받을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@Delete</strong></p>\n<ul>\n<li>데이터베이스의 값을 삭제한다. 리턴 값으로 삭제된 행 수를 받을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@Query</strong></p>\n<ul>\n<li>SQL 쿼리문을 사용하여 데이터베이스에서 읽기/쓰기 작업을 실행할 수 있다. 쿼리에 매개변수를 전달하려면 <strong>:컬럼 이름</strong> 을 사용해야한다.</li>\n<li>Room은 컴파일 시간에 SQL 쿼리를 검증한다. 즉, 쿼리에 문제가 있으면 런타임 실패가 아닌 컴파일 오류가 발생한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Room-Database\" style=\"position:relative;\"><a href=\"#Room-Database\" aria-label=\"Room Database permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Room Database</h2>\n<p>데이터베이스의 소유자 역할로 <strong>DB의 생성 및 버전을 관리</strong> 한다.</p>\n<p>Room Database에서 DAO의 객체를 가져와 데이터를 \"CRUD\" 한다.</p>\n<ul>\n<li>\n<p><strong>@Database</strong></p>\n<ul>\n<li>\n<p>class가 데이터베이스임을 알린다.</p>\n<ul>\n<li><strong>entities</strong> : DB에 어떤 테이블들이 있는지 정의한다.</li>\n<li><strong>version</strong> : DB의 버전을 정의한다. 스키마가 바뀌게 되면(Entity가 바뀐다면) version을 바꾸거나 Migration을 해야한다.</li>\n<li><strong>exportSchema</strong> : Room의 Schema 구조를 폴더로 Export 할 수 있다. DB 버전 히스토리를 기록할 수 있다는 점에서 <strong>true로 설정하는 것이 좋다</strong>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>사용법</h1>\n<h2 id=\"1-gradle-설정\" style=\"position:relative;\"><a href=\"#1-gradle-%EC%84%A4%EC%A0%95\" aria-label=\"1 gradle 설정 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1. gradle 설정</h2>\n<p>가장 먼저 room을 사용하기 위해서는 gradle을 설정해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token keyword\">plugins</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n    id <span class=\"token string\">'kotlin-kapt'</span>\n<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> roomVersion <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"2.4.1\"</span></span>\n<span class=\"token keyword\">implementation</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"androidx.room:room-runtime:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">roomVersion</span></span><span class=\"token string\">\"</span></span>\nkapt <span class=\"token interpolation-string\"><span class=\"token string\">\"androidx.room:room-compiler:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">roomVersion</span></span><span class=\"token string\">\"</span></span></code></pre></div>\n<p>📍Room 라이브러리와 Coroutine을 함께 사용하기 위해서는 아래를 추가해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token keyword\">implementation</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"androidx.room:room-ktx:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">roomVersion</span></span><span class=\"token string\">\"</span></span></code></pre></div>\n<h2 id=\"2-Entity-생성\" style=\"position:relative;\"><a href=\"#2-Entity-%EC%83%9D%EC%84%B1\" aria-label=\"2 Entity 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>2. Entity 생성</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Entity</span><span class=\"token punctuation\">(</span>tableName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"myEntity\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Subscriber</span><span class=\"token punctuation\">(</span>\n\n    <span class=\"token annotation builtin\">@PrimaryKey</span><span class=\"token punctuation\">(</span>autoGenerate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 자동으로 기본키를 생성</span>\n    <span class=\"token annotation builtin\">@ColumnInfo</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"myEntity_id\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n\n    <span class=\"token annotation builtin\">@ColumnInfo</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"myEntity_name\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n\n    <span class=\"token annotation builtin\">@ColumnInfo</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"myEntity_email\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> email<span class=\"token operator\">:</span> String\n\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 예시에선 Entity의 테이블의 이름을 myEntity로 생성하고 Column의 이름을 사용자에 맞게 생성하였다.</p>\n<h2 id=\"3-DAO-생성\" style=\"position:relative;\"><a href=\"#3-DAO-%EC%83%9D%EC%84%B1\" aria-label=\"3 DAO 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>3. DAO 생성</h2>\n<p>데이터베이스에 접근하여 사용할 메소드들을 생성해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Dao</span>\n<span class=\"token keyword\">interface</span> SubscriberDAO <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Insert</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">insertSubscriber</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token operator\">:</span> Subscriber<span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Update</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">updateSubscriber</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token operator\">:</span> Subscriber<span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Delete</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">deleteSubscriber</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token operator\">:</span> Subscriber<span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"DELETE FROM subscriber_data_table\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"코루틴-suspend\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%A3%A8%ED%8B%B4-suspend\" aria-label=\"코루틴 suspend permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>코루틴 suspend</h3>\n<p>데이터베이스 접근이나 네트워킹과 같은 <strong>메인 쓰레드를 Block 시킬 위험이 있는 작업</strong> 은 <strong>백그라운드 쓰레드</strong> 로 스위칭을 해주어야 한다.</p>\n<p>코루틴의 <code class=\"language-text\">suspend</code> 키워드를 함수 앞에 붙임으로서 <strong>suspend를 호출한 쓰레드는 일시 suspend(정지)</strong> 가 되고, 해당 suspend가 붙은 함수의 실행이 끝나고 다시 Resume(재개)된다. </p>\n<p>Room, Retrofit과 같은 라이브러리는 <code class=\"language-text\">Main-safety</code> 가 보장되어 있어 메인 쓰레드에서 동작하여도 되어 <code class=\"language-text\">suspend</code> 를 사용하여 메인 쓰레드에서 동작하도록 하면 된다.</p>\n<h2 id=\"4-Database-생성\" style=\"position:relative;\"><a href=\"#4-Database-%EC%83%9D%EC%84%B1\" aria-label=\"4 Database 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>4. Database 생성</h2>\n<p>데이터베이스의 생성은 @Database를 통하여 이 클래스가 데이터베이스임을 명시해주고 <strong>RoomDatabase()를 상속하여 abstract로 생성</strong> 한다. 또한 Dao를 데이터베이스에서 사용하기 위하여 <strong>abstract dao를 가져야한다.</strong></p>\n<p>Room 객체는 많은 리소스를 소모하며, 단일 프로세스 내에선 여러 인스턴스에 접근할 필요가 거의 없기 때문에 <strong>Singleton</strong> 패턴을 사용하여 생성해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Database</span><span class=\"token punctuation\">(</span>entities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Subscriber<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> version <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> SubscriberDatabase<span class=\"token operator\">:</span> <span class=\"token function\">RoomDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">val</span> subscriberDAO <span class=\"token operator\">:</span> SubscriberDAO\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation builtin\">@Volatile</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> INSTANCE <span class=\"token operator\">:</span> SubscriberDatabase<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SubscriberDatabase <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> INSTANCE\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    instance <span class=\"token operator\">=</span> Room<span class=\"token punctuation\">.</span><span class=\"token function\">databaseBuilder</span><span class=\"token punctuation\">(</span>\n                        context<span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">,</span>\n                        SubscriberDatabase<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span>\n                        <span class=\"token string-literal singleline\"><span class=\"token string\">\"subscriber_data_database\"</span></span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> instance\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>synchronized 블록을 통하여 싱글톤 인스턴스가 중복되는것을 방지해준다. 또한 <a href=\"https://nesoy.github.io/articles/2018-06/Java-volatile\">@Volatile 어노테이션</a>을 접근가능한 변수의 값을 cache를 통해 사용하지 않고 쓰레드가 직접 main memory에 접근 하게하여 동기화한다. </p>\n<h2 id=\"5-생성된-DB-사용\" style=\"position:relative;\"><a href=\"#5-%EC%83%9D%EC%84%B1%EB%90%9C-DB-%EC%82%AC%EC%9A%A9\" aria-label=\"5 생성된 DB 사용 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>5. 생성된 DB 사용</h2>\n<p>데이터베이스까지 완료되었다면 getInstance()함수를 통하여 사용할 위치에서 생성하여 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> db <span class=\"token operator\">=</span> SubscriberDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>마무리</h1>\n<p>이번 Room 라이브러리를 다시 정리해보며 코루틴의 <code class=\"language-text\">suspend</code>사용과 더불어 몰랐던 많은 새로운 내용들을 알게되었다🤔</p>\n<p>최근에 MVVM 패턴에 대한 내용을 접하면서 Room 라이브러리는 Repository와 같이 사용하는 것을 알게되었고, 정리한 내용들을 이러한 패턴과 적용시켜서 만들어 봐야겠다고 생각이 들었다.</p>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/training/data-storage/room?hl=ko\">Room을 사용하여 로컬 데이터베이스에 데이터 저장</a></li>\n<li><a href=\"https://gmlwjd9405.github.io/2019/02/01/orm.html\">[DB] ORM이란</a></li>\n<li><a href=\"https://hungseong.tistory.com/9\">[Android, Kotlin] Retrofit, Room과 같은 동작에서의 Coroutine 쓰레드 처리</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기","date":"March 04, 2022","update":"March 04, 2022","tags":["Android","Room"],"series":"Android"},"fields":{"slug":"/room-database/","readingTime":{"minutes":9.535}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"47c30107-f229-5a8a-835b-badfa1b4e7a6","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}}]},"previous":{"fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}},"next":{"fields":{"slug":"/dependency-injection/"},"frontmatter":{"title":"의존성 주입(DI) 알아보기"}}},"pageContext":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","series":"Android","previousPostId":"567749b8-f03e-5f18-bf62-021e32de6506","nextPostId":"4bc0c0b4-4214-596a-a46d-b16d6374cca4"}},"staticQueryHashes":[],"slicesMap":{}}