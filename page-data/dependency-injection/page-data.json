{"componentChunkName":"component---src-templates-post-jsx","path":"/dependency-injection/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"a21fbcd4-8660-50e8-9cfb-59e50c8113a3","excerpt":"의존성 주입을 최근에 공부하게 되면서 의존성 주입에 대한 개념을 알아보려고 한다🤔 의존성 주입💉 의존성 주입(Dependency Injection)은 객체지향 프로그래밍을 하게 되면 한번씩 들어볼 수 있는 용어이다. 일반적으로 객체생성을 하게되면 사용할 클래스 내에서 객체를 생성하여 사용하지만, DI는 외부에서 생성된 객체를 주입 을 받는다.  📍의존성 …","html":"<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/157641205-b344edbb-e4e3-4965-a366-5ee1401325b5.png\"></p>\n<p>의존성 주입을 최근에 공부하게 되면서 의존성 주입에 대한 개념을 알아보려고 한다🤔</p>\n<hr>\n<h1>의존성 주입💉</h1>\n<p>의존성 주입(Dependency Injection)은 객체지향 프로그래밍을 하게 되면 한번씩 들어볼 수 있는 용어이다.</p>\n<p>일반적으로 객체생성을 하게되면 사용할 클래스 내에서 객체를 생성하여 사용하지만, DI는 <strong>외부에서 생성된 객체를 주입</strong> 을 받는다. </p>\n<blockquote>\n<p>📍의존성 주입: 외부에서 생성된 객체를 주입한다.</p>\n</blockquote>\n<img src=\"https://user-images.githubusercontent.com/63226023/157621746-f6102708-c8c2-4698-ad6b-4b6aff63ca9b.png\">\n<h2>일반적인 예시</h2>\n<p>스마트폰이라는 객체가 있고 스마트폰에는 배터리, 유심칩, 메모리카드가 있다고 하자. 이를 일반적인 객체생성을 하게 되면 아래와 같을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> SmartPhone <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> battery <span class=\"token operator\">=</span> <span class=\"token function\">Battery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> simCard <span class=\"token operator\">=</span> <span class=\"token function\">SIMCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> memoryCard <span class=\"token operator\">=</span> <span class=\"token function\">MemoryCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"TAG\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"스마트폰 동작!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">val</span> smartPhone <span class=\"token operator\">=</span> <span class=\"token function\">SmartPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        smartPhone<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 해서 스마트폰을 생성하여 사용하더라도 문제없이 동작을 한다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/157629828-8ad84f5a-a74b-4866-ba14-a2f8ceea556e.png\">\n<p>여기서 만약 배터리를 다른 용량의 배터리로 교체를 하려고 한다면 <strong>스마트폰 객체의 코드에서 다른 배터리 객체</strong> 로 바꿔야할 것이다. </p>\n<p>위의 간단한 예시에서는 한줄의 코드만 바꾸면 되지만 의존 관계가 복잡해 진다면 바꿔야 할 코드가 굉장히 많아지고 또한 어느 패키지에 있는 클래스를 바꿔야할지 등 코드 수정이 굉장히 힘들어질것이다😨</p>\n<h2>생성자 주입(constructor Injection) 사용</h2>\n<blockquote>\n<p>📍생성자를 통해 의존하는 객체를 주입하는 방법</p>\n</blockquote>\n<p>스마트폰과 부품들간의 결합도를 느슨하게 하기위하여 예시의 코드를 변경해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">SmartPhone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> battery<span class=\"token operator\">:</span> Battery<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> simCard<span class=\"token operator\">:</span> SIMCard<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> memoryCard<span class=\"token operator\">:</span> MemoryCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"TAG\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"스마트폰 동작!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">val</span> battery <span class=\"token operator\">=</span> <span class=\"token function\">Battery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> simCard <span class=\"token operator\">=</span> <span class=\"token function\">SIMCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> memoryCard <span class=\"token operator\">=</span> <span class=\"token function\">MemoryCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> smartPhone <span class=\"token operator\">=</span> <span class=\"token function\">SmartPhone</span><span class=\"token punctuation\">(</span>battery<span class=\"token punctuation\">,</span> simCard<span class=\"token punctuation\">,</span> memoryCard<span class=\"token punctuation\">)</span>\n        smartPhone<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 스마트폰을 생성을 하게되면 <strong>다른 용량이 큰 배터리로 교체를 하더라도 새로운 배터리 객체를 생성하여 스마트폰에 주입</strong> 을 할 수 있다. 이렇게 생성자를 통하여 의존성 주입을 하는 방법을 <strong>생성자 주입</strong> 이라이고 한다.</p>\n<h2>필드 주입(Field Injection) 사용</h2>\n<blockquote>\n<p>📍객체를 초기화한 후 의존하는 객체로 주입하는 방법</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> SmartPhone <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> battery<span class=\"token operator\">:</span> Battery\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> simCard<span class=\"token operator\">:</span> SIMCard\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> memoryCard<span class=\"token operator\">:</span> MemoryCard\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"TAG\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"스마트폰 동작!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">val</span> battery <span class=\"token operator\">=</span> <span class=\"token function\">Battery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> simCard <span class=\"token operator\">=</span> <span class=\"token function\">SIMCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> memoryCard <span class=\"token operator\">=</span> <span class=\"token function\">MemoryCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">val</span> smartPhone <span class=\"token operator\">=</span> <span class=\"token function\">SmartPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        smartPhone<span class=\"token punctuation\">.</span>battery <span class=\"token operator\">=</span> battery\n        smartPhone<span class=\"token punctuation\">.</span>simCard <span class=\"token operator\">=</span> simCard\n        smartPhone<span class=\"token punctuation\">.</span>memoryCard <span class=\"token operator\">=</span> memoryCard\n        smartPhone<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시처럼 배터리, 유심카드, 메모리 카드를 생성하여 외부에서 해당 멤버변수로 직접 값을 넣어주는 방법을 <strong>필드 주입</strong> 이라고 한다.</p>\n<h2>의존성 주입의 장점</h2>\n<p>앞서 살펴본 의존성 주입을 사용한다면 클래스간의 결합도가 약해지는것을 볼 수 있었다. 이러한 클래스간의 결합도가 약해지면 얻어지는 장점들은 다음과 같다.</p>\n<ul>\n<li><strong>코드의 리펙토링이 쉬워진다.</strong></li>\n<li><strong>코드의 재사용성이 좋아진다.</strong></li>\n<li><strong>코드의 가독성이 좋아진다.</strong></li>\n<li><strong>결합도가 약해져서 Unit testing에 용이하다.</strong></li>\n</ul>\n<hr>\n<h1>마무리</h1>\n<p>안드로이드에서 의존성 주입은 Dagger라는 프레임워크와 kotlin 언어를 사용하면 Koin을 많이 사용한다고 한다. 최근에 안드로이드 의존성 주입에 대해서 공부를 하면서 굉장히 러닝커브가 높다는걸 느꼈다.😅<del>(프로젝트에 적용시킬 수 있을까..)</del> </p>","frontmatter":{"title":"의존성 주입(DI) 알아보기","date":"March 10, 2022","update":"March 10, 2022","tags":["CS","DI"],"series":"CS"},"fields":{"slug":"/dependency-injection/","readingTime":{"minutes":5.105}}},"seriesList":{"edges":[{"node":{"id":"a21fbcd4-8660-50e8-9cfb-59e50c8113a3","fields":{"slug":"/dependency-injection/"},"frontmatter":{"title":"의존성 주입(DI) 알아보기"}}}]},"previous":{"fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}},"next":{"fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},"pageContext":{"id":"a21fbcd4-8660-50e8-9cfb-59e50c8113a3","series":"CS","previousPostId":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","nextPostId":"a23c3328-e672-5cda-b982-a2a0b412559e"}},"staticQueryHashes":[],"slicesMap":{}}