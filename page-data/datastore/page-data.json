{"componentChunkName":"component---src-templates-post-jsx","path":"/datastore/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","excerpt":"로컬 저장 지금까지 안드로이드 로컬에 간단한 데이터를 저장하기 위해 를 사용하였다. 구글에서는 DataStore 의 사용을 적극 권장하고 있고 (SharedPreferences는 구글 공식 문서에서도 사용가이드가 사라졌다..😨) Datastore를 사용하면 어떤 좋은점들이 있어서 사용을 이렇게 권고하는 것인가? Datastore를 하나씩 알아가 보자! 🚀…","html":"<img src=\"https://user-images.githubusercontent.com/63226023/174076432-24f77ccb-dcb7-45fe-a70d-5d65e4d08f19.png\">\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> 로컬 데이터 <span class=\"token punctuation\">{</span>\n    DataStore<span class=\"token operator\">:</span> 이제 여기는 얼씬도 말라<span class=\"token punctuation\">.</span> 알았어<span class=\"token operator\">?</span>   \n    SharedPreferences<span class=\"token operator\">:</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>로컬 저장</h1>\n<p>지금까지 안드로이드 로컬에 간단한 데이터를 저장하기 위해 <code class=\"language-text\">SharedPreferences</code>를 사용하였다.<br>\n구글에서는 <strong>DataStore</strong> 의 사용을 적극 권장하고 있고 <del>(SharedPreferences는 구글 공식 문서에서도 사용가이드가 사라졌다..😨)</del></p>\n<p><strong>Datastore를 사용하면 어떤 좋은점들이 있어서 사용을 이렇게 권고하는 것인가?</strong> Datastore를 하나씩 알아가 보자!</p>\n<h1>🚀 DataStore</h1>\n<p><strong>DataStore</strong> 는 <code class=\"language-text\">Key-Value</code> 타입으로 구성되어 있는 <strong>Preferences DataStore</strong> 와 <strong>사용자가 정의한 데이터를 저장</strong> 할 수 있는 <strong>Proto DataStore</strong> 가 존재한다.</p>\n<p><strong>Proto DataStore</strong> 을 사용하기 위해서는 '프로토콜 버퍼'를 이용하여 <strong>스키마를 정의</strong> 해야한다. 이는 데이터의 타입을 보장과 더불어 SharedPreferences보다 빠르고 단순하다👍</p>\n<h2>DataStore의 좋은점?</h2>\n<img src=\"https://user-images.githubusercontent.com/63226023/174060195-e04e5a19-9058-4a05-8e1e-74e3ffc56496.png\">\n<p>[출처] <a href=\"https://android-developers.googleblog.com/2020/09/prefer-storing-data-with-jetpack.html\">https://android-developers.googleblog.com/2020/09/prefer-storing-data-with-jetpack.html</a></p>\n<blockquote>\n<p>🤔 DataStore가 한눈에도 더 많은 것을 제공해 주는것을 볼 수 있다. 간단하게 요약하자면 다음과 같은 특징이 있다.</p>\n<ul>\n<li><strong>코루틴 + Flow</strong> 를 사용하여 <strong>Read/Write 에 대한 비동기 API를 제공</strong></li>\n<li><strong>UI Thread(Main Thread)</strong> 를 호출해도 안전 <strong>(Dispatcher.IO에서 동작한다)</strong></li>\n<li><strong>RuntimeException 으로부터 안전</strong></li>\n</ul>\n</blockquote>\n<h2>직접 사용해 보기</h2>\n<h3>라이브러리 추가</h3>\n<p><code class=\"language-text\">build.gradle(app)</code>에 아래와 같이 라이브러리를 추가해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token comment\">// Datastore</span>\n<span class=\"token keyword\">implementation</span> <span class=\"token string\">'androidx.datastore:datastore-preferences:1.0.0'</span></code></pre></div>\n<h3>DataStore 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">AppDatastoreManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> AppDataStore <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> Context<span class=\"token punctuation\">.</span>datastore<span class=\"token operator\">:</span> DataStore<span class=\"token operator\">&lt;</span>Preferences<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> <span class=\"token function\">preferencesDataStore</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"datastore_name\"</span></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// String 타입 저장 Key 값</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> stringKey <span class=\"token operator\">=</span> <span class=\"token function\">stringPreferencesKey</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"key_name\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Int 타입 저장 Key 값</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> intKey <span class=\"token operator\">=</span> <span class=\"token function\">intPreferencesKey</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"key_name\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>DataStore</strong> 을 생성해 주기 위해서는 안드로이드 Context의 확장 프로퍼티로 선언해 주고 DataStore에서 사용할 키 값을 설정해 준다.</p>\n<p><strong>PreferencesKey</strong> 는 아래와 같은 7가지 타입이 있다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/174065589-5a4a0d80-1034-4561-ad8c-e94342fe504f.png\">\n<h3>데이터를 Read하는 Flow 생성</h3>\n<p><code class=\"language-text\">DataStore</code>에서 데이터를 읽어올 때 <strong>코루틴의 <code class=\"language-text\">Flow</code></strong> 를 사용하여 데이터를 <strong><code class=\"language-text\">Flow</code></strong> 객체로 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intValue <span class=\"token operator\">:</span>Flow<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    context<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>data\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span> <span class=\"token punctuation\">{</span> exception <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">is</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token function\">emptyPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> exception\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> preference <span class=\"token operator\">-></span>\n            preference<span class=\"token punctuation\">[</span>intKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">map()</code> 함수를 사용하여 아까 생성한 <strong>키 값(intKey)에 대응하는 Value</strong> 를 <code class=\"language-text\">Flow</code> 형태로 가져오도록 한다.</p>\n<p>또한 <code class=\"language-text\">catch()</code> 를 사용하여, 데이터 읽어오기에 실패하는 경우 <code class=\"language-text\">IOException</code> 을 처리하여 <strong>emptyPreferences()</strong> 로 비어있는 값을 전달해준다.</p>\n<h3>데이터를 Write하는 메소드 생성</h3>\n<p><code class=\"language-text\">DataStore</code>에 값을 쓸 때는 <code class=\"language-text\">edit()</code>메소드를 이용한다. 또한 값을 쓸때는 <strong>반드시 비동기</strong> 로 작업이 되야하므로 <strong><code class=\"language-text\">suspend</code></strong> 키워드를 통해 해당 작업이 <strong>코루틴 영역에서 동작</strong> 할 수 있도록 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span>datastore\n        <span class=\"token punctuation\">.</span><span class=\"token function\">edit</span> <span class=\"token punctuation\">{</span> preferences <span class=\"token operator\">-></span>\n            preferences<span class=\"token punctuation\">[</span>intKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>이제 사용하기</h3>\n<p>DataStore은 <code class=\"language-text\">Singleton</code>으로 관리되어야 한다. 따라서 Application에서 초기화해주고 사용해보도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> App<span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> datastore<span class=\"token operator\">:</span> AppDataStoreManager\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">initDatastore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">initDatastore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        datastore <span class=\"token operator\">=</span> <span class=\"token function\">AppDatastoreManager</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>1. 데이터 값 읽고 쓰기</h2>\n<p><code class=\"language-text\">DataStore</code>에서 읽은 데이터를 사용하기 위해서는 <strong>DataStore 클래스에서 선언해 놓은 변수에 접근한 후</strong> <code class=\"language-text\">Flow</code>객체를 반환 받고 <strong><code class=\"language-text\">collect</code></strong> 함수를 이용하여 값을 읽어온다. <code class=\"language-text\">CoroutineScope</code>에서 수행되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">-></span>\n    <span class=\"token comment\">// 값을 사용하여 뷰에 적용</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>딱 원하는 타이밍에 한 번만 값을 받아와서 사용하고 싶을때는 <code class=\"language-text\">first()</code> 함수를 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> intValue <span class=\"token operator\">=</span> App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>동기적인 동작이 꼭 필요한 경우 <code class=\"language-text\">runBlocking</code>을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">runBlocking <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">val</span> intValue <span class=\"token operator\">=</span> App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>UI 스레드에서 동기 작업을 실행하면 <strong>ANR 또는 UI 버벅거림</strong> 이 발생할 수 있기 때문에 <strong>과도한 동작은 금해야한다😨</strong></p>\n</blockquote>\n<h2>2. 데이터 저장</h2>\n<p><code class=\"language-text\">DataStore</code>에 값을 저장하고 싶을때는 미리 작성해 놓은 함수(setInt())를 사용하면 된다. 이때에 <code class=\"language-text\">suspending</code>으로 지정되어 있기 때문에 <strong>코루틴이나 RxJava를 통해</strong> 비동기적으로 호출해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지금까지 SharedPreferences를 대체하여 사용하기 위한 DataStore를 알아보았다. 자체적으로 코루틴의 Flow를 사용하여 비동기적이고 안전하게 사용이 가능하다는 점을 보고 DataStore를 꾸준히 사용해 보면서 점점 더 큰 장점들을 알아가보면 좋을것 같다.</p>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/datastore?gclid=Cj0KCQjwqKuKBhCxARIsACf4XuHSV6c0dQKCbCAO0rH42Pc-MFbVKxhgf1YRYxu2qf_yPmkeU5m3WfoaAqfKEALw_wcB&#x26;gclsrc=aw.ds#kts\">https://developer.android.com/topic/libraries/architecture/datastore?gclid=Cj0KCQjwqKuKBhCxARIsACf4XuHSV6c0dQKCbCAO0rH42Pc-MFbVKxhgf1YRYxu2qf<em>yPmkeU5m3WfoaAqfKEALw</em>wcB&#x26;gclsrc=aw.ds#kts</a></li>\n<li><a href=\"https://kangmin1012.tistory.com/47\">https://kangmin1012.tistory.com/47</a></li>\n</ul>","frontmatter":{"title":"새로운 동료 DataStore 알아보기","date":"June 16, 2022","update":"June 16, 2022","tags":["Datastore","Local Data","jetpack"],"series":"Android"},"fields":{"slug":"/datastore/","readingTime":{"minutes":6.01}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/graph-sortest-path/"},"frontmatter":{"title":"그래프 최단거리 구하기"}},"next":{"fields":{"slug":"/generic-in-out/"},"frontmatter":{"title":"Kotlin 제네릭의 in, out 키워드?"}}},"pageContext":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","series":"Android","previousPostId":"d80bd3c0-f2e9-5a38-a7fd-21ad9685fc86","nextPostId":"b0b78929-653d-5d49-a7cf-79c5069f2dab"}},"staticQueryHashes":[],"slicesMap":{}}