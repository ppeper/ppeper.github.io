{"componentChunkName":"component---src-templates-post-jsx","path":"/datastore/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","excerpt":"로컬 저장 지금까지 안드로이드 로컬에 간단한 데이터를 저장하기 위해 를 사용하였다. 구글에서는 DataStore 의 사용을 적극 권장하고 있고 (SharedPreferences는 구글 공식 문서에서도 사용가이드가 사라졌다..😨) Datastore를 사용하면 어떤 좋은점들이 있어서 사용을 이렇게 권고하는 것인가? Datastore를 하나씩 알아가 보자! 🚀…","html":"<img src=\"https://user-images.githubusercontent.com/63226023/174076432-24f77ccb-dcb7-45fe-a70d-5d65e4d08f19.png\">\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> 로컬 데이터 <span class=\"token punctuation\">{</span>\n    DataStore<span class=\"token operator\">:</span> 이제 여기는 얼씬도 말라<span class=\"token punctuation\">.</span> 알았어<span class=\"token operator\">?</span>   \n    SharedPreferences<span class=\"token operator\">:</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>로컬 저장</h1>\n<p>지금까지 안드로이드 로컬에 간단한 데이터를 저장하기 위해 <code class=\"language-text\">SharedPreferences</code>를 사용하였다.<br>\n구글에서는 <strong>DataStore</strong> 의 사용을 적극 권장하고 있고 <del>(SharedPreferences는 구글 공식 문서에서도 사용가이드가 사라졌다..😨)</del></p>\n<p><strong>Datastore를 사용하면 어떤 좋은점들이 있어서 사용을 이렇게 권고하는 것인가?</strong> Datastore를 하나씩 알아가 보자!</p>\n<h1>🚀 DataStore</h1>\n<p><strong>DataStore</strong> 는 <code class=\"language-text\">Key-Value</code> 타입으로 구성되어 있는 <strong>Preferences DataStore</strong> 와 <strong>사용자가 정의한 데이터를 저장</strong> 할 수 있는 <strong>Proto DataStore</strong> 가 존재한다.</p>\n<p><strong>Proto DataStore</strong> 을 사용하기 위해서는 '프로토콜 버퍼'를 이용하여 <strong>스키마를 정의</strong> 해야한다. 이는 데이터의 타입을 보장과 더불어 SharedPreferences보다 빠르고 단순하다👍</p>\n<h2>DataStore의 좋은점?</h2>\n<img src=\"https://user-images.githubusercontent.com/63226023/174060195-e04e5a19-9058-4a05-8e1e-74e3ffc56496.png\">\n<p>[출처] <a href=\"https://android-developers.googleblog.com/2020/09/prefer-storing-data-with-jetpack.html\">https://android-developers.googleblog.com/2020/09/prefer-storing-data-with-jetpack.html</a></p>\n<blockquote>\n<p>🤔 DataStore가 한눈에도 더 많은 것을 제공해 주는것을 볼 수 있다. 간단하게 요약하자면 다음과 같은 특징이 있다.</p>\n<ul>\n<li><strong>코루틴 + Flow</strong> 를 사용하여 <strong>Read/Write 에 대한 비동기 API를 제공</strong></li>\n<li><strong>UI Thread(Main Thread)</strong> 를 호출해도 안전 <strong>(Dispatcher.IO에서 동작한다)</strong></li>\n<li><strong>RuntimeException 으로부터 안전</strong></li>\n</ul>\n</blockquote>\n<h2>직접 사용해 보기</h2>\n<h3>라이브러리 추가</h3>\n<p><code class=\"language-text\">build.gradle(app)</code>에 아래와 같이 라이브러리를 추가해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token comment\">// Datastore</span>\n<span class=\"token keyword\">implementation</span> <span class=\"token string\">'androidx.datastore:datastore-preferences:1.0.0'</span></code></pre></div>\n<h3>DataStore 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">AppDatastoreManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> AppDataStore <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> Context<span class=\"token punctuation\">.</span>datastore<span class=\"token operator\">:</span> DataStore<span class=\"token operator\">&lt;</span>Preferences<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> <span class=\"token function\">preferencesDataStore</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"datastore_name\"</span></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// String 타입 저장 Key 값</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> stringKey <span class=\"token operator\">=</span> <span class=\"token function\">stringPreferencesKey</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"key_name\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Int 타입 저장 Key 값</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> intKey <span class=\"token operator\">=</span> <span class=\"token function\">intPreferencesKey</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"key_name\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>DataStore</strong> 을 생성해 주기 위해서는 안드로이드 Context의 확장 프로퍼티로 선언해 주고 DataStore에서 사용할 키 값을 설정해 준다.</p>\n<p><strong>PreferencesKey</strong> 는 아래와 같은 7가지 타입이 있다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/174065589-5a4a0d80-1034-4561-ad8c-e94342fe504f.png\">\n<h3>데이터를 Read하는 Flow 생성</h3>\n<p><code class=\"language-text\">DataStore</code>에서 데이터를 읽어올 때 <strong>코루틴의 <code class=\"language-text\">Flow</code></strong> 를 사용하여 데이터를 <strong><code class=\"language-text\">Flow</code></strong> 객체로 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intValue <span class=\"token operator\">:</span>Flow<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    context<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>data\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span> <span class=\"token punctuation\">{</span> exception <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">is</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token function\">emptyPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> exception\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> preference <span class=\"token operator\">-></span>\n            preference<span class=\"token punctuation\">[</span>intKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">map()</code> 함수를 사용하여 아까 생성한 <strong>키 값(intKey)에 대응하는 Value</strong> 를 <code class=\"language-text\">Flow</code> 형태로 가져오도록 한다.</p>\n<p>또한 <code class=\"language-text\">catch()</code> 를 사용하여, 데이터 읽어오기에 실패하는 경우 <code class=\"language-text\">IOException</code> 을 처리하여 <strong>emptyPreferences()</strong> 로 비어있는 값을 전달해준다.</p>\n<h3>데이터를 Write하는 메소드 생성</h3>\n<p><code class=\"language-text\">DataStore</code>에 값을 쓸 때는 <code class=\"language-text\">edit()</code>메소드를 이용한다. 또한 값을 쓸때는 <strong>반드시 비동기</strong> 로 작업이 되야하므로 <strong><code class=\"language-text\">suspend</code></strong> 키워드를 통해 해당 작업이 <strong>코루틴 영역에서 동작</strong> 할 수 있도록 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span>datastore\n        <span class=\"token punctuation\">.</span><span class=\"token function\">edit</span> <span class=\"token punctuation\">{</span> preferences <span class=\"token operator\">-></span>\n            preferences<span class=\"token punctuation\">[</span>intKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>이제 사용하기</h3>\n<p>DataStore은 <code class=\"language-text\">Singleton</code>으로 관리되어야 한다. 따라서 Application에서 초기화해주고 사용해보도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> App<span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> datastore<span class=\"token operator\">:</span> AppDataStoreManager\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">initDatastore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">initDatastore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        datastore <span class=\"token operator\">=</span> <span class=\"token function\">AppDatastoreManager</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>1. 데이터 값 읽고 쓰기</h2>\n<p><code class=\"language-text\">DataStore</code>에서 읽은 데이터를 사용하기 위해서는 <strong>DataStore 클래스에서 선언해 놓은 변수에 접근한 후</strong> <code class=\"language-text\">Flow</code>객체를 반환 받고 <strong><code class=\"language-text\">collect</code></strong> 함수를 이용하여 값을 읽어온다. <code class=\"language-text\">CoroutineScope</code>에서 수행되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">-></span>\n    <span class=\"token comment\">// 값을 사용하여 뷰에 적용</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>딱 원하는 타이밍에 한 번만 값을 받아와서 사용하고 싶을때는 <code class=\"language-text\">first()</code> 함수를 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> intValue <span class=\"token operator\">=</span> App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>동기적인 동작이 꼭 필요한 경우 <code class=\"language-text\">runBlocking</code>을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">runBlocking <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">val</span> intValue <span class=\"token operator\">=</span> App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>UI 스레드에서 동기 작업을 실행하면 <strong>ANR 또는 UI 버벅거림</strong> 이 발생할 수 있기 때문에 <strong>과도한 동작은 금해야한다😨</strong></p>\n</blockquote>\n<h2>2. 데이터 저장</h2>\n<p><code class=\"language-text\">DataStore</code>에 값을 저장하고 싶을때는 미리 작성해 놓은 함수(setInt())를 사용하면 된다. 이때에 <code class=\"language-text\">suspending</code>으로 지정되어 있기 때문에 <strong>코루틴이나 RxJava를 통해</strong> 비동기적으로 호출해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지금까지 SharedPreferences를 대체하여 사용하기 위한 DataStore를 알아보았다. 자체적으로 코루틴의 Flow를 사용하여 비동기적이고 안전하게 사용이 가능하다는 점을 보고 DataStore를 꾸준히 사용해 보면서 점점 더 큰 장점들을 알아가보면 좋을것 같다.</p>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/datastore?gclid=Cj0KCQjwqKuKBhCxARIsACf4XuHSV6c0dQKCbCAO0rH42Pc-MFbVKxhgf1YRYxu2qf_yPmkeU5m3WfoaAqfKEALw_wcB&#x26;gclsrc=aw.ds#kts\">https://developer.android.com/topic/libraries/architecture/datastore?gclid=Cj0KCQjwqKuKBhCxARIsACf4XuHSV6c0dQKCbCAO0rH42Pc-MFbVKxhgf1YRYxu2qf<em>yPmkeU5m3WfoaAqfKEALw</em>wcB&#x26;gclsrc=aw.ds#kts</a></li>\n<li><a href=\"https://kangmin1012.tistory.com/47\">https://kangmin1012.tistory.com/47</a></li>\n</ul>","frontmatter":{"title":"새로운 동료 DataStore 알아보기","date":"June 16, 2022","update":"June 16, 2022","tags":["Datastore","Local Data","jetpack"],"series":"Android"},"fields":{"slug":"/datastore/","readingTime":{"minutes":6.01}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/graph-sortest-path/"},"frontmatter":{"title":"그래프 최단거리 구하기"}},"next":{"fields":{"slug":"/generic-in-out/"},"frontmatter":{"title":"Kotlin 제네릭의 in, out 키워드?"}}},"pageContext":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","series":"Android","previousPostId":"67819626-dcdc-5ece-bab4-311c5c8f6097","nextPostId":"9aac51e6-78e3-571a-9302-70ec8fdcea78"}},"staticQueryHashes":[],"slicesMap":{}}