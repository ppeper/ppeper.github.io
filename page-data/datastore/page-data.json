{"componentChunkName":"component---src-templates-post-jsx","path":"/datastore/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","excerpt":"로컬 저장 지금까지 안드로이드 로컬에 간단한 데이터를 저장하기 위해 를 사용하였다. 구글에서는 DataStore 의 사용을 적극 권장하고 있고 (SharedPreferences는 구글 공식 문서에서도 사용가이드가 사라졌다..😨) Datastore를 사용하면 어떤 좋은점들이 있어서 사용을 이렇게 권고하는 것인가? Datastore를 하나씩 알아가 보자! 🚀…","html":"<img src='https://user-images.githubusercontent.com/63226023/174076432-24f77ccb-dcb7-45fe-a70d-5d65e4d08f19.png'>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> 로컬 데이터 <span class=\"token punctuation\">{</span>\n    DataStore<span class=\"token operator\">:</span> 이제 여기는 얼씬도 말라<span class=\"token punctuation\">.</span> 알았어<span class=\"token operator\">?</span>   \n    SharedPreferences<span class=\"token operator\">:</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"로컬-저장\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC-%EC%A0%80%EC%9E%A5\" aria-label=\"로컬 저장 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>로컬 저장</h1>\n<p>지금까지 안드로이드 로컬에 간단한 데이터를 저장하기 위해 <code class=\"language-text\">SharedPreferences</code>를 사용하였다.<br>\n구글에서는 <strong>DataStore</strong> 의 사용을 적극 권장하고 있고 <del>(SharedPreferences는 구글 공식 문서에서도 사용가이드가 사라졌다..😨)</del></p>\n<p><strong>Datastore를 사용하면 어떤 좋은점들이 있어서 사용을 이렇게 권고하는 것인가?</strong> Datastore를 하나씩 알아가 보자!</p>\n<h1 id=\"-DataStore\" style=\"position:relative;\"><a href=\"#-DataStore\" aria-label=\" DataStore permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>🚀 DataStore</h1>\n<p><strong>DataStore</strong> 는 <code class=\"language-text\">Key-Value</code> 타입으로 구성되어 있는 <strong>Preferences DataStore</strong> 와 <strong>사용자가 정의한 데이터를 저장</strong> 할 수 있는 <strong>Proto DataStore</strong> 가 존재한다.</p>\n<p><strong>Proto DataStore</strong> 을 사용하기 위해서는 '프로토콜 버퍼'를 이용하여 <strong>스키마를 정의</strong> 해야한다. 이는 데이터의 타입을 보장과 더불어 SharedPreferences보다 빠르고 단순하다👍</p>\n<h2 id=\"DataStore의-좋은점\" style=\"position:relative;\"><a href=\"#DataStore%EC%9D%98-%EC%A2%8B%EC%9D%80%EC%A0%90\" aria-label=\"DataStore의 좋은점 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>DataStore의 좋은점?</h2>\n<img src='https://user-images.githubusercontent.com/63226023/174060195-e04e5a19-9058-4a05-8e1e-74e3ffc56496.png'>\n<p>[출처] <a href=\"https://android-developers.googleblog.com/2020/09/prefer-storing-data-with-jetpack.html\">https://android-developers.googleblog.com/2020/09/prefer-storing-data-with-jetpack.html</a></p>\n<blockquote>\n<p>🤔 DataStore가 한눈에도 더 많은 것을 제공해 주는것을 볼 수 있다. 간단하게 요약하자면 다음과 같은 특징이 있다.</p>\n<ul>\n<li><strong>코루틴 + Flow</strong> 를 사용하여 <strong>Read/Write 에 대한 비동기 API를 제공</strong></li>\n<li><strong>UI Thread(Main Thread)</strong> 를 호출해도 안전 <strong>(Dispatcher.IO에서 동작한다)</strong></li>\n<li><strong>RuntimeException 으로부터 안전</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"직접-사용해-보기\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"직접 사용해 보기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>직접 사용해 보기</h2>\n<h3 id=\"라이브러리-추가\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%B6%94%EA%B0%80\" aria-label=\"라이브러리 추가 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>라이브러리 추가</h3>\n<p><code class=\"language-text\">build.gradle(app)</code>에 아래와 같이 라이브러리를 추가해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token comment\">// Datastore</span>\n<span class=\"token keyword\">implementation</span> <span class=\"token string\">'androidx.datastore:datastore-preferences:1.0.0'</span></code></pre></div>\n<h3 id=\"DataStore-생성\" style=\"position:relative;\"><a href=\"#DataStore-%EC%83%9D%EC%84%B1\" aria-label=\"DataStore 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>DataStore 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">AppDatastoreManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> AppDataStore <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> Context<span class=\"token punctuation\">.</span>datastore<span class=\"token operator\">:</span> DataStore<span class=\"token operator\">&lt;</span>Preferences<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> <span class=\"token function\">preferencesDataStore</span><span class=\"token punctuation\">(</span>\n        name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"datastore_name\"</span></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// String 타입 저장 Key 값</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> stringKey <span class=\"token operator\">=</span> <span class=\"token function\">stringPreferencesKey</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"key_name\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Int 타입 저장 Key 값</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> intKey <span class=\"token operator\">=</span> <span class=\"token function\">intPreferencesKey</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"key_name\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>DataStore</strong> 을 생성해 주기 위해서는 안드로이드 Context의 확장 프로퍼티로 선언해 주고 DataStore에서 사용할 키 값을 설정해 준다.</p>\n<p><strong>PreferencesKey</strong> 는 아래와 같은 7가지 타입이 있다.</p>\n<img src='https://user-images.githubusercontent.com/63226023/174065589-5a4a0d80-1034-4561-ad8c-e94342fe504f.png'>\n<h3 id=\"데이터를-Read하는-Flow-생성\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-Read%ED%95%98%EB%8A%94-Flow-%EC%83%9D%EC%84%B1\" aria-label=\"데이터를 Read하는 Flow 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>데이터를 Read하는 Flow 생성</h3>\n<p><code class=\"language-text\">DataStore</code>에서 데이터를 읽어올 때 <strong>코루틴의 <code class=\"language-text\">Flow</code></strong> 를 사용하여 데이터를 <strong><code class=\"language-text\">Flow</code></strong> 객체로 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intValue <span class=\"token operator\">:</span>Flow<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    context<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>data\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span> <span class=\"token punctuation\">{</span> exception <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">is</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token function\">emptyPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> exception\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> preference <span class=\"token operator\">-></span>\n            preference<span class=\"token punctuation\">[</span>intKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">map()</code> 함수를 사용하여 아까 생성한 <strong>키 값(intKey)에 대응하는 Value</strong> 를 <code class=\"language-text\">Flow</code> 형태로 가져오도록 한다.</p>\n<p>또한 <code class=\"language-text\">catch()</code> 를 사용하여, 데이터 읽어오기에 실패하는 경우 <code class=\"language-text\">IOException</code> 을 처리하여 <strong>emptyPreferences()</strong> 로 비어있는 값을 전달해준다.</p>\n<h3 id=\"데이터를-Write하는-메소드-생성\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-Write%ED%95%98%EB%8A%94-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%83%9D%EC%84%B1\" aria-label=\"데이터를 Write하는 메소드 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>데이터를 Write하는 메소드 생성</h3>\n<p><code class=\"language-text\">DataStore</code>에 값을 쓸 때는 <code class=\"language-text\">edit()</code>메소드를 이용한다. 또한 값을 쓸때는 <strong>반드시 비동기</strong> 로 작업이 되야하므로 <strong><code class=\"language-text\">suspend</code></strong> 키워드를 통해 해당 작업이 <strong>코루틴 영역에서 동작</strong> 할 수 있도록 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span>datastore\n        <span class=\"token punctuation\">.</span><span class=\"token function\">edit</span> <span class=\"token punctuation\">{</span> preferences <span class=\"token operator\">-></span>\n            preferences<span class=\"token punctuation\">[</span>intKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"이제-사용하기\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"이제 사용하기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>이제 사용하기</h3>\n<p>DataStore은 <code class=\"language-text\">Singleton</code>으로 관리되어야 한다. 따라서 Application에서 초기화해주고 사용해보도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> App<span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> datastore<span class=\"token operator\">:</span> AppDataStoreManager\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">initDatastore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">initDatastore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        datastore <span class=\"token operator\">=</span> <span class=\"token function\">AppDatastoreManager</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>1. 데이터 값 읽고 쓰기</h2>\n<p><code class=\"language-text\">DataStore</code>에서 읽은 데이터를 사용하기 위해서는 <strong>DataStore 클래스에서 선언해 놓은 변수에 접근한 후</strong> <code class=\"language-text\">Flow</code>객체를 반환 받고 <strong><code class=\"language-text\">collect</code></strong> 함수를 이용하여 값을 읽어온다. <code class=\"language-text\">CoroutineScope</code>에서 수행되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">-></span>\n    <span class=\"token comment\">// 값을 사용하여 뷰에 적용</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>딱 원하는 타이밍에 한 번만 값을 받아와서 사용하고 싶을때는 <code class=\"language-text\">first()</code> 함수를 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> intValue <span class=\"token operator\">=</span> App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>동기적인 동작이 꼭 필요한 경우 <code class=\"language-text\">runBlocking</code>을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">runBlocking <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">val</span> intValue <span class=\"token operator\">=</span> App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span>intValue<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>UI 스레드에서 동기 작업을 실행하면 <strong>ANR 또는 UI 버벅거림</strong> 이 발생할 수 있기 때문에 <strong>과도한 동작은 금해야한다😨</strong></p>\n</blockquote>\n<h2>2. 데이터 저장</h2>\n<p><code class=\"language-text\">DataStore</code>에 값을 저장하고 싶을때는 미리 작성해 놓은 함수(setInt())를 사용하면 된다. 이때에 <code class=\"language-text\">suspending</code>으로 지정되어 있기 때문에 <strong>코루틴이나 RxJava를 통해</strong> 비동기적으로 호출해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">CoroutineScope</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n    App<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지금까지 SharedPreferences를 대체하여 사용하기 위한 DataStore를 알아보았다. 자체적으로 코루틴의 Flow를 사용하여 비동기적이고 안전하게 사용이 가능하다는 점을 보고 DataStore를 꾸준히 사용해 보면서 점점 더 큰 장점들을 알아가보면 좋을것 같다.</p>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/datastore?gclid=Cj0KCQjwqKuKBhCxARIsACf4XuHSV6c0dQKCbCAO0rH42Pc-MFbVKxhgf1YRYxu2qf_yPmkeU5m3WfoaAqfKEALw_wcB&#x26;gclsrc=aw.ds#kts\">https://developer.android.com/topic/libraries/architecture/datastore?gclid=Cj0KCQjwqKuKBhCxARIsACf4XuHSV6c0dQKCbCAO0rH42Pc-MFbVKxhgf1YRYxu2qf<em>yPmkeU5m3WfoaAqfKEALw</em>wcB&#x26;gclsrc=aw.ds#kts</a></li>\n<li><a href=\"https://kangmin1012.tistory.com/47\">https://kangmin1012.tistory.com/47</a></li>\n</ul>","frontmatter":{"title":"새로운 동료 DataStore 알아보기","date":"June 16, 2022","update":"June 16, 2022","tags":["Datastore","Local Data","jetpack"],"series":"Android"},"fields":{"slug":"/datastore/","readingTime":{"minutes":6.01}}},"seriesList":{"edges":[{"node":{"id":"8da53698-7fbf-50de-b57d-674258641696","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"32630555-7ffc-5c77-8e93-41b9441313c7","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"02cd12ae-6f40-58aa-be67-edbe6836235b","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"351d6f88-b8e1-5a92-8ab2-5a18f816e5f2","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"584879b5-e89c-570d-9728-e24e7543a406","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"e77807c0-3767-530f-a643-b3c28eead54b","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"7b7ee01b-c911-5343-9957-c4ef27024778","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"df99c5d4-e349-5463-9a5f-c65c2c714a98","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"c1750e54-c129-5248-b9a4-dc6ead87c256","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"ba69adf2-5458-521e-b6eb-85bbad0e6385","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"cc73ab05-b427-563d-82a2-220a8c3fedb6","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"832ca7b8-20af-5b55-9b16-2610187c24ae","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"379be128-999b-5d4c-b690-3f2552a189f3","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"f004c3a4-f9d8-509d-ab8f-7ae273cc1f6f","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"03b60894-ee1f-5d06-94b7-a41567772d61","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"7a30a0fa-f5f4-5b2a-9e51-03568d97de6d","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"793dad13-2ba5-5df0-957c-4763d3df25a2","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"e7e7c2d3-ace1-53dc-bd3b-ee4e96ad9b6c","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"fcc174d6-e820-5bfb-8407-5db69e9cff26","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"9ca4a2fd-2662-5c91-99af-5ddf44fc5fd4","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"2af94fb4-d2f5-5af1-9f2a-cd678174506d","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"4135a47f-c10c-5535-8b71-3add3f62dd6c","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"3f56723e-63f6-5dd9-b2e2-fe403e99c18b","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"e8c7ca90-23b4-5683-a655-90460391cf01","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"b600df71-260c-567f-8ccf-592f16304768","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"52277946-9258-55cd-9361-7b6cd2c26cf6","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"26ead8cc-53e7-5fca-8930-d6762ae10124","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"abbe933c-9872-5d48-8ef7-04d14e785ccc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f2966618-c744-5fb8-b785-3650ebae1072","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"bbef1829-8d9e-589f-b1c8-22945fc1bd11","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"75dc9cf5-f813-58b3-b426-c9125325ea76","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"1eaf8bbe-518b-5a56-bd4d-230253d4a1db","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"bae61635-412c-5e43-8a7b-1eafe2722928","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"28df186b-d648-5562-a726-a8c7350b5a01","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"eb0bbfb7-fa8e-53da-b0ad-3b250756090e","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}},{"node":{"id":"c4e9fd73-d14b-5068-9741-133bd0ab6738","fields":{"slug":"/android-scope-storage/"},"frontmatter":{"title":"안드로이드 Scope Storage 사용하기"}}}]},"previous":{"fields":{"slug":"/graph-sortest-path/"},"frontmatter":{"title":"그래프 최단거리 구하기"}},"next":{"fields":{"slug":"/generic-in-out/"},"frontmatter":{"title":"Kotlin 제네릭의 in, out 키워드?"}}},"pageContext":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","series":"Android","previousPostId":"100720b0-59e5-5a28-985b-043ebfeba57f","nextPostId":"8f0d524f-1f01-543b-bd13-0856b4cdb8a1"}},"staticQueryHashes":[],"slicesMap":{}}