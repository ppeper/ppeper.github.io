{"componentChunkName":"component---src-templates-post-jsx","path":"/android-hilt/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","excerpt":"Hilt Hilt란 Google의 Dagger2를 기본으로 만든 의존성 주입 라이브러리이다. 따라서 Dagger2에 대한 Component, Scope를 기본적을 제공하며, 초기 프로젝트 환경 구축 비용을 크게 줄이는 것이 목적이 있다. Hilt에 대해 알아보기 전에 Dagger2를 사용하여 의존성 주입을 사용한 간단한 예시를 구성해 보면 다음과 같다. …","html":"<h1>Hilt</h1>\n<p>Hilt란 Google의 Dagger2를 기본으로 만든 의존성 주입 라이브러리이다. 따라서 Dagger2에 대한 Component, Scope를 기본적을 제공하며, 초기 프로젝트 환경 구축 비용을 크게 줄이는 것이 목적이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Third Party Library라고 생각</span>\n<span class=\"token keyword\">class</span> DataSource <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"TAG\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터 다운로드..\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hilt에 대해 알아보기 전에 Dagger2를 사용하여 의존성 주입을 사용한 간단한 예시를 구성해 보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Module</span>\n<span class=\"token keyword\">class</span> DataModule <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@Provides</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">providesDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DataSource <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">DataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">(</span>modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>DataModule<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">interface</span> DataComponent <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>mainActivity<span class=\"token operator\">:</span> MainActivity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> App<span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> dataComponent<span class=\"token operator\">:</span> DataComponent\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        dataComponent <span class=\"token operator\">=</span> DaggerDataComponent<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Inject</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> dataSource<span class=\"token operator\">:</span> DataSource\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span>application <span class=\"token keyword\">as</span> App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dataComponent\n            <span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 사용하기</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">&lt;application\n    android:name=\".App\"\n    .\n    .\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Dagger2로 적용되어있는 간단한 예시를 Hilt를 알아보면서 바꿔보도록 한다.</p>\n<h1>종속 항목 추가</h1>\n<p>먼저 <code class=\"language-text\">hilt-android-gradle-plugin</code> 플러그인을 프로젝트의 루트 build.gradle 파일에 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\">buildscript <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">...</span>\n    <span class=\"token keyword\">dependencies</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">...</span>\n        classpath <span class=\"token string\">'com.google.dagger:hilt-android-gradle-plugin:2.28-alpha'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">app/build.gradle</code> 파일에 종속 항복을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token keyword\">plugins</span> <span class=\"token punctuation\">{</span>\n    id <span class=\"token string\">'kotlin-kapt'</span>\n    id <span class=\"token string\">'dagger.hilt.android.plugin'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">dependencies</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Dagger - Hilt</span>\n    <span class=\"token keyword\">implementation</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"com.google.dagger:hilt-android:2.41\"</span></span>\n    kapt <span class=\"token interpolation-string\"><span class=\"token string\">\"com.google.dagger:hilt-android-compiler:2.41\"</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hilt는 자바8 기능을 사용한다. 대부분 자바8을 사용하기 때문에 이미 되어있는 부분일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\">compileOptions <span class=\"token punctuation\">{</span>\n    sourceCompatibility JavaVersion<span class=\"token punctuation\">.</span>VERSION_1_8\n    targetCompatibility JavaVersion<span class=\"token punctuation\">.</span>VERSION_1_8\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>version 범블비</h2>\n<p>안드로이드 스튜디오 범블비 버전에선 <code class=\"language-text\">build.gradle</code>과 <code class=\"language-text\">settings.gradle</code>이 변화하였다.</p>\n<p><code class=\"language-text\">build.gradle</code>에 있던 이 부분이 <code class=\"language-text\">settings.gradle</code>로 이동하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token keyword\">repositories</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">gradlePluginPortal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">google</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">build.gradle</code> 의 classpath 설정하던 부분이 다음과 같이 변경되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token keyword\">plugins</span> <span class=\"token punctuation\">{</span>\n    id <span class=\"token string\">'com.android.application'</span> version <span class=\"token string\">'7.1.1'</span> <span class=\"token keyword\">apply</span> <span class=\"token boolean\">false</span>\n    id <span class=\"token string\">'com.android.library'</span> version <span class=\"token string\">'7.1.1'</span> <span class=\"token keyword\">apply</span> <span class=\"token boolean\">false</span>\n    id <span class=\"token string\">'org.jetbrains.kotlin.android'</span> version <span class=\"token string\">'1.6.10'</span> <span class=\"token keyword\">apply</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hilt의 2.41버전이 나오면서 classpath는 <code class=\"language-text\">build.gradle</code>에 다음과 같이 넣어주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token keyword\">plugins</span> <span class=\"token punctuation\">{</span>\n    id <span class=\"token string\">'com.android.application'</span> version <span class=\"token string\">'7.1.1'</span> <span class=\"token keyword\">apply</span> <span class=\"token boolean\">false</span>\n    id <span class=\"token string\">'com.android.library'</span> version <span class=\"token string\">'7.1.1'</span> <span class=\"token keyword\">apply</span> <span class=\"token boolean\">false</span>\n    id <span class=\"token string\">'org.jetbrains.kotlin.android'</span> version <span class=\"token string\">'1.6.10'</span> <span class=\"token keyword\">apply</span> <span class=\"token boolean\">false</span>\n    id <span class=\"token string\">'com.google.dagger.hilt.android'</span> version <span class=\"token string\">'2.41'</span> <span class=\"token keyword\">apply</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>@HiltAndroidApp</h1>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> App<span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> dataComponent<span class=\"token operator\">:</span> DataComponent\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        dataComponent <span class=\"token operator\">=</span> DaggerDataComponent<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hilt에서 <strong>@HiltAndroidApp</strong> 어노테이션을 사용하면 컴파일 타임시 표준 Component 생성에 필요한 클래스들을 초기화한다. 따라서 Hilt를 프로젝트에 적용하기 위해서는 필수적으로 요구되는 과정이다. </p>\n<p>Dagger를 적용하였는 App 클래스를 Hilt로 변경하면 다음과 같이 코드가 줄어든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@HiltAndroidApp</span>\n<span class=\"token keyword\">class</span> App<span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">&lt;application\n    android:name=\".App\"\n    .\n    .\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1>Component hierachy</h1>\n<p>기존의 Dagger2는 개발자가 직접 필요한 Component들을 작성하고 상속 관계를 정의하여 사용하였지만, Hilt에서는 Android 화경에서 표준적으로 사용되는 Component들을 기본적으로 제공하고 있다.</p>\n<p>또한 Hilt 내부적으로 제공하는 Component들의 전반적인 생명주기 또한 자동으로 관리를 해주기 때문에 초기 DI 적용을 위한 환경을 구축하는데 드는 비용을 줄일수 있다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/162617386-fb24e8e4-e8dd-4730-9170-3430f0145c3e.png\">\n<p>위와 같은 Hilt에서 제공하는 Component들은 아래와 같은 함수 호출시점에 생성되고, Destroy가 된다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">생성된 구성요소</th>\n<th align=\"left\">생성 위치</th>\n<th align=\"left\">제거 위치</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">SingletonComponent</td>\n<td align=\"left\">Application#onCreate()</td>\n<td align=\"left\">Application#onDestroy()</td>\n</tr>\n<tr>\n<td align=\"left\">ActivityRetainedComponent</td>\n<td align=\"left\">Activity#onCreate()</td>\n<td align=\"left\">Activity#onDestroy()</td>\n</tr>\n<tr>\n<td align=\"left\">ActivityComponent</td>\n<td align=\"left\">Activity#onCreate()</td>\n<td align=\"left\">Activity#onDestroy()</td>\n</tr>\n<tr>\n<td align=\"left\">FragmentComponent</td>\n<td align=\"left\">Fragment#onAttach()</td>\n<td align=\"left\">Fragment#onDestroy()</td>\n</tr>\n<tr>\n<td align=\"left\">ViewComponent</td>\n<td align=\"left\">View#super()</td>\n<td align=\"left\">제거된 뷰</td>\n</tr>\n<tr>\n<td align=\"left\">ViewWithFragmentComponent</td>\n<td align=\"left\">View#super()</td>\n<td align=\"left\">제거된 뷰</td>\n</tr>\n<tr>\n<td align=\"left\">ServiceComponent</td>\n<td align=\"left\">Service#onCreate()</td>\n<td align=\"left\">Service#onDestroy()</td>\n</tr>\n</tbody>\n</table>\n<p>각 컴포넌트들은 생성 시점부터 제거되기까지 <code class=\"language-text\">Member Injection</code>이 가능하고, 각 컴포넌트마다 아래와 같은 생명주기를 갖는다.</p>\n<ul>\n<li>SingletonComponent: Application 전체의 생명주기를 가진다.</li>\n<li>\n<p>ActivityRetainComponent: <code class=\"language-text\">ApplicationComponent</code>의 하위 컴포넌트로써, Activity의 생명주기를 가진다.</p>\n<ul>\n<li>Activity의 화면 회전과 같은 작업이 일어났을시 파괴되지 않고 유지된다.</li>\n</ul>\n</li>\n<li>ActivityComponent: <code class=\"language-text\">ActivityRetainComponent</code>의 하위 컴포넌트로써, Activity의 생명주기를 가진다.</li>\n<li>FragmentComponent: <code class=\"language-text\">ActivityComponent</code>의 하위 컴포넌트로써, Fragment가 Activity에 붙는(onAttach()) 시점에 생성이 되고, Fragment가 파괴되는 시점에 제더된다.</li>\n<li>ViewComponent: <code class=\"language-text\">ActivityComponent</code>의 하위 컴포넌트로써, View의 생명주기를 가진다.</li>\n<li>ViewWithFragmentComponent: <code class=\"language-text\">FragmentComponent</code>의 하위 컴포넌트로써, Fragment의 view 생명주기를 가진다.</li>\n<li>ServiceComponent: <code class=\"language-text\">ApplicationComponent</code>의 하위 컴포넌트로써, Service의 생명주기를 가진다.</li>\n</ul>\n<p>위와 같은 표준 Component/Scope들은 Hilt에서는 제공하고 있으며, 새로운 Component를 정의하고 싶다면 <code class=\"language-text\">@DefineComponent</code> 어노테이션을 사용하여 정의가 가능하다.</p>\n<h1>@InstallIn</h1>\n<p>Dagger2에서는 새로운 module을 생성하면, 사용자가 정의한 Component에 module 클래스를 직접 넣어주는 방법을 사용하였다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Component</span><span class=\"token punctuation\">(</span>modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>DataModule<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">interface</span> DataComponent <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>mainActivity<span class=\"token operator\">:</span> MainActivity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반면에 Hilt에서는 표준적으로 제공하는 Component들이 존재하기 때문에 @InstallIn 어노테이션을 사용하여 표준 Component에 Module을 install 할 수 있다.</p>\n<p>Dagger에서 사용하였던 DataComponent를 삭제하고 DataModule에 @InstallIn을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Module</span>\n<span class=\"token annotation builtin\">@InstallIn</span><span class=\"token punctuation\">(</span>SingletonComponent<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> DataModule <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Provides</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">providesDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DataSource <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">DataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>@AndroidEntryPoint</h1>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Inject</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> dataSource<span class=\"token operator\">:</span> DataSource\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span>application <span class=\"token keyword\">as</span> App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dataComponent\n            <span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 사용하기</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dagger2에서는 의존성을 주입받을 대상을 전부 dependency graph에 지정을 해주었지만, Hilt에서는 객체를 주입할 대상에게 @AndroidEntryPoint 어노테이션을 추가만 해주면 된다. @AndroidEntryPoint를 추가할 수 있는 Android Component는 아래와 같다.</p>\n<ul>\n<li>Activity</li>\n<li>Fragment</li>\n<li>View</li>\n<li>Service</li>\n<li>BroadcastReceiver</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@AndroidEntryPoint</span>\n<span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Inject</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> dataSource<span class=\"token operator\">:</span> DataSource\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 사용하기</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://user-images.githubusercontent.com/63226023/162624070-99438590-aae7-4ae4-b966-5e66119cbaa7.png\">\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/training/dependency-injection/hilt-android?hl=ko\">Hilt를 사용한 종속 항목 삽입</a></li>\n<li><a href=\"https://open-support.tistory.com/entry/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EB%B2%94%EB%B8%94%EB%B9%84202111-%EB%B2%84%EC%A0%84%EC%9D%B4-%EB%82%98%EC%98%A4%EB%A9%B4%EC%84%9C-buildgradle%EA%B3%BC-settingsgradle%EC%97%90-%EB%B3%80%ED%99%94\">안드로이드-스튜디오-범블비202111-버전이-나오면서-buildgradle과-settingsgradle에-변화</a></li>\n<li><a href=\"https://hyperconnect.github.io/2020/07/28/android-dagger-hilt.html\">https://hyperconnect.github.io/2020/07/28/android-dagger-hilt.html</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기","date":"April 10, 2022","update":"April 10, 2022","tags":["Android","Hilt"],"series":"Android"},"fields":{"slug":"/android-hilt/","readingTime":{"minutes":7.495}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}},"next":{"fields":{"slug":"/brute-force/"},"frontmatter":{"title":"알고리즘 완전탐색(Exhaustive search)이란"}}},"pageContext":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","series":"Android","previousPostId":"97bedaf5-babf-55d6-9af8-caf47bb169b6","nextPostId":"7241a8e0-c224-55a5-a6b1-8136b4f2356c"}},"staticQueryHashes":[],"slicesMap":{}}