{"componentChunkName":"component---src-templates-post-jsx","path":"/android-service/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","excerpt":"서비스(Service) 안드로이드 Service 클래스는 앱이 백그라운드 작업을 시작시켜 수행할 수 있게 특별히 설계되었다. 작업을 빨리 수행하고 종료하는 브로드캐스트 수신자와는 다르게, 서비스는 실행 시간이 길면서 사용자 인터페이스를 필요로 하지 않는 작업을 수행 한다. (예시: 음악을 스트리밍을 하거나, 다른앱을 사용하면서 전화를 한다.) 서\n비스는 …","html":"<hr>\n<h1>서비스(Service)</h1>\n<p>안드로이드 Service 클래스는 앱이 백그라운드 작업을 시작시켜 수행할 수 있게 특별히 설계되었다. 작업을 빨리 수행하고 종료하는 <a href=\"https://ppeper.github.io/android/broadcast/\">브로드캐스트 수신자</a>와는 다르게, 서비스는 실행 시간이 길면서 사용자 인터페이스를 필요로 하지 않는 작업을 수행 한다. (예시: 음악을 스트리밍을 하거나, 다른앱을 사용하면서 전화를 한다.)</p>\n<p>서\n비스는 백그라운드에서 작업을 처리한다고 하였기 때문에 별도의 스레드에서 실행된다고 오해할수 있다. 하지만 서비스는 기본적으로 자신이 시작된 컴포넌트와 같은 <strong>메인 스레드</strong> 에서 실행이 되기 때문에 CPU를 많이 사용하는 작업을 서비스가 실행을 해야한다면 새로운 스레드에서 수행되어야 한다.</p>\n<ul>\n<li><strong>백그라운드</strong> 에서 작업을 하는 컴포넌트이다.</li>\n<li>서비스는 시작된 컴포넌트와 같은 <strong>메인 스레드</strong> 에서 실행된다.</li>\n</ul>\n<p>크게 나누게되면 서비스는 두가지로 나눌 수 있다.</p>\n<ul>\n<li>\n<p>스타트 서비스</p>\n<ul>\n<li>포그라운드</li>\n<li>백그라운드</li>\n</ul>\n</li>\n<li>바운드 서비스</li>\n</ul>\n<p>작게는 서비스에는 세가지의 유형으로 나눌 수 있다.</p>\n<ul>\n<li>포그라운드</li>\n<li>백그라운드</li>\n<li>바운드</li>\n</ul>\n<hr>\n<h2>포그라운드</h2>\n<p>포그라운드 서비스는 <em>사용자에게 보이는 작업</em> 을 실행한다. 예를 들어 음악을 듣게 된다면 이는 포그라운드 서비스로 <code class=\"language-text\">알림</code>을 표시해야 한다.\n서비스이기 때문에 사용자와 상호작용을 하지않아도 계속 실행이 된다.</p>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/150674062-e2b31742-a117-44f5-8882-7b57727c20ac.png\" width=\"50%\"></p>\n<h2>백그라운드</h2>\n<p>백그라운드 서비스는 <em>사용자에게 보이지 않는 작업</em> 을 실행한다.\n공식 홈페이지에서는 앱이 스토리지와 관련된 기능을 수행하는 서비스를 사용한다면, 보통 그것은 백그라운드 서비스라고 한다.</p>\n<blockquote>\n<p>참고 : 앱이 API 레벨 26 이상인 경우, 앱 자체가 포그라운드에 있지 않을 때 시스템이 백그라운드 서비스 실행에 제한을 건다. 이와 같은 경우 앱은 <code class=\"language-text\">예약된 작업(scheduled job)</code>을 사용해야한다.</p>\n</blockquote>\n<h2>바운드</h2>\n<p>바운드 서비스는 자신을 시작시킨 컴포넌트와의 상호작용을 허용하고 그 결과를 받을 수도 있다. 상호 작용을 위해 바운드 서비스는 <strong><code class=\"language-text\">bindService()</code></strong> 를 통하여 앱 구성 요소를 서비스에 바인딩할 수 있다.</p>\n<p>바인딩된 서비스는 <strong>바인딩한 구성 요소와 상호작용</strong> 을 하면서 요청을 주고 결과를 받을 수 있게 되는 <strong>클라이언트-서버 구조</strong> 를 제공한다. 또한 <strong>IPC(프로세스 간 통신)</strong> 의 구현을 통해서 이러한 상호작용이 프로세스 간에도 일어날수 있다. 또한 동시에 여러 컴포넌트가 한 서비스에 바인딩될 수 있다.</p>\n<p>바인딩한 서비스가 더 이상 필요로 하지 않을 떄는 <strong><code class=\"language-text\">unbindService</code></strong> 함수를 호출하여 바인딩을 해제할 수 있고 모든 구성 요소가 서비스에서 바인딩을 하제하면 해당 서비스는 안드로이드 런타임 시스템에 의해 종료된다.</p>\n<p>바운드 서비스는 <strong><code class=\"language-text\">onBind()</code></strong> 함수의 구현을 포함한다. 이 함수는 서비스가 <strong>최초로 생성</strong> 될 때 그리고 그 이후에 다른 구성 요소가 <strong>해당 서비스에 바인딩</strong> 할 때 자동 호출 된다.\n이 함수의 목적은 바인딩한 컴포넌트에 <strong>IBinder</strong> 타입의 객체를 반환한다.</p>\n<ul>\n<li>\n<p>바운드 서비스 요약</p>\n<ul>\n<li>바인딩을 통하여 구성 요소와 상호작용을 한다.</li>\n<li><strong>bindService()</strong> 함수를 통하여 서비스에 바인딩한다.</li>\n<li><strong>onBind()</strong> 함수를 통하여 <strong>IBinder</strong> 타입의 객체를 반환한다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>서비스 생명주기</h1>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/150674329-805df55b-0cde-4a26-915a-1cc42fb9343a.png\" width=\"50%\"></p>\n<p>서비스는 안드로이드 Service 클래스의 서브 클래스로 생성된다. 그리고 생성되는 서비스의 특성에 따라 다음의 콜랙 함수를 오버라이딩해야 한다.</p>\n<ul>\n<li>onCreate() - 서비스가 생성될 때 호출되며, 이 함수가 호출된 이후 다음에 <strong>onStartCommand()</strong> 함수가 호출되거나 <strong>onBind()</strong> 함수가 최초 호출된다.</li>\n<li>onStartCommand() - 다른 컴포넌트가 <strong>startService()</strong> 함수를 호출하여 서비스를 시작시킬 때 호출된다.(바운드 서비스의 경우 구현할 필요가 없다)</li>\n<li>onBind() - 컴포넌트가 <strong>bindService()</strong> 함수를 호출하여 서비스에 바인딩할 때 호출된다. 바인드 서비스를 구현할 때는 이 함수에서 <strong>IBinder</strong> 객체를 반환해야 한다. 이 객체는 서비스가 클라이언트와 통신할 때 사용한다. 스타트 서비스의 경우는 이 함수에서 null 값을 반환하도록 구현해야 한다.</li>\n<li>onDestroy() - 서비스가 소멸될 때 호출된다.</li>\n</ul>\n<h1>소멸된 서비스 재시작 옵션 제어</h1>\n<p>서비스 클래스에서 오버라이딩한 <strong>onStartCommand()</strong> 콜백 함수는 정수값을 반환해야 한다. 이것은 안드로이드 런타임 시스템에 의해 서비스가 소멸될 경우에 서비스를 어떻게 할 것인지 정의를 하는 값이다.</p>\n<ul>\n<li><strong>START<em>NOT</em>STICKY</strong> - 처리 대기 중인 인텐트가 없다면 서비스가 소멸될 때 <strong>다시 시작하지 말라고</strong> 시스템에게 알려 준다.</li>\n<li><strong>START_STICKY</strong> - 만일 onStartCommand() 함수의 실행이 끝나고 복귀한 이후에 서비스의 소멸이 일어나면 서비스가 소멸된 후 가능한 빨리 <strong>다시 시작되어야 한다</strong> 는 것을 나타낸다.</li>\n<li><strong>START<em>REDELIVER</em>INTENT</strong> - 만일 onStartCommand() 함수의 실행이 끝나고 복귀한 이후에 서비스의 소멸되었다면 <strong>현재의 인텐트</strong> 를 onStartCommand() 함수에 <strong>다시 전송</strong> 하여 해당 서비스가 다시 시작되어야 한다는 것을 나타낸다. 그리고 그다음에 처리 대기 중인 인텐트가 전달된다.</li>\n</ul>\n<h1>Manifest 파일에 서비스 선언</h1>\n<p>서비스가 사용될 수 있으려면 Manifest 파일에 선언이 되어야 한다. 이에 적합하게 구성된 <strong><code class=\"language-text\">&lt;service></code></strong> 요소를 <code class=\"language-text\">&lt;application></code> 항목에 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">.\n.\n.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span>\n                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyService<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>service</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>기본적으로 서비스는 public으로 선언된다. 즉, 서비스가 있는 앱 패키지 <strong>외부의 컴포넌트가 액세스</strong> 할 수 있다는 의미이다. 서비스를 private으로 만들려면 <strong>android:exported</strong> 속성을 false로 선언해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span> \n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyService<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>exported</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>service</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/services?hl=ko\">안드로이드 서비스 개요</a></li>\n</ul>","frontmatter":{"title":"안드로이드 서비스(Service) 개요","date":"January 24, 2022","update":"January 24, 2022","tags":["Android","Service"],"series":"Android"},"fields":{"slug":"/android-service/","readingTime":{"minutes":8.875}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/programmers-kakao-blind-2020-3/"},"frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - k진수에서 소수 개수 구하기"}},"next":{"fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},"pageContext":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","series":"Android","previousPostId":"6b276284-ed62-5856-a5e2-c4cabf52acc9","nextPostId":"0b7da456-386b-5c28-b4a8-fefb68cdff05"}},"staticQueryHashes":[],"slicesMap":{}}