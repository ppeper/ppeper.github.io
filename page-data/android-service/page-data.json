{"componentChunkName":"component---src-templates-post-jsx","path":"/android-service/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","excerpt":"서비스(Service) 안드로이드 Service 클래스는 앱이 백그라운드 작업을 시작시켜 수행할 수 있게 특별히 설계되었다. 작업을 빨리 수행하고 종료하는 브로드캐스트 수신자와는 다르게, 서비스는 실행 시간이 길면서 사용자 인터페이스를 필요로 하지 않는 작업을 수행 한다. (예시: 음악을 스트리밍을 하거나, 다른앱을 사용하면서 전화를 한다.) 서\n비스는 …","html":"<hr>\n<h1>서비스(Service)</h1>\n<p>안드로이드 Service 클래스는 앱이 백그라운드 작업을 시작시켜 수행할 수 있게 특별히 설계되었다. 작업을 빨리 수행하고 종료하는 <a href=\"https://ppeper.github.io/android/broadcast/\">브로드캐스트 수신자</a>와는 다르게, 서비스는 실행 시간이 길면서 사용자 인터페이스를 필요로 하지 않는 작업을 수행 한다. (예시: 음악을 스트리밍을 하거나, 다른앱을 사용하면서 전화를 한다.)</p>\n<p>서\n비스는 백그라운드에서 작업을 처리한다고 하였기 때문에 별도의 스레드에서 실행된다고 오해할수 있다. 하지만 서비스는 기본적으로 자신이 시작된 컴포넌트와 같은 <strong>메인 스레드</strong> 에서 실행이 되기 때문에 CPU를 많이 사용하는 작업을 서비스가 실행을 해야한다면 새로운 스레드에서 수행되어야 한다.</p>\n<ul>\n<li><strong>백그라운드</strong> 에서 작업을 하는 컴포넌트이다.</li>\n<li>서비스는 시작된 컴포넌트와 같은 <strong>메인 스레드</strong> 에서 실행된다.</li>\n</ul>\n<p>크게 나누게되면 서비스는 두가지로 나눌 수 있다.</p>\n<ul>\n<li>\n<p>스타트 서비스</p>\n<ul>\n<li>포그라운드</li>\n<li>백그라운드</li>\n</ul>\n</li>\n<li>바운드 서비스</li>\n</ul>\n<p>작게는 서비스에는 세가지의 유형으로 나눌 수 있다.</p>\n<ul>\n<li>포그라운드</li>\n<li>백그라운드</li>\n<li>바운드</li>\n</ul>\n<hr>\n<h2>포그라운드</h2>\n<p>포그라운드 서비스는 <em>사용자에게 보이는 작업</em> 을 실행한다. 예를 들어 음악을 듣게 된다면 이는 포그라운드 서비스로 <code class=\"language-text\">알림</code>을 표시해야 한다.\n서비스이기 때문에 사용자와 상호작용을 하지않아도 계속 실행이 된다.</p>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/150674062-e2b31742-a117-44f5-8882-7b57727c20ac.png\" width=\"50%\"></p>\n<h2>백그라운드</h2>\n<p>백그라운드 서비스는 <em>사용자에게 보이지 않는 작업</em> 을 실행한다.\n공식 홈페이지에서는 앱이 스토리지와 관련된 기능을 수행하는 서비스를 사용한다면, 보통 그것은 백그라운드 서비스라고 한다.</p>\n<blockquote>\n<p>참고 : 앱이 API 레벨 26 이상인 경우, 앱 자체가 포그라운드에 있지 않을 때 시스템이 백그라운드 서비스 실행에 제한을 건다. 이와 같은 경우 앱은 <code class=\"language-text\">예약된 작업(scheduled job)</code>을 사용해야한다.</p>\n</blockquote>\n<h2>바운드</h2>\n<p>바운드 서비스는 자신을 시작시킨 컴포넌트와의 상호작용을 허용하고 그 결과를 받을 수도 있다. 상호 작용을 위해 바운드 서비스는 <strong><code class=\"language-text\">bindService()</code></strong> 를 통하여 앱 구성 요소를 서비스에 바인딩할 수 있다.</p>\n<p>바인딩된 서비스는 <strong>바인딩한 구성 요소와 상호작용</strong> 을 하면서 요청을 주고 결과를 받을 수 있게 되는 <strong>클라이언트-서버 구조</strong> 를 제공한다. 또한 <strong>IPC(프로세스 간 통신)</strong> 의 구현을 통해서 이러한 상호작용이 프로세스 간에도 일어날수 있다. 또한 동시에 여러 컴포넌트가 한 서비스에 바인딩될 수 있다.</p>\n<p>바인딩한 서비스가 더 이상 필요로 하지 않을 떄는 <strong><code class=\"language-text\">unbindService</code></strong> 함수를 호출하여 바인딩을 해제할 수 있고 모든 구성 요소가 서비스에서 바인딩을 하제하면 해당 서비스는 안드로이드 런타임 시스템에 의해 종료된다.</p>\n<p>바운드 서비스는 <strong><code class=\"language-text\">onBind()</code></strong> 함수의 구현을 포함한다. 이 함수는 서비스가 <strong>최초로 생성</strong> 될 때 그리고 그 이후에 다른 구성 요소가 <strong>해당 서비스에 바인딩</strong> 할 때 자동 호출 된다.\n이 함수의 목적은 바인딩한 컴포넌트에 <strong>IBinder</strong> 타입의 객체를 반환한다.</p>\n<ul>\n<li>\n<p>바운드 서비스 요약</p>\n<ul>\n<li>바인딩을 통하여 구성 요소와 상호작용을 한다.</li>\n<li><strong>bindService()</strong> 함수를 통하여 서비스에 바인딩한다.</li>\n<li><strong>onBind()</strong> 함수를 통하여 <strong>IBinder</strong> 타입의 객체를 반환한다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>서비스 생명주기</h1>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/150674329-805df55b-0cde-4a26-915a-1cc42fb9343a.png\" width=\"50%\"></p>\n<p>서비스는 안드로이드 Service 클래스의 서브 클래스로 생성된다. 그리고 생성되는 서비스의 특성에 따라 다음의 콜랙 함수를 오버라이딩해야 한다.</p>\n<ul>\n<li>onCreate() - 서비스가 생성될 때 호출되며, 이 함수가 호출된 이후 다음에 <strong>onStartCommand()</strong> 함수가 호출되거나 <strong>onBind()</strong> 함수가 최초 호출된다.</li>\n<li>onStartCommand() - 다른 컴포넌트가 <strong>startService()</strong> 함수를 호출하여 서비스를 시작시킬 때 호출된다.(바운드 서비스의 경우 구현할 필요가 없다)</li>\n<li>onBind() - 컴포넌트가 <strong>bindService()</strong> 함수를 호출하여 서비스에 바인딩할 때 호출된다. 바인드 서비스를 구현할 때는 이 함수에서 <strong>IBinder</strong> 객체를 반환해야 한다. 이 객체는 서비스가 클라이언트와 통신할 때 사용한다. 스타트 서비스의 경우는 이 함수에서 null 값을 반환하도록 구현해야 한다.</li>\n<li>onDestroy() - 서비스가 소멸될 때 호출된다.</li>\n</ul>\n<h1>소멸된 서비스 재시작 옵션 제어</h1>\n<p>서비스 클래스에서 오버라이딩한 <strong>onStartCommand()</strong> 콜백 함수는 정수값을 반환해야 한다. 이것은 안드로이드 런타임 시스템에 의해 서비스가 소멸될 경우에 서비스를 어떻게 할 것인지 정의를 하는 값이다.</p>\n<ul>\n<li><strong>START<em>NOT</em>STICKY</strong> - 처리 대기 중인 인텐트가 없다면 서비스가 소멸될 때 <strong>다시 시작하지 말라고</strong> 시스템에게 알려 준다.</li>\n<li><strong>START_STICKY</strong> - 만일 onStartCommand() 함수의 실행이 끝나고 복귀한 이후에 서비스의 소멸이 일어나면 서비스가 소멸된 후 가능한 빨리 <strong>다시 시작되어야 한다</strong> 는 것을 나타낸다.</li>\n<li><strong>START<em>REDELIVER</em>INTENT</strong> - 만일 onStartCommand() 함수의 실행이 끝나고 복귀한 이후에 서비스의 소멸되었다면 <strong>현재의 인텐트</strong> 를 onStartCommand() 함수에 <strong>다시 전송</strong> 하여 해당 서비스가 다시 시작되어야 한다는 것을 나타낸다. 그리고 그다음에 처리 대기 중인 인텐트가 전달된다.</li>\n</ul>\n<h1>Manifest 파일에 서비스 선언</h1>\n<p>서비스가 사용될 수 있으려면 Manifest 파일에 선언이 되어야 한다. 이에 적합하게 구성된 <strong><code class=\"language-text\">&lt;service></code></strong> 요소를 <code class=\"language-text\">&lt;application></code> 항목에 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">.\n.\n.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span>\n                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyService<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>service</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>기본적으로 서비스는 public으로 선언된다. 즉, 서비스가 있는 앱 패키지 <strong>외부의 컴포넌트가 액세스</strong> 할 수 있다는 의미이다. 서비스를 private으로 만들려면 <strong>android:exported</strong> 속성을 false로 선언해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span> \n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyService<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>exported</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>service</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/services?hl=ko\">안드로이드 서비스 개요</a></li>\n</ul>","frontmatter":{"title":"안드로이드 서비스(Service) 개요","date":"January 24, 2022","update":"January 24, 2022","tags":["Android","Service"],"series":"Android"},"fields":{"slug":"/android-service/","readingTime":{"minutes":8.875}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/programmers-kakao-blind-2020-3/"},"frontmatter":{"title":"프로그래머스 2022 KAKAO RECRUITMENT - k진수에서 소수 개수 구하기"}},"next":{"fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},"pageContext":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","series":"Android","previousPostId":"25be2350-7ca4-5657-b192-255f4ac12389","nextPostId":"9f0c308a-f26f-5882-b1c0-603d65208794"}},"staticQueryHashes":[],"slicesMap":{}}