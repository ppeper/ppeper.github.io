{"componentChunkName":"component---src-templates-post-jsx","path":"/repository-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","excerpt":"Repository 이전의 포스팅에서 안드로이드 MVVM 디자인 패턴에 대해서 알아보면서 아주 잠깐 Repository의 개념 대해서 알아보았다. 이번에 새로운 프로젝트에 Repository를 적용하면서 공부하였던 내용들을 정리해 보려고 한다. 단어의 의미보면 파악할 수 있듯이 Repository는 필요한 데이터들을 저장하고 있는 저장소라고 생각하면 된다…","html":"<img src='https://user-images.githubusercontent.com/63226023/151594101-266890b7-079a-47c5-9daa-2afbc335ccb7.png'>\n<h1 id=\"Repository\" style=\"position:relative;\"><a href=\"#Repository\" aria-label=\"Repository permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Repository</h1>\n<p>이전의 포스팅에서 안드로이드 <a href=\"https://ppeper.github.io/android/android-acc/\">MVVM 디자인 패턴</a>에 대해서 알아보면서 아주 잠깐 Repository의 개념 대해서 알아보았다. 이번에 새로운 프로젝트에 Repository를 적용하면서 공부하였던 내용들을 정리해 보려고 한다.</p>\n<img src='https://user-images.githubusercontent.com/63226023/163725815-0dc509ff-346b-4f7f-bc4f-cc407c2b2f8d.png'>\n<p>단어의 의미보면 파악할 수 있듯이 Repository는 필요한 데이터들을 저장하고 있는 저장소라고 생각하면 된다. 그러면 안드로이드에서는 Repository가 어떻게 사용되는가??</p>\n<h2 id=\"안드로이드-아키첵처-컴포넌트\" style=\"position:relative;\"><a href=\"#%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%95%84%ED%82%A4%EC%B2%B5%EC%B2%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"안드로이드 아키첵처 컴포넌트 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>안드로이드 아키첵처 컴포넌트</h2>\n<img src='https://user-images.githubusercontent.com/63226023/163726014-6b6a0c25-1d70-47d2-ac4f-37f3972c5549.png'>\n<p>위의 그림이 안드로이드에서 권장하는 아키텍처이다. 위 다이어그램을 보면 아키텍처의 Activity / Fragment 즉 UI 레이어에서 직접 Data에 접근하지 않고 <strong>Repository</strong> 를 통하여 데이터를 가지고 오는것을 볼 수 있다.</p>\n<p>Repository는 UI에서 사용할 데이터들을 가져올 수 있도록 접근하는 <strong>LocalDataSource(앱 내부 데이터 ex)Room)</strong>, <strong>RemoteDataSource(서버데이터 ex)Retrofit)</strong> 을 캡슐화하여 사용하는 것이다.</p>\n<blockquote>\n<p>Repository는 데이터의 출처(local/remote)와 상관없이 동일한 인터페이스로 데이터에 접근할 수 있도록 만든것이다.</p>\n</blockquote>\n<h2 id=\"Repository-패턴을-사용하는-이유\" style=\"position:relative;\"><a href=\"#Repository-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"Repository 패턴을 사용하는 이유 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Repository 패턴을 사용하는 이유?</h2>\n<p>이전에 안드로이드에서 MVC패턴으로 개발을 하게되면 View(Activity/Fragment)에 모든 코드를 작성을 하여 많은 단점들이 존재하였었다.</p>\n<blockquote>\n<p>View와 Model사이에 의존성이 발생하여 View의 UI 갱신을 위해 Model을 직/간접적으로 참조하여 Activity/Frament의 크기가 커지고 로직들이 복잡해 질 수록 유지보수가 힘들어진다.(처음 안드로이드 프로젝트를 진행하였을때 이러한 문제에 직면하였었다..😅)</p>\n</blockquote>\n<p>그렇다면 Repository 패턴을 사용하게 되면 얻는 이점은 무었일까?</p>\n<ul>\n<li>\n<p>도메인과 연관된 모델을 가져오기 위해서 필요한 DataSource가 Presenter 계층에서는 알 필요가 없다(필요한 DataSource가 몇개든 사용될 data만 가져오면 된다)</p>\n<ul>\n<li>따라서 DataSource를 새롭게 추가하는 것도 부담이 없다.</li>\n</ul>\n</li>\n<li>DataSource 의 변경이 되더라도 다른 계층에는 영향이 없다.</li>\n<li>Client는 Repository 인터페이스에 의존하기 때문에 테스트 하기 용이하다.</li>\n</ul>\n<blockquote>\n<p>🔔 Repository는 결국 Presenter 계층과 Data 계층간의 Coupling을 느슨하게 만들어 주는것이다.</p>\n</blockquote>\n<p>Repository 패턴을 사용한다는 것은 DataSource 즉, Data Layer를 <code class=\"language-text\">캡슐화</code>한다는 의미이다.</p>\n<p>Repository를 추가하여 View에서 데이터를 참조하는 흐름을 보면 다음과 같다. </p>\n<blockquote>\n<ol>\n<li><strong>View -> ViewModel로만 데이터를 가져온다.</strong> </li>\n<li><strong>ViewModel -> Repository로 데이터 접근한다.</strong></li>\n<li><strong>Repository -> DataSource(local/remote)로 부터 데이터를 요청한다.</strong></li>\n</ol>\n</blockquote>\n<hr>\n<p>앱에서 회원가입을 구현 해야한다고 했을때 Repository 패턴을 적용하여 요청을 보내는 예시를 보면 다음과 같다.(Hilt 의존성 주입 사용)</p>\n<blockquote>\n<p>먼저 UserRemoteDataSource로 부터 서버로 회원가입 요청을 보내는 함수를 만들어준다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 서버로 부터 데이터 요청하는 class 인터페이스화</span>\n<span class=\"token keyword\">interface</span> UserRemoteDataSource <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">signInUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response<span class=\"token operator\">&lt;</span>ResponseUser<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 인터페이스 UserRemoteDataSource를 구체화할 Impl 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">UserRemoteDataSourceImpl</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userService<span class=\"token operator\">:</span> UserService\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserRemoteDataSource <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">signInUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response<span class=\"token operator\">&lt;</span>ResponseUser<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">signInUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>UserRepository는 UserRemoteDataSource를 참조하여 서버로 회원가입 요청을 보낸다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> UserRepository <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">signInUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> APIResponse<span class=\"token operator\">&lt;</span>ResponseUser<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">UserRepositoryImpl</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userRemoteDataSource<span class=\"token operator\">:</span> UserRemoteDataSource\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserRepository <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 회원가입 요청이 성공하면 Success에 데이터를 실어서 ,실패하면 Error에 message 리턴</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">signInUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> APIResponse<span class=\"token operator\">&lt;</span>ResponseUser<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> userRemoteDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">signInUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>isSuccessful<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">-></span>\n                <span class=\"token keyword\">return</span> APIResponse<span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> APIResponse<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> Retrofit으로 서버의 요청에 대한 응답을 받으면 return값을 <code class=\"language-text\">APIResponse</code> 를 통하여 State와 data를 매핑해 주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> APIResponse<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> message<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> Success<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> APIResponse<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">class</span> Loading<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> APIResponse<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">class</span> Error<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> APIResponse<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>UserViewModel은 UserRepository만을 이용해서 데이터에 접근하고 LiveData를 관찰하는 observer에게 값을 넘겨준다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@HiltViewModel</span>\n<span class=\"token keyword\">class</span> UserViewModel <span class=\"token annotation builtin\">@Inject</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> repository<span class=\"token operator\">:</span> UserRepository\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// request state</span>\n    <span class=\"token keyword\">val</span> state<span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>APIResponse<span class=\"token operator\">&lt;</span>ResponseUser<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">MutableLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">fun</span> <span class=\"token function\">signInUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// 서버의 요청에대한 response가 오기전에는 Loading 상태</span>\n       state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> APIResponse<span class=\"token punctuation\">.</span><span class=\"token function\">Loading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       viewModelScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">signInUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                   state<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                   state<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span>APIResponse<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               state<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span>APIResponse<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>사용할 Activity에서 직접 서버로 요청을 하지 않고 UserViewModel을 사용하여 회원가입을 요청(requestSignIn)하고 LiveData를 observe한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@AndroidEntryPoint</span>\n<span class=\"token keyword\">class</span> LogInActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userViewModel<span class=\"token operator\">:</span> UserViewModel <span class=\"token keyword\">by</span> <span class=\"token function\">viewModels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding<span class=\"token operator\">:</span> ActivityLogInBinding\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        binding <span class=\"token operator\">=</span> ActivityLogInBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 로그인 요청</span>\n            buttonLogin<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// user의 input 값이 들어갔다고 가정</span>\n                    <span class=\"token keyword\">val</span> userLogin <span class=\"token operator\">=</span>\n                        <span class=\"token function\">UserLogin</span><span class=\"token punctuation\">(</span>editTextLoginId<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> editTextLoginPwd<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">requestLogin</span><span class=\"token punctuation\">(</span>userLogin<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">requestLogin</span><span class=\"token punctuation\">(</span>userLogin<span class=\"token operator\">:</span> UserLogin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        userViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">getTokenRequest</span><span class=\"token punctuation\">(</span>userLogin<span class=\"token punctuation\">)</span>\n        userViewModel<span class=\"token punctuation\">.</span>isLogin<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@LogInActivity</span><span class=\"token punctuation\">,</span> Observer <span class=\"token punctuation\">{</span> response <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">is</span> APIResponse<span class=\"token punctuation\">.</span>Success <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// success code</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">is</span> APIResponse<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// error code</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">is</span> APIResponse<span class=\"token punctuation\">.</span>Loading <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// loading code</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://vagabond95.me/posts/android-repository-pattern/\">https://vagabond95.me/posts/android-repository-pattern/</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가","date":"April 19, 2022","update":"April 19, 2022","tags":["Android","MVVM","Repository Pattern"],"series":"Android"},"fields":{"slug":"/repository-pattern/","readingTime":{"minutes":6.64}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"47c30107-f229-5a8a-835b-badfa1b4e7a6","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}}]},"previous":{"fields":{"slug":"/brute-force/"},"frontmatter":{"title":"알고리즘 완전탐색(Exhaustive search)이란"}},"next":{"fields":{"slug":"/scope-function/"},"frontmatter":{"title":"코틀린의 Scope Function는 언제쓸까"}}},"pageContext":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","series":"Android","previousPostId":"4c2618c6-2138-584d-925b-5ad902505f6b","nextPostId":"a7e9c7fb-11d9-59aa-b9c8-faef6cfcd27e"}},"staticQueryHashes":[],"slicesMap":{}}