{"componentChunkName":"component---src-templates-post-jsx","path":"/android-diffutil/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","excerpt":"DiffUtil 넌 뭐니 안드로이드를 공부하거나 개발하다보면 대부분 리스트를 보여주기 위하여  의 사용을 하게되고, 리스트의 데이터가 변하게 되면  를 호출하여 리사이클러뷰를 갱신하였다. 이는 바뀐 데이터가 적더라도 간혹 를 호출하여 갱신하기도 하는데 이는 앱 성능에 굉장히 악영향 을 미치게된다. (난가..😅)  를 호출하게 되면 리스트의 모든 데이터를 …","html":"<h1>DiffUtil 넌 뭐니</h1>\n<p>안드로이드를 공부하거나 개발하다보면 대부분 리스트를 보여주기 위하여 <code class=\"language-text\">RecyclerView</code> 의 사용을 하게되고, 리스트의 데이터가 변하게 되면 <code class=\"language-text\">notifyDataSetChange()</code> 를 호출하여 리사이클러뷰를 갱신하였다. 이는 바뀐 데이터가 적더라도 간혹 <code class=\"language-text\">notifyDataSetChange()</code>를 호출하여 갱신하기도 하는데 이는 <strong>앱 성능에 굉장히 악영향</strong> 을 미치게된다. (난가..😅)</p>\n<p><code class=\"language-text\">notifyDataSetChange()</code> 를 호출하게 되면 <strong>리스트의 모든 데이터를 다시 처음부터 새로운 객체를 생성하여 랜더링</strong> 하기 때문에 <strong>비용이 크게 발생한다.</strong></p>\n<p>이런 경우를 위해 등장한 것이 <strong>DiffUtil</strong> 클래스이다. DiffUtil은 <strong>이전 데이터와 현재 데이터 목록의 차이를 계산하여</strong> 업데이트 해야할 데이터에 대해서만 갱신을 할 수 있게 한다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/187503548-029d1017-9e5d-4712-90c3-257e47f2e594.gif\">\n<blockquote>\n<p>📃 두 데이터간의 차이를 계산은 Eugene W.Myers 의 Diff(erence) Algorithm이 사용되었다고 한다.</p>\n</blockquote>\n<h1>사용 방법</h1>\n<p><code class=\"language-text\">DiffUtil</code> 는 <strong>이전과 현재의 목록의 차이를 계산</strong> 을 한 뒤 <code class=\"language-text\">DiffUtil.Callback</code> 이라는 추상 클래스를 <strong>콜랙 클래스로 활용</strong> 하게 된다. 이 클래스는 <strong>4개의 추상 메소드와 1개의 일반 메소드</strong> 로 이루어져 있으며, 이를 확장하여 메소드를 오버라이딩 하여 사용한다.</p>\n<blockquote>\n<p><strong>getOldListSize()</strong></p>\n<p>이전 목록의 크기를 반환한다.</p>\n</blockquote>\n<blockquote>\n<p><strong>getNewListSize()</strong></p>\n<p>새로운 목록의 크기를 반환한다.</p>\n</blockquote>\n<blockquote>\n<p><strong>areItemsTheSame(int oldItemPosition, int newItemPosition)</strong></p>\n<p>두 항목이 같은 객체인지 반환한다. </p>\n</blockquote>\n<blockquote>\n<p><strong>areContentsTheSame(int oldItemPosition, int newItemPosition)</strong></p>\n<p>두 항목의 데이터가 같은지 여부를 반환한다. <code class=\"language-text\">areItemsTheSame()</code>이 true를 반환할 때만 호출된다. -> 같은 객체가 아니면 당연히 데이터는 다르기 때문에 비교하는것이 의미가 없음</p>\n</blockquote>\n<blockquote>\n<p><strong>getChangePayload(int oldItemPosition, int newItemPosition)</strong></p>\n<p>만약 <code class=\"language-text\">areItemTheSame()</code>이 true를 반환하고, <code class=\"language-text\">areContentsTheSame()</code>이 false를 반환했다면 <strong>변경 내용에 대한 페이로드</strong> 를 가져온다.</p>\n</blockquote>\n<p>먼저 <code class=\"language-text\">DiffUtil.Callback</code> 함수를 (익명)클래스를 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">DiffUtilCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> oldList<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> newList<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiffUtil<span class=\"token punctuation\">.</span><span class=\"token function\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getOldListSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> oldList<span class=\"token punctuation\">.</span>size\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getNewListSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> newList<span class=\"token punctuation\">.</span>size\n\n    \n    <span class=\"token comment\">// 객체의 고유 값을 비교하는게 좋다.</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">areItemsTheSame</span><span class=\"token punctuation\">(</span>oldItemPosition<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> newItemPosition<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> oldItem <span class=\"token operator\">=</span> oldList<span class=\"token punctuation\">[</span>oldItemPosition<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">val</span> newItem <span class=\"token operator\">=</span> newList<span class=\"token punctuation\">[</span>newItemPosition<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> oldItem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> newItem<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">areContentsTheSame</span><span class=\"token punctuation\">(</span>oldItemPosition<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> newItemPosition<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> oldItem <span class=\"token operator\">=</span> oldList<span class=\"token punctuation\">[</span>oldItemPosition<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">val</span> newItem <span class=\"token operator\">=</span> newList<span class=\"token punctuation\">[</span>newItemPosition<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> oldItem <span class=\"token operator\">==</span> newItem\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 만든 클래스를 생성한 후에는 해당 부분을 adpter내에서 아래와 같은 함수를 만들어 <code class=\"language-text\">DiffUtil.calculateDiff()</code> 에 해당 <strong>콜백 클래스(DiffUtilCallback)</strong> 를 통하여 업데이트가 필요한 리스트를 찾는다.</p>\n<p>이후 기존의 <code class=\"language-text\">notifyDataSetChange()</code> 대신에 <code class=\"language-text\">dispatchUpdatesTo(Adapter adapter)</code> 를 사용하면 <strong>부분적으로 데이터를 교체하는 notify가 실행</strong> 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// RecyclerView Adapter 내에서</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>newList<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> diffUtil <span class=\"token operator\">=</span> <span class=\"token function\">DiffUtilCallback</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> newList<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> diffResult<span class=\"token operator\">:</span> DiffUtil<span class=\"token punctuation\">.</span>DiffResult <span class=\"token operator\">=</span> DiffUtil<span class=\"token punctuation\">.</span><span class=\"token function\">calculateDiff</span><span class=\"token punctuation\">(</span>diffUtil<span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>newList<span class=\"token punctuation\">)</span>\n    diffResult<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchUpdatesTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>리스트의 크기가 크다면 비교 연산이 길어질 수 있으므로 <code class=\"language-text\">calculateDiff()</code> 는 <strong>백그라운드 쓰레드에서 처리</strong> 를 해주고, 메인 쓰레드에서 <code class=\"language-text\">DiffUtil.DiffResult</code> 를 가져와 사용하는 것이 권장된다.</li>\n<li>구현상 목록의 최대 크기는 2²⁶개 이다.</li>\n</ul>\n<hr>\n<h1>AsyncListDiffer</h1>\n<p>위에서 말한 <code class=\"language-text\">DiffUtil</code>을 백그라운드 쓰레드에서 수행할 수 있게 해주는 클래스이다. <strong><code class=\"language-text\">adapter</code>와 <code class=\"language-text\">DiffUtil</code>을 인자로 받아 백그라운드에서 수행 후 RecyclerView에 결과를 반영</strong> 할 수 있게 해준다. </p>\n<h2>사용 방법</h2>\n<p>먼저 리스트의 요소를 비교할 때 호출할 <code class=\"language-text\">DiffUtil.ItemCallback</code>를 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> AsyncDiffUtilCallback <span class=\"token operator\">:</span> DiffUtil<span class=\"token punctuation\">.</span>ItemCallback<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">areItemsTheSame</span><span class=\"token punctuation\">(</span>oldItem<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> newItem<span class=\"token operator\">:</span> Place<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> oldItem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> newItem<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">}</span>\n        \n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">areContentsTheSame</span><span class=\"token punctuation\">(</span>oldItem<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> newItem<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> oldItem <span class=\"token operator\">==</span> newItem\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마찬가지로 adapter 내부에서 <code class=\"language-text\">AsyncListDiffer</code> 객체를 선언하여 사용하면 된다.</p>\n<blockquote>\n<p><strong>getCurrentList()</strong></p>\n<p>adapter에서 사용하는 리스트에 접근하고 싶을때 사용한다.</p>\n</blockquote>\n<blockquote>\n<p><strong>submitList()</strong></p>\n<p>리스트의 데이터를 교체할 때 사용한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">CustomAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RecyclerView<span class=\"token punctuation\">.</span>Adapter<span class=\"token operator\">&lt;</span>CustomAdapter<span class=\"token punctuation\">.</span>CustomViewHolder<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> differ <span class=\"token operator\">=</span> <span class=\"token function\">AsyncListDiffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">AsyncDiffUtilCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateViewHolder</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">:</span> ViewGroup<span class=\"token punctuation\">,</span> viewType<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CustomViewHolder <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBindViewHolder</span><span class=\"token punctuation\">(</span>holder<span class=\"token operator\">:</span> CustomViewHolder<span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// getCurrentList()</span>\n        <span class=\"token keyword\">val</span> any <span class=\"token operator\">=</span> differ<span class=\"token punctuation\">.</span>currentList<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span>\n        holder<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getItemCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> differ<span class=\"token punctuation\">.</span>currentList<span class=\"token punctuation\">.</span>size\n    \n    <span class=\"token comment\">// submitList()</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>newItems<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> diffUtil<span class=\"token punctuation\">.</span><span class=\"token function\">submitList</span><span class=\"token punctuation\">(</span>newItems<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><del>(AsyncListDiffer 클래스 최고다!!)</del> 아직 한발 남았다..</p>\n</blockquote>\n<hr>\n<h1>ListAdapter✨</h1>\n<p>이러한 AsyncListDiffer을 더 편리하게 사용하도록 한 Wrapper 클래스가 <code class=\"language-text\">ListAdapter</code>이다.</p>\n<p><code class=\"language-text\">ListAdapter</code>는 DiffUtil을 활용하여 리스트를 업데이트하는 기능이 추가된 Adapter라고 생각하면 된다.</p>\n<p><code class=\"language-text\">ListAdapter</code> 의 인자로 <strong>제너릭 타입 T에는 데이터의 타입, 두번째로 RecyclerView.ViewHolder</strong> 를 넣어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> ListAdapter<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> VH extends RecyclerView<span class=\"token punctuation\">.</span>ViewHolder<span class=\"token operator\">></span>\n        extends RecyclerView<span class=\"token punctuation\">.</span>Adapter<span class=\"token operator\">&lt;</span>VH<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> AsyncListDiffer<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> mDiffer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> AsyncListDiffer<span class=\"token punctuation\">.</span>ListListener<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> mListener <span class=\"token operator\">=</span>\n            new AsyncListDiffer<span class=\"token punctuation\">.</span>ListListener<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation builtin\">@Override</span>\n        <span class=\"token keyword\">public</span> void <span class=\"token function\">onCurrentListChanged</span><span class=\"token punctuation\">(</span>\n                <span class=\"token annotation builtin\">@NonNull</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> previousList<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@NonNull</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> currentList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ListAdapter<span class=\"token punctuation\">.</span>this<span class=\"token punctuation\">.</span><span class=\"token function\">onCurrentListChanged</span><span class=\"token punctuation\">(</span>previousList<span class=\"token punctuation\">,</span> currentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ListAdapter</code>는 AsyncListDiffer를 포함하는 클래스로, AsyncListDiffer의 객체 생성이 필요없이 <strong>백그라운드 쓰레드에서 DiffUtil의 비교 연산</strong> 을 편하게 수행할 수 있다.</p>\n<blockquote>\n<p><strong>getItem(position: Int)</strong></p>\n<p>ListAdapter 내부의 리스트에 해당 position 데이터를 사용할때 활용한다.</p>\n</blockquote>\n<blockquote>\n<p><strong>getCurrentList()</strong></p>\n<p>ListAdapter에서 사용하는 리스트에 접근하고 싶을때 사용한다.</p>\n</blockquote>\n<blockquote>\n<p><strong>submitList()</strong></p>\n<p>리스트의 데이터를 교체할 때 사용한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 제너릭 T와 ViewHolder를 넣어준다</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">CustomListAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ListAdapter<span class=\"token operator\">&lt;</span>Any<span class=\"token punctuation\">,</span> CustomListAdapter<span class=\"token punctuation\">.</span>CustomViewHolder<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>diffUtil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateViewHolder</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">:</span> ViewGroup<span class=\"token punctuation\">,</span> viewType<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CustomViewHolder <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBindViewHolder</span><span class=\"token punctuation\">(</span>holder<span class=\"token operator\">:</span> CustomViewHolder<span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// getItem()</span>\n        holder<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// DiffUtil.ItemCallback</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> diffUtil <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span><span class=\"token operator\">:</span> DiffUtil<span class=\"token punctuation\">.</span>ItemCallback<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">areItemsTheSame</span><span class=\"token punctuation\">(</span>oldItem<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> newItem<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> oldItem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> newItem<span class=\"token punctuation\">.</span>id\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">areContentsTheSame</span><span class=\"token punctuation\">(</span>oldItem<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> newItem<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> oldItem <span class=\"token operator\">==</span> newItem\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ListAdapter</code>를 사용하면 자체에서 <code class=\"language-text\">submitList()</code>를 지원하므로 메소드를 노출시키지 않고 adapter에서 바로 호출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Activity &amp; Fragment</span>\nadpater<span class=\"token punctuation\">.</span><span class=\"token function\">submitList</span><span class=\"token punctuation\">(</span>newList<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://hungseong.tistory.com/24\">https://hungseong.tistory.com/24</a></li>\n<li><a href=\"https://blog.kmshack.kr/RecyclerView-DiffUtil%EB%A1%9C-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%ED%95%98%EA%B8%B0/\">https://blog.kmshack.kr/RecyclerView-DiffUtil로-성능-향상하기</a></li>\n</ul>","frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기","date":"September 01, 2022","update":"September 01, 2022","tags":["Android","DiffUtil","RecyclerView"],"series":"Android"},"fields":{"slug":"/android-diffutil/","readingTime":{"minutes":7.405}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/flow/"},"frontmatter":{"title":"Kotlin Coroutines Flow 맛보기"}},"next":{"fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},"pageContext":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","series":"Android","previousPostId":"33959bf6-d080-5100-ac93-0be970a5d159","nextPostId":"b3372752-9e81-5642-ae8e-179f5c6bc152"}},"staticQueryHashes":[],"slicesMap":{}}