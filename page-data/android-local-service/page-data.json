{"componentChunkName":"component---src-templates-post-jsx","path":"/android-local-service/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","excerpt":"안드로이드의 4대 컴포넌트중에 하나인 Service의 구성은 과거에 한번 나누어 본적이 있다.  안드로이드에서 Activity/Fragment는 많이 사용하지만 실제로 Service를 사용을 하지 않아 이번에 서비스에 대한 예시로 Local  Service 의 동작 과정을 보려고 한다. Bind Service 안드로이드에서 바운드 서비스는 와는 달리 하나…","html":"<p>안드로이드의 4대 컴포넌트중에 하나인 <a href=\"https://ppeper.github.io/android/service/\">Service의 구성</a>은 과거에 한번 나누어 본적이 있다. </p>\n<p>안드로이드에서 Activity/Fragment는 많이 사용하지만 실제로 Service를 사용을 하지 않아 이번에 서비스에 대한 예시로 <strong>Local  Service</strong> 의 동작 과정을 보려고 한다.</p>\n<h1>Bind Service</h1>\n<p>안드로이드에서 바운드 서비스는 <code class=\"language-text\">startService()</code>와는 달리 하나 이상의 클라이언트 컴포넌트 간의 통신이 구현 가능하다.\nService가 Background에서 실행되고 있을 때, Activity 및 Fragment에서 Service의 메서드를 호출/결과를 받아서 보여주는 경우에 사용할 수 있다.</p>\n<h2>bindService 생명주기</h2>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/150674329-805df55b-0cde-4a26-915a-1cc42fb9343a.png\" width=\"40%\"></p>\n<ul>\n<li>서비스가 <strong>bindService()</strong> 함수로 시작되면 <code class=\"language-text\">onCreate()</code> -> <code class=\"language-text\">onBind()</code> 함수가 호출되면서 Running 상태가 된다.</li>\n<li><code class=\"language-text\">bindService()</code> 함수로 실행된 서비스는 <code class=\"language-text\">unbindService()</code> 함수로 종료하고, 종료하면서 <code class=\"language-text\">onUnbind()</code> -> <code class=\"language-text\">onDestroy()</code> 함수가 호출된다.</li>\n</ul>\n<h2>bindService 호출 방법</h2>\n<ul>\n<li>\n<p>startService()를 통해 서비스를 실행시키고 클라이언트가 bindService()를 통해 이에 binding 할 수 도 있다.</p>\n<ul>\n<li>1 이때는 바인딩을 모두 해제해도 서비스가 소멸되지 않으므로 <code class=\"language-text\">stopSelf()</code> 또는 <code class=\"language-text\">stopService()</code> 를 호출 해 주어야함</li>\n<li>2 이런 서비스(서비스를 계속 실행하면서 바인딩도 제공해야하는 경우) <code class=\"language-text\">onStartCommand()</code> 와 <code class=\"language-text\">onBind()</code> 둘 다를 구현 해주어야 한다.</li>\n</ul>\n</li>\n</ul>\n<h2>IPC / Binder</h2>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/230884520-c4d718d9-696c-4d99-a7da-60a3ae834b87.png\" width=\"50%\"></p>\n<ul>\n<li>\n<p>IPC (Inter Process Communication)</p>\n<ul>\n<li>프로세스 통신, 리눅스 커널에서 Binder를 이용하여 프로세스간 메시지를 주고 받도록 구현되어 있다.</li>\n<li>안드로이드는 리눅스 커널을 기반으로 만들어져 있으므로, process는 kernel 내부의 일정 공간을 공유하여 함수를 호출하며 이를 Binder Driver가 수행한다.</li>\n</ul>\n</li>\n<li>Binder는 데이터를 parcel 형태로 전달하기 때문에 안드로이드에서는 <code class=\"language-text\">parcelable</code> 클래스를 활용한다.</li>\n</ul>\n<hr>\n<h1>Local Service</h1>\n<ul>\n<li>Local에서 사용할 <code class=\"language-text\">BoundService.kt</code>를 작성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> BoundService<span class=\"token operator\">:</span> <span class=\"token function\">Service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> myBinder<span class=\"token operator\">:</span> MyLocalBinder\n\n    <span class=\"token comment\">// Foreground Service가 아니면 Bind Serice에서 사용할 Binder를 리턴</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBind</span><span class=\"token punctuation\">(</span>intent<span class=\"token operator\">:</span> Intent<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IBinder <span class=\"token punctuation\">{</span>\n        myBinder <span class=\"token operator\">=</span> <span class=\"token function\">MyLocalBinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> myBinder\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 부를 함수를 생성</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> dateFormat <span class=\"token operator\">=</span> <span class=\"token function\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"HH:mm:ss MM/dd/yyyy\"</span></span><span class=\"token punctuation\">,</span> Locale<span class=\"token punctuation\">.</span>KOREA<span class=\"token punctuation\">)</span>\n        dateFormat<span class=\"token punctuation\">.</span>timeZone <span class=\"token operator\">=</span> TimeZone<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeZone</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Asia/Seoul\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> dateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 외부면 Binder로 할 수 없음</span>\n    <span class=\"token comment\">/**\n     * Binder 는 IBinder 의 구현체로 onBind 를 통해 서비스 클라이언트에게 전달\n     * 되며 클라이언트는 이 객체를 이용해 서비스에 선언된 기능을 호출\n     */</span>\n    <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> MyLocalBinder<span class=\"token operator\">:</span> <span class=\"token function\">Binder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 외부 객체인 BoundService 객체를 반환하는 함수</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token label symbol\">@BoundService</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>service를 사용하기 위해 AndroidManifest.xml 파일에 service를 작성해 준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.test.service.BoundService<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>exported</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<ul>\n<li>서비스를 바인딩하고자 하는 Activity 파일을 생성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> BindActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> myService<span class=\"token operator\">:</span> BoundService\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> isBound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token comment\">/**\n     * 서비스가 반환한 바인더 객체(service: IBinder)를 이용하여\n     * 서비스에 접속하거나 접속을 종료하는 ServiceConnection 객체를 활용한다.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ServiceConnection <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onServiceConnected</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> ComponentName<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> service<span class=\"token operator\">:</span> IBinder<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> binder <span class=\"token operator\">=</span> service <span class=\"token keyword\">as</span> BoundService<span class=\"token punctuation\">.</span>MyLocalBinder\n            myService <span class=\"token operator\">=</span> binder<span class=\"token punctuation\">.</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            isBound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onServiceDisconnected</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> ComponentName<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            isBound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서비스에서 반환할 <code class=\"language-text\">IBinder</code> 객체를 사용하기 위해 <strong>ServiceConnection</strong> 의 서브 클래스를 구현하여 서비스의 연결 및 종료하는 코드를 작성하여 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> BoundService<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span> intent <span class=\"token operator\">-></span>\n        <span class=\"token function\">bindService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">.</span>BIND_AUTO_CREATE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">unbindService</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n        isBound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding <span class=\"token operator\">:</span> ActivityBindBinding\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n    binding <span class=\"token operator\">=</span> ActivityBindBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n\n    binding<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 서비스에 있는 함수인 getCurrentTime 가져오기</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> myService<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            binding<span class=\"token punctuation\">.</span>textView<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> result\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>onStart()에서 isBound가 아직 안되었자면 bindService()를 호출하여 생성한 BoundService를 연결 시켜 준다.</li>\n<li>onDestroy()에서 Activity가 종료되었다면 unbindService로 바인딩된 서비스 연결을 해제한다.</li>\n</ul>\n<p>해당 xml의 버튼을 누르게 되면 서비스에서 getCurrentTime()을 호출하여 현재 시간을 보여주게 된다.</p>\n<img src=\"https://user-images.githubusercontent.com/63226023/230888917-1be3b7b0-1a65-46dc-9830-6e56ee68442c.png\">","frontmatter":{"title":"안드로이드 Local Service 알아보기","date":"April 10, 2023","update":"April 10, 2023","tags":["Android","Service"],"series":"Android"},"fields":{"slug":"/android-local-service/","readingTime":{"minutes":5.255}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}},"next":{"fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},"pageContext":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","series":"Android","previousPostId":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","nextPostId":"c3641eee-48c5-5870-a5d1-26d1401311e7"}},"staticQueryHashes":[],"slicesMap":{}}