{"componentChunkName":"component---src-templates-post-jsx","path":"/android-local-service/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","excerpt":"안드로이드의 4대 컴포넌트중에 하나인 Service의 구성은 과거에 한번 나누어 본적이 있다.  안드로이드에서 Activity/Fragment는 많이 사용하지만 실제로 Service를 사용을 하지 않아 이번에 서비스에 대한 예시로 Local  Service 의 동작 과정을 보려고 한다. Bind Service 안드로이드에서 바운드 서비스는 와는 달리 하나…","html":"<p>안드로이드의 4대 컴포넌트중에 하나인 <a href=\"https://ppeper.github.io/android/service/\">Service의 구성</a>은 과거에 한번 나누어 본적이 있다. </p>\n<p>안드로이드에서 Activity/Fragment는 많이 사용하지만 실제로 Service를 사용을 하지 않아 이번에 서비스에 대한 예시로 <strong>Local  Service</strong> 의 동작 과정을 보려고 한다.</p>\n<h1 id=\"Bind-Service\" style=\"position:relative;\"><a href=\"#Bind-Service\" aria-label=\"Bind Service permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Bind Service</h1>\n<p>안드로이드에서 바운드 서비스는 <code class=\"language-text\">startService()</code>와는 달리 하나 이상의 클라이언트 컴포넌트 간의 통신이 구현 가능하다.\nService가 Background에서 실행되고 있을 때, Activity 및 Fragment에서 Service의 메서드를 호출/결과를 받아서 보여주는 경우에 사용할 수 있다.</p>\n<h2 id=\"bindService-생명주기\" style=\"position:relative;\"><a href=\"#bindService-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\" aria-label=\"bindService 생명주기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>bindService 생명주기</h2>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/150674329-805df55b-0cde-4a26-915a-1cc42fb9343a.png' width='40%'></p>\n<ul>\n<li>서비스가 <strong>bindService()</strong> 함수로 시작되면 <code class=\"language-text\">onCreate()</code> -> <code class=\"language-text\">onBind()</code> 함수가 호출되면서 Running 상태가 된다.</li>\n<li><code class=\"language-text\">bindService()</code> 함수로 실행된 서비스는 <code class=\"language-text\">unbindService()</code> 함수로 종료하고, 종료하면서 <code class=\"language-text\">onUnbind()</code> -> <code class=\"language-text\">onDestroy()</code> 함수가 호출된다.</li>\n</ul>\n<h2 id=\"bindService-호출-방법\" style=\"position:relative;\"><a href=\"#bindService-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"bindService 호출 방법 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>bindService 호출 방법</h2>\n<ul>\n<li>\n<p>startService()를 통해 서비스를 실행시키고 클라이언트가 bindService()를 통해 이에 binding 할 수 도 있다.</p>\n<ul>\n<li>1 이때는 바인딩을 모두 해제해도 서비스가 소멸되지 않으므로 <code class=\"language-text\">stopSelf()</code> 또는 <code class=\"language-text\">stopService()</code> 를 호출 해 주어야함</li>\n<li>2 이런 서비스(서비스를 계속 실행하면서 바인딩도 제공해야하는 경우) <code class=\"language-text\">onStartCommand()</code> 와 <code class=\"language-text\">onBind()</code> 둘 다를 구현 해주어야 한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"IPC--Binder\" style=\"position:relative;\"><a href=\"#IPC--Binder\" aria-label=\"IPC  Binder permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>IPC / Binder</h2>\n<p align='center'><img src='https://user-images.githubusercontent.com/63226023/230884520-c4d718d9-696c-4d99-a7da-60a3ae834b87.png' width='50%'></p>\n<ul>\n<li>\n<p>IPC (Inter Process Communication)</p>\n<ul>\n<li>프로세스 통신, 리눅스 커널에서 Binder를 이용하여 프로세스간 메시지를 주고 받도록 구현되어 있다.</li>\n<li>안드로이드는 리눅스 커널을 기반으로 만들어져 있으므로, process는 kernel 내부의 일정 공간을 공유하여 함수를 호출하며 이를 Binder Driver가 수행한다.</li>\n</ul>\n</li>\n<li>Binder는 데이터를 parcel 형태로 전달하기 때문에 안드로이드에서는 <code class=\"language-text\">parcelable</code> 클래스를 활용한다.</li>\n</ul>\n<hr>\n<h1 id=\"Local-Service\" style=\"position:relative;\"><a href=\"#Local-Service\" aria-label=\"Local Service permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Local Service</h1>\n<ul>\n<li>Local에서 사용할 <code class=\"language-text\">BoundService.kt</code>를 작성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> BoundService<span class=\"token operator\">:</span> <span class=\"token function\">Service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> myBinder<span class=\"token operator\">:</span> MyLocalBinder\n\n    <span class=\"token comment\">// Foreground Service가 아니면 Bind Serice에서 사용할 Binder를 리턴</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBind</span><span class=\"token punctuation\">(</span>intent<span class=\"token operator\">:</span> Intent<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IBinder <span class=\"token punctuation\">{</span>\n        myBinder <span class=\"token operator\">=</span> <span class=\"token function\">MyLocalBinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> myBinder\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 부를 함수를 생성</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> dateFormat <span class=\"token operator\">=</span> <span class=\"token function\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"HH:mm:ss MM/dd/yyyy\"</span></span><span class=\"token punctuation\">,</span> Locale<span class=\"token punctuation\">.</span>KOREA<span class=\"token punctuation\">)</span>\n        dateFormat<span class=\"token punctuation\">.</span>timeZone <span class=\"token operator\">=</span> TimeZone<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeZone</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Asia/Seoul\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> dateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 외부면 Binder로 할 수 없음</span>\n    <span class=\"token comment\">/**\n     * Binder 는 IBinder 의 구현체로 onBind 를 통해 서비스 클라이언트에게 전달\n     * 되며 클라이언트는 이 객체를 이용해 서비스에 선언된 기능을 호출\n     */</span>\n    <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> MyLocalBinder<span class=\"token operator\">:</span> <span class=\"token function\">Binder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 외부 객체인 BoundService 객체를 반환하는 함수</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token label symbol\">@BoundService</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>service를 사용하기 위해 AndroidManifest.xml 파일에 service를 작성해 준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.test.service.BoundService<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>exported</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<ul>\n<li>서비스를 바인딩하고자 하는 Activity 파일을 생성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> BindActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> myService<span class=\"token operator\">:</span> BoundService\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> isBound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token comment\">/**\n     * 서비스가 반환한 바인더 객체(service: IBinder)를 이용하여\n     * 서비스에 접속하거나 접속을 종료하는 ServiceConnection 객체를 활용한다.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ServiceConnection <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onServiceConnected</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> ComponentName<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> service<span class=\"token operator\">:</span> IBinder<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> binder <span class=\"token operator\">=</span> service <span class=\"token keyword\">as</span> BoundService<span class=\"token punctuation\">.</span>MyLocalBinder\n            myService <span class=\"token operator\">=</span> binder<span class=\"token punctuation\">.</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            isBound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onServiceDisconnected</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> ComponentName<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            isBound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서비스에서 반환할 <code class=\"language-text\">IBinder</code> 객체를 사용하기 위해 <strong>ServiceConnection</strong> 의 서브 클래스를 구현하여 서비스의 연결 및 종료하는 코드를 작성하여 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> BoundService<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span> intent <span class=\"token operator\">-></span>\n        <span class=\"token function\">bindService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">.</span>BIND_AUTO_CREATE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">unbindService</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n        isBound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding <span class=\"token operator\">:</span> ActivityBindBinding\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n    binding <span class=\"token operator\">=</span> ActivityBindBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n\n    binding<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 서비스에 있는 함수인 getCurrentTime 가져오기</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> myService<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            binding<span class=\"token punctuation\">.</span>textView<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> result\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>onStart()에서 isBound가 아직 안되었자면 bindService()를 호출하여 생성한 BoundService를 연결 시켜 준다.</li>\n<li>onDestroy()에서 Activity가 종료되었다면 unbindService로 바인딩된 서비스 연결을 해제한다.</li>\n</ul>\n<p>해당 xml의 버튼을 누르게 되면 서비스에서 getCurrentTime()을 호출하여 현재 시간을 보여주게 된다.</p>\n<img src='https://user-images.githubusercontent.com/63226023/230888917-1be3b7b0-1a65-46dc-9830-6e56ee68442c.png'>","frontmatter":{"title":"안드로이드 Local Service 알아보기","date":"April 10, 2023","update":"April 10, 2023","tags":["Android","Service"],"series":"Android"},"fields":{"slug":"/android-local-service/","readingTime":{"minutes":5.255}}},"seriesList":{"edges":[{"node":{"id":"8da53698-7fbf-50de-b57d-674258641696","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"32630555-7ffc-5c77-8e93-41b9441313c7","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"02cd12ae-6f40-58aa-be67-edbe6836235b","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"351d6f88-b8e1-5a92-8ab2-5a18f816e5f2","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"584879b5-e89c-570d-9728-e24e7543a406","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"e77807c0-3767-530f-a643-b3c28eead54b","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"7b7ee01b-c911-5343-9957-c4ef27024778","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"df99c5d4-e349-5463-9a5f-c65c2c714a98","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"c1750e54-c129-5248-b9a4-dc6ead87c256","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"ba69adf2-5458-521e-b6eb-85bbad0e6385","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"cc73ab05-b427-563d-82a2-220a8c3fedb6","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"832ca7b8-20af-5b55-9b16-2610187c24ae","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"379be128-999b-5d4c-b690-3f2552a189f3","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"f004c3a4-f9d8-509d-ab8f-7ae273cc1f6f","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"03b60894-ee1f-5d06-94b7-a41567772d61","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"7a30a0fa-f5f4-5b2a-9e51-03568d97de6d","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"793dad13-2ba5-5df0-957c-4763d3df25a2","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"e7e7c2d3-ace1-53dc-bd3b-ee4e96ad9b6c","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"fcc174d6-e820-5bfb-8407-5db69e9cff26","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"9ca4a2fd-2662-5c91-99af-5ddf44fc5fd4","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"2af94fb4-d2f5-5af1-9f2a-cd678174506d","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"4135a47f-c10c-5535-8b71-3add3f62dd6c","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"3f56723e-63f6-5dd9-b2e2-fe403e99c18b","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"e8c7ca90-23b4-5683-a655-90460391cf01","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"b600df71-260c-567f-8ccf-592f16304768","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"52277946-9258-55cd-9361-7b6cd2c26cf6","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"26ead8cc-53e7-5fca-8930-d6762ae10124","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"abbe933c-9872-5d48-8ef7-04d14e785ccc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f2966618-c744-5fb8-b785-3650ebae1072","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"bbef1829-8d9e-589f-b1c8-22945fc1bd11","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"75dc9cf5-f813-58b3-b426-c9125325ea76","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"1eaf8bbe-518b-5a56-bd4d-230253d4a1db","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"bae61635-412c-5e43-8a7b-1eafe2722928","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"28df186b-d648-5562-a726-a8c7350b5a01","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"eb0bbfb7-fa8e-53da-b0ad-3b250756090e","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}},{"node":{"id":"c4e9fd73-d14b-5068-9741-133bd0ab6738","fields":{"slug":"/android-scope-storage/"},"frontmatter":{"title":"안드로이드 Scope Storage 사용하기"}}},{"node":{"id":"86411f6e-6586-595e-913b-476b89495496","fields":{"slug":"/proguard/"},"frontmatter":{"title":"안드로이드 Proguard 사용하여 빌드 하기"}}}]},"previous":{"fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}},"next":{"fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},"pageContext":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","series":"Android","previousPostId":"b600df71-260c-567f-8ccf-592f16304768","nextPostId":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc"}},"staticQueryHashes":[],"slicesMap":{}}