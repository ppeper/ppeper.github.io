{"componentChunkName":"component---src-templates-post-jsx","path":"/compose-theme/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","excerpt":"안드로이드에서는 Material Design을 사용하여 컬러를 적용하여 라이트, 다크모드를 지원하는 앱을 만들 수 있게 해주고 있습니다. 하지만 Material의 지정된 테마가 한정적이고, 디자이너가 만든 색상의 네임을 사용해야 하는 경우에는 사용자 지정 테마를 만들어야 합니다. 이번에 Compose에서 사용자 지정 테마를 적용하는 방법을 하나씩 살펴보도…","html":"<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/3ee7a814-cc90-42ba-9411-6a20ff29c970\">\n<p>안드로이드에서는 Material Design을 사용하여 컬러를 적용하여 라이트, 다크모드를 지원하는 앱을 만들 수 있게 해주고 있습니다.</p>\n<p>하지만 Material의 지정된 테마가 한정적이고, 디자이너가 만든 색상의 네임을 사용해야 하는 경우에는 사용자 지정 테마를 만들어야 합니다. 이번에 Compose에서 사용자 지정 테마를 적용하는 방법을 하나씩 살펴보도록 하겠습니다!</p>\n<h1>📍 Compose Theme</h1>\n<p>안드로이드 스튜디오에서 기본적으로 Compose 프로젝트를 만들게 되면 <code class=\"language-text\">Color</code>, <code class=\"language-text\">Theme</code>, <code class=\"language-text\">Type</code>의 기본 값들이 생성되어 있습니다.</p>\n<h2>1. Color</h2>\n<p>앱에서 사용할 라이트,다크모드에 사용할 색상들을 지정하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> Purple80 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFD0BCFF</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> PurpleGrey80 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFCCC2DC</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> Pink80 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFEFB8C8</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> Purple40 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF6650a4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> PurpleGrey40 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF625b71</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> Pink40 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF7D5260</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>2. Typography</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Set of Material typography styles to start with</span>\n<span class=\"token keyword\">val</span> Typography <span class=\"token operator\">=</span> <span class=\"token function\">Typography</span><span class=\"token punctuation\">(</span>\n    bodyLarge <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n        fontFamily <span class=\"token operator\">=</span> FontFamily<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span>\n        fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">,</span>\n        fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n        lineHeight <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n        letterSpacing <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">.</span>sp\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>3. Theme</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> DarkColorScheme <span class=\"token operator\">=</span> <span class=\"token function\">darkColorScheme</span><span class=\"token punctuation\">(</span>\n    primary <span class=\"token operator\">=</span> Purple80<span class=\"token punctuation\">,</span>\n    secondary <span class=\"token operator\">=</span> PurpleGrey80<span class=\"token punctuation\">,</span>\n    tertiary <span class=\"token operator\">=</span> Pink80\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> LightColorScheme <span class=\"token operator\">=</span> <span class=\"token function\">lightColorScheme</span><span class=\"token punctuation\">(</span>\n    primary <span class=\"token operator\">=</span> Purple40<span class=\"token punctuation\">,</span>\n    secondary <span class=\"token operator\">=</span> PurpleGrey40<span class=\"token punctuation\">,</span>\n    tertiary <span class=\"token operator\">=</span> Pink40\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Theme.kt</code> 에서는 라이트, 다크모드에서 사용할 ColorScheme가 지정되어 있습니다. 이 메소드에서는 parameter를 따로 채워주지 않으면 기본 값이 설정되게 됩니다.</p>\n<p>시스템의 모드에 따라 colors를 정의하고 <code class=\"language-text\">MaterialTheme</code>에 해당 인자들을 넘겨줘 사용하고 있다는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CustomTheme</span><span class=\"token punctuation\">(</span>\n    darkTheme<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token function\">isSystemInDarkTheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    dynamicColor<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@Composable</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> colorScheme <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n        dynamicColor <span class=\"token operator\">&amp;&amp;</span> Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>S <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> context <span class=\"token operator\">=</span> LocalContext<span class=\"token punctuation\">.</span>current\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>darkTheme<span class=\"token punctuation\">)</span> <span class=\"token function\">dynamicDarkColorScheme</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token function\">dynamicLightColorScheme</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        darkTheme <span class=\"token operator\">-></span> DarkColorScheme\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> LightColorScheme\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token function\">MaterialTheme</span><span class=\"token punctuation\">(</span>\n        colorScheme <span class=\"token operator\">=</span> colorScheme<span class=\"token punctuation\">,</span>\n        typography <span class=\"token operator\">=</span> Typography<span class=\"token punctuation\">,</span>\n        content <span class=\"token operator\">=</span> content\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Theme 만들어보기</h1>\n<p>위에서 봤던 컬러, 폰트등을 사용자 지정 테마로 만들어서 사용해 보도록 하겠습니다.</p>\n<p>먼저 Material에서 <code class=\"language-text\">lightColorScheme</code>, <code class=\"language-text\">darkColorScheme</code>을 사용했던 것과 같이 커스텀 ColorScheme를 만들어야 합니다.</p>\n<p>Color들이 시스템 모드에 맞게 변경된다면 Recomposition이 일어나야하므로 지정한 color들을 State로 감싸주는 작업이 필요합니다.</p>\n<h2>사용자 Color</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> primary <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFB4BDE9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> primaryDark <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF6E81E4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> background <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFE2E2E2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> backgroundDark <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF3D3D3D</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">CustomColorScheme</span><span class=\"token punctuation\">(</span>\n    primary<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">,</span>\n    background<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> primary <span class=\"token keyword\">by</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span>primary<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span>\n    <span class=\"token keyword\">var</span> background <span class=\"token keyword\">by</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span>background<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> customLightColorScheme<span class=\"token operator\">:</span> RickColorScheme <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">RickColorScheme</span><span class=\"token punctuation\">(</span>\n        primary <span class=\"token operator\">=</span> primary<span class=\"token punctuation\">,</span>\n        background <span class=\"token operator\">=</span> background<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> customDarkColorScheme<span class=\"token operator\">:</span> RickColorScheme <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">RickColorScheme</span><span class=\"token punctuation\">(</span>\n        primary <span class=\"token operator\">=</span> primaryDark<span class=\"token punctuation\">,</span>\n        background <span class=\"token operator\">=</span> backgroundDark<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>사용자 Typography</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> pretendard <span class=\"token operator\">=</span> <span class=\"token function\">FontFamily</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">Font</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>font<span class=\"token punctuation\">.</span>pretendard_regular<span class=\"token punctuation\">,</span> FontWeight<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Font</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>font<span class=\"token punctuation\">.</span>pretendard_medium<span class=\"token punctuation\">,</span> FontWeight<span class=\"token punctuation\">.</span>Medium<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Font</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>font<span class=\"token punctuation\">.</span>pretendard_semi_bold<span class=\"token punctuation\">,</span> FontWeight<span class=\"token punctuation\">.</span>SemiBold<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// FontFamily가 FontWeight에 따라 선택된다.</span>\n<span class=\"token keyword\">val</span> title01 <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n    fontSize <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n    fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span>\n    fontFamily <span class=\"token operator\">=</span> pretendard\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> title02 <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n    fontSize <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n    fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>SemiBold<span class=\"token punctuation\">,</span>\n    fontFamily <span class=\"token operator\">=</span> pretendard\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">CustomTypography</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> title01<span class=\"token operator\">:</span> TextStyle <span class=\"token operator\">=</span> title01<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> title02<span class=\"token operator\">:</span> TextStyle <span class=\"token operator\">=</span> title02<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>만들어준 ColorScheme 및 Typography들은 <code class=\"language-text\">CompositionLocalProvider</code> 를 통해 제공할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CustomTheme</span><span class=\"token punctuation\">(</span>\n    darkTheme<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token function\">isSystemInDarkTheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@Composable</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">val</span> typography <span class=\"token operator\">=</span> <span class=\"token function\">CustomTypography</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> currentColor <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>darkTheme<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            customDarkColorScheme\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            customLightColorScheme\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">CompositionLocalProvider</span><span class=\"token punctuation\">(</span>\n        LocalColorScheme provides currentColor\n        LocalTypography provides typography\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ProvideTextStyle</span><span class=\"token punctuation\">(</span>typography<span class=\"token punctuation\">.</span>title01<span class=\"token punctuation\">,</span> content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> LocalColorScheme <span class=\"token operator\">=</span> staticCompositionLocalOf <span class=\"token punctuation\">{</span> customLightColorScheme <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> LocalTypography <span class=\"token operator\">=</span> staticCompositionLocalOf <span class=\"token punctuation\">{</span> <span class=\"token function\">CustomTypography</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>테마 값 사용하기</h2>\n<p><strong>CompositionLocalProvider</strong> 로 주입된 color나 typography는 <code class=\"language-text\">LocalColorScheme.current</code> 를 통해 최신 값을 가져올 수 있습니다.</p>\n<p>이를 <code class=\"language-text\">object</code> 로 감싸 더 쉽게 사용할 수 있도록 만들어 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">object</span> CustomTheme <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> colors<span class=\"token operator\">:</span> CustomColorScheme\n        <span class=\"token annotation builtin\">@Composable</span>\n        <span class=\"token annotation builtin\">@ReadOnlyComposable</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> LocalColorScheme<span class=\"token punctuation\">.</span>current\n\n    <span class=\"token keyword\">val</span> typography<span class=\"token operator\">:</span> CustomTypography\n        <span class=\"token annotation builtin\">@Composable</span>\n        <span class=\"token annotation builtin\">@ReadOnlyComposable</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> LocalTypography<span class=\"token punctuation\">.</span>current\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>@ReadOnlyComposable : 읽기에 최적화되게 만들어주는 어노테이션</p>\n</blockquote>\n<p>간단에게 테스트를 위해 color값을 설정해 보면 시스템 모드에 따라 색상이 설정되는 것을 볼 수 있습니다 👋🏼</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n    modifier <span class=\"token operator\">=</span> modifier\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">background</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> CustomTheme<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/09855cf3-7793-42a8-ab19-441ce43df544\">\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-custom-themes-b1836877981d\">https://betterprogramming.pub/jetpack-compose-custom-themes-b1836877981d</a></li>\n</ul>","frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기","date":"April 26, 2024","update":"April 26, 2024","tags":["Android","Compose"],"series":"Android"},"fields":{"slug":"/compose-theme/","readingTime":{"minutes":4.98}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"bc850df8-7668-542d-896a-6380a5c90b44","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}}]},"previous":{"fields":{"slug":"/serialization/"},"frontmatter":{"title":"코틑린을 위한 Kotlinx Serizalization"}},"next":{"fields":{"slug":"/ktor/"},"frontmatter":{"title":"KMP를 지원하는 Ktor Client를 사용해보자"}}},"pageContext":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","series":"Android","previousPostId":"40ff7f0f-3ad6-58d6-a98f-b0a986fe1672","nextPostId":"ba5292eb-3683-52ad-81e1-453e0cd6dc42"}},"staticQueryHashes":[],"slicesMap":{}}