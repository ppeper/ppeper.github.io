{"componentChunkName":"component---src-templates-post-jsx","path":"/compose-theme/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","excerpt":"안드로이드에서는 Material Design을 사용하여 컬러를 적용하여 라이트, 다크모드를 지원하는 앱을 만들 수 있게 해주고 있습니다. 하지만 Material의 지정된 테마가 한정적이고, 디자이너가 만든 색상의 네임을 사용해야 하는 경우에는 사용자 지정 테마를 만들어야 합니다. 이번에 Compose에서 사용자 지정 테마를 적용하는 방법을 하나씩 살펴보도…","html":"<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/3ee7a814-cc90-42ba-9411-6a20ff29c970\">\n<p>안드로이드에서는 Material Design을 사용하여 컬러를 적용하여 라이트, 다크모드를 지원하는 앱을 만들 수 있게 해주고 있습니다.</p>\n<p>하지만 Material의 지정된 테마가 한정적이고, 디자이너가 만든 색상의 네임을 사용해야 하는 경우에는 사용자 지정 테마를 만들어야 합니다. 이번에 Compose에서 사용자 지정 테마를 적용하는 방법을 하나씩 살펴보도록 하겠습니다!</p>\n<h1>📍 Compose Theme</h1>\n<p>안드로이드 스튜디오에서 기본적으로 Compose 프로젝트를 만들게 되면 <code class=\"language-text\">Color</code>, <code class=\"language-text\">Theme</code>, <code class=\"language-text\">Type</code>의 기본 값들이 생성되어 있습니다.</p>\n<h2>1. Color</h2>\n<p>앱에서 사용할 라이트,다크모드에 사용할 색상들을 지정하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> Purple80 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFD0BCFF</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> PurpleGrey80 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFCCC2DC</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> Pink80 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFEFB8C8</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> Purple40 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF6650a4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> PurpleGrey40 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF625b71</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> Pink40 <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF7D5260</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>2. Typography</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Set of Material typography styles to start with</span>\n<span class=\"token keyword\">val</span> Typography <span class=\"token operator\">=</span> <span class=\"token function\">Typography</span><span class=\"token punctuation\">(</span>\n    bodyLarge <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n        fontFamily <span class=\"token operator\">=</span> FontFamily<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span>\n        fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">,</span>\n        fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n        lineHeight <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n        letterSpacing <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">.</span>sp\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>3. Theme</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> DarkColorScheme <span class=\"token operator\">=</span> <span class=\"token function\">darkColorScheme</span><span class=\"token punctuation\">(</span>\n    primary <span class=\"token operator\">=</span> Purple80<span class=\"token punctuation\">,</span>\n    secondary <span class=\"token operator\">=</span> PurpleGrey80<span class=\"token punctuation\">,</span>\n    tertiary <span class=\"token operator\">=</span> Pink80\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> LightColorScheme <span class=\"token operator\">=</span> <span class=\"token function\">lightColorScheme</span><span class=\"token punctuation\">(</span>\n    primary <span class=\"token operator\">=</span> Purple40<span class=\"token punctuation\">,</span>\n    secondary <span class=\"token operator\">=</span> PurpleGrey40<span class=\"token punctuation\">,</span>\n    tertiary <span class=\"token operator\">=</span> Pink40\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Theme.kt</code> 에서는 라이트, 다크모드에서 사용할 ColorScheme가 지정되어 있습니다. 이 메소드에서는 parameter를 따로 채워주지 않으면 기본 값이 설정되게 됩니다.</p>\n<p>시스템의 모드에 따라 colors를 정의하고 <code class=\"language-text\">MaterialTheme</code>에 해당 인자들을 넘겨줘 사용하고 있다는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CustomTheme</span><span class=\"token punctuation\">(</span>\n    darkTheme<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token function\">isSystemInDarkTheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    dynamicColor<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@Composable</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> colorScheme <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n        dynamicColor <span class=\"token operator\">&amp;&amp;</span> Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>S <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> context <span class=\"token operator\">=</span> LocalContext<span class=\"token punctuation\">.</span>current\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>darkTheme<span class=\"token punctuation\">)</span> <span class=\"token function\">dynamicDarkColorScheme</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token function\">dynamicLightColorScheme</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        darkTheme <span class=\"token operator\">-></span> DarkColorScheme\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> LightColorScheme\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token function\">MaterialTheme</span><span class=\"token punctuation\">(</span>\n        colorScheme <span class=\"token operator\">=</span> colorScheme<span class=\"token punctuation\">,</span>\n        typography <span class=\"token operator\">=</span> Typography<span class=\"token punctuation\">,</span>\n        content <span class=\"token operator\">=</span> content\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Theme 만들어보기</h1>\n<p>위에서 봤던 컬러, 폰트등을 사용자 지정 테마로 만들어서 사용해 보도록 하겠습니다.</p>\n<p>먼저 Material에서 <code class=\"language-text\">lightColorScheme</code>, <code class=\"language-text\">darkColorScheme</code>을 사용했던 것과 같이 커스텀 ColorScheme를 만들어야 합니다.</p>\n<p>Color들이 시스템 모드에 맞게 변경된다면 Recomposition이 일어나야하므로 지정한 color들을 State로 감싸주는 작업이 필요합니다.</p>\n<h2>사용자 Color</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> primary <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFB4BDE9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> primaryDark <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF6E81E4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> background <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFE2E2E2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> backgroundDark <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF3D3D3D</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">CustomColorScheme</span><span class=\"token punctuation\">(</span>\n    primary<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">,</span>\n    background<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> primary <span class=\"token keyword\">by</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span>primary<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span>\n    <span class=\"token keyword\">var</span> background <span class=\"token keyword\">by</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span>background<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> customLightColorScheme<span class=\"token operator\">:</span> RickColorScheme <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">RickColorScheme</span><span class=\"token punctuation\">(</span>\n        primary <span class=\"token operator\">=</span> primary<span class=\"token punctuation\">,</span>\n        background <span class=\"token operator\">=</span> background<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> customDarkColorScheme<span class=\"token operator\">:</span> RickColorScheme <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">RickColorScheme</span><span class=\"token punctuation\">(</span>\n        primary <span class=\"token operator\">=</span> primaryDark<span class=\"token punctuation\">,</span>\n        background <span class=\"token operator\">=</span> backgroundDark<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>사용자 Typography</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> pretendard <span class=\"token operator\">=</span> <span class=\"token function\">FontFamily</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">Font</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>font<span class=\"token punctuation\">.</span>pretendard_regular<span class=\"token punctuation\">,</span> FontWeight<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Font</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>font<span class=\"token punctuation\">.</span>pretendard_medium<span class=\"token punctuation\">,</span> FontWeight<span class=\"token punctuation\">.</span>Medium<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Font</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>font<span class=\"token punctuation\">.</span>pretendard_semi_bold<span class=\"token punctuation\">,</span> FontWeight<span class=\"token punctuation\">.</span>SemiBold<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// FontFamily가 FontWeight에 따라 선택된다.</span>\n<span class=\"token keyword\">val</span> title01 <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n    fontSize <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n    fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span>\n    fontFamily <span class=\"token operator\">=</span> pretendard\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> title02 <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n    fontSize <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n    fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>SemiBold<span class=\"token punctuation\">,</span>\n    fontFamily <span class=\"token operator\">=</span> pretendard\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">CustomTypography</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> title01<span class=\"token operator\">:</span> TextStyle <span class=\"token operator\">=</span> title01<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> title02<span class=\"token operator\">:</span> TextStyle <span class=\"token operator\">=</span> title02<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>만들어준 ColorScheme 및 Typography들은 <code class=\"language-text\">CompositionLocalProvider</code> 를 통해 제공할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CustomTheme</span><span class=\"token punctuation\">(</span>\n    darkTheme<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token function\">isSystemInDarkTheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@Composable</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">val</span> typography <span class=\"token operator\">=</span> <span class=\"token function\">CustomTypography</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> currentColor <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>darkTheme<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            customDarkColorScheme\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            customLightColorScheme\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">CompositionLocalProvider</span><span class=\"token punctuation\">(</span>\n        LocalColorScheme provides currentColor\n        LocalTypography provides typography\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ProvideTextStyle</span><span class=\"token punctuation\">(</span>typography<span class=\"token punctuation\">.</span>title01<span class=\"token punctuation\">,</span> content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> LocalColorScheme <span class=\"token operator\">=</span> staticCompositionLocalOf <span class=\"token punctuation\">{</span> customLightColorScheme <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> LocalTypography <span class=\"token operator\">=</span> staticCompositionLocalOf <span class=\"token punctuation\">{</span> <span class=\"token function\">CustomTypography</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>테마 값 사용하기</h2>\n<p><strong>CompositionLocalProvider</strong> 로 주입된 color나 typography는 <code class=\"language-text\">LocalColorScheme.current</code> 를 통해 최신 값을 가져올 수 있습니다.</p>\n<p>이를 <code class=\"language-text\">object</code> 로 감싸 더 쉽게 사용할 수 있도록 만들어 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">object</span> CustomTheme <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> colors<span class=\"token operator\">:</span> CustomColorScheme\n        <span class=\"token annotation builtin\">@Composable</span>\n        <span class=\"token annotation builtin\">@ReadOnlyComposable</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> LocalColorScheme<span class=\"token punctuation\">.</span>current\n\n    <span class=\"token keyword\">val</span> typography<span class=\"token operator\">:</span> CustomTypography\n        <span class=\"token annotation builtin\">@Composable</span>\n        <span class=\"token annotation builtin\">@ReadOnlyComposable</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> LocalTypography<span class=\"token punctuation\">.</span>current\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>@ReadOnlyComposable : 읽기에 최적화되게 만들어주는 어노테이션</p>\n</blockquote>\n<p>간단에게 테스트를 위해 color값을 설정해 보면 시스템 모드에 따라 색상이 설정되는 것을 볼 수 있습니다 👋🏼</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n    modifier <span class=\"token operator\">=</span> modifier\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">background</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> CustomTheme<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/09855cf3-7793-42a8-ab19-441ce43df544\">\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-custom-themes-b1836877981d\">https://betterprogramming.pub/jetpack-compose-custom-themes-b1836877981d</a></li>\n</ul>","frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기","date":"April 26, 2024","update":"April 26, 2024","tags":["Android","Compose"],"series":"Android"},"fields":{"slug":"/compose-theme/","readingTime":{"minutes":4.98}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/serialization/"},"frontmatter":{"title":"코틑린을 위한 Kotlinx Serizalization"}},"next":{"fields":{"slug":"/ktor/"},"frontmatter":{"title":"KMP를 지원하는 Ktor Client를 사용해보자"}}},"pageContext":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","series":"Android","previousPostId":"770fa80e-3899-50bc-a219-6f0a4abde7eb","nextPostId":"1da09158-79bc-54c5-8886-5cf392f4154f"}},"staticQueryHashes":[],"slicesMap":{}}