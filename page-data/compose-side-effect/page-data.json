{"componentChunkName":"component---src-templates-post-jsx","path":"/compose-side-effect/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","excerpt":"Side Effect Sife Effect(부수 효과)는 컴포지블 외부에서 발생하는 앱의 상태 변경사항을 말한다. Compose에서는 Side Effect를 처리하기 위해 아래의 동작을 실행할 수 있는 를 사용할 수 있다. LaunchedEffect LaunchedEffect: 컴포저블에서 suspend fun을 실행하기 위해 사용된다. 컴포저블에서 시작…","html":"<img src=\"https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/3ee7a814-cc90-42ba-9411-6a20ff29c970\">\n<h1>Side Effect</h1>\n<p>Sife Effect(부수 효과)는 컴포지블 외부에서 발생하는 앱의 상태 변경사항을 말한다. Compose에서는 Side Effect를 처리하기 위해 아래의 동작을 실행할 수 있는 <code class=\"language-text\">Effect API</code>를 사용할 수 있다.</p>\n<h2>LaunchedEffect</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>\n\tkey1 <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\tblock <span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> CorountineScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p><strong>LaunchedEffect</strong>: 컴포저블에서 suspend fun을 실행하기 위해 사용된다.</p>\n<ul>\n<li>컴포저블에서 시작하면 매개변수로 전달된 블록이 코루틴으로 시작된다.</li>\n<li>컴포지션을 <strong>종료하면 실행중인 코루틴이 취소</strong> 된다.</li>\n<li>key값이 다른 키로 리컴포지션되면 <strong>기존 코루틴은 취소되고 새 코루틴에서 suspend 함수가 실행</strong> 된다.</li>\n</ul>\n</li>\n</ul>\n<p>이외에도 LaunchedEffect에서는 여러개의 key값을 매개변수로 받아 재실행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>\n\tkey1 <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\tkey2 <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\tblock <span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> CorountineScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">vararg</span> <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\tblock <span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> CorountineScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>DisposableEffect</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">DisposableEffect</span><span class=\"token punctuation\">(</span>\n\tkey1 <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\teffect <span class=\"token operator\">:</span> DisposableEffectScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> DisposableEffectResult\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">remember</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">DisposableEffectImpl</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>DisposableEffect</strong>: 컴포저블이 Dispose될 때 정리되어야 할 Side Effect를 정의하기 위해 사용된다. </li>\n</ul>\n<p>실제로 사용시 재수행 되는것을 결정하는 key값과 함께 <code class=\"language-text\">onDispose{}</code> 블록에서 초기화 로직을 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">HomeScreen</span><span class=\"token punctuation\">(</span>\n    lifecycleOwner<span class=\"token operator\">:</span> LifecycleOwner <span class=\"token operator\">=</span> LocalLifecycleOwner<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span>\n    onStart<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Send the 'started' analytics event</span>\n    onStop<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token comment\">// Send the 'stopped' analytics event</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Safely update the current lambdas when a new one is provided</span>\n    <span class=\"token keyword\">val</span> currentOnStart <span class=\"token keyword\">by</span> <span class=\"token function\">rememberUpdatedState</span><span class=\"token punctuation\">(</span>onStart<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> currentOnStop <span class=\"token keyword\">by</span> <span class=\"token function\">rememberUpdatedState</span><span class=\"token punctuation\">(</span>onStop<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// If `lifecycleOwner` changes, dispose and reset the effect</span>\n    <span class=\"token function\">DisposableEffect</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create an observer that triggers our remembered callbacks</span>\n        <span class=\"token comment\">// for sending analytics events</span>\n        <span class=\"token keyword\">val</span> observer <span class=\"token operator\">=</span> LifecycleEventObserver <span class=\"token punctuation\">{</span> _<span class=\"token punctuation\">,</span> event <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">currentOnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_STOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">currentOnStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Add the observer to the lifecycle</span>\n        lifecycleOwner<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// When the effect leaves the Composition, remove the observer</span>\n        onDispose <span class=\"token punctuation\">{</span>\n            lifecycleOwner<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* Home screen content */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시에서 onStart에서 시작하여 onStop에서 정리되어야 하는 경우에 <code class=\"language-text\">rememberUpdateState</code> 를 사용하여 각 매개변수의 onStart, onStop에 대한 state를 저장하고 lifecycle이 바뀔 때마다 새로운 observer가 lifecycle에 붙어 구독하고 <code class=\"language-text\">onDispose</code> 블록을 통하여 컴포저블이 제거될때 observer를 삭제할 수 있다.</p>\n<h2>SifeEffect</h2>\n<ul>\n<li><strong>SideEffect</strong>: 컴포저블 State를 Compose에서 관리하지 않는 객체와 공유하기 위해 사용된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">BackHandler</span><span class=\"token punctuation\">(</span>\n    backDispatcher<span class=\"token operator\">:</span> OnBackPressedDispatcher<span class=\"token punctuation\">,</span>\n    enabled<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Whether back events should be intercepted or not</span>\n    onBack<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    <span class=\"token keyword\">val</span> backCallback <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// On every successful composition, update the callback with the `enabled` value</span>\n    <span class=\"token comment\">// to tell `backCallback` whether back events should be intercepted or not</span>\n    SideEffect <span class=\"token punctuation\">{</span>\n        backCallback<span class=\"token punctuation\">.</span>isEnabled <span class=\"token operator\">=</span> enabled\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* Rest of the code */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시에서 BackHandler의 callback을 enable 할지 말지 통신을 하기위해 SideEffect를 사용해서 값을 업데이트한다.</p>\n<p>이외에 위의 3가지와 함께 사용할 수 있는 CoroutineScope와 State관련 함수를 제공한다.</p>\n<ul>\n<li><code class=\"language-text\">rememberCoroutineScope</code>: 컴포저블의 코루틴 스코프를 참조하여 외부에서 실행할 수 있도록 한다.</li>\n<li><code class=\"language-text\">rememberUpdatedState</code>: LaunchedEffect에서 State 변경시 재실행되지 않아도 되는 State를 정의하기 위해 사용한다.</li>\n<li><code class=\"language-text\">produceState</code>: Compose State가 아닌 것을 Compose State로 변환하기 위해 사용한다.</li>\n<li><code class=\"language-text\">deriveStateOf</code>: State를 다른 State로 변환하기 위해 사용한다.</li>\n<li><code class=\"language-text\">snapshotFlow</code>: 컴포저블의 State를 Flow형태로 변환한다.</li>\n</ul>\n<hr>\n<h1>정리</h1>\n<p>Compose에서 새로운 내용들이 많아 적용하고 한번 정리해 볼 시간이 필요하였는데 몰랐던 내용들을 많이 알고 가는 것 같다. 개념들을 알아보면서 실제로 서비스에 적용될 때 파악하고 쓰는 것이 중요할 것 같다.</p>\n<p>Compose를 처음 프로젝트에 적용하고 개발할 때 공부하는데 어려움이 많았는데 개념들을 정리해 보면서 꾸준히 공부해 나가야겠다! 🥲</p>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/jetpack/compose/side-effects?hl=ko\">Compose의 부수 효과</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Side Effect란?","date":"August 25, 2023","update":"August 25, 2023","tags":["Android","Compose","Side Effect"],"series":"Android"},"fields":{"slug":"/compose-side-effect/","readingTime":{"minutes":4.995}}},"seriesList":{"edges":[{"node":{"id":"ec35f26c-1e41-5966-85a5-26fa93fb5998","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"f0d5a7a2-4729-582b-85a5-b78dd0643477","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"c38cf2b3-111e-5e83-8623-c323546b3596","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"d0d74ae8-e541-598a-a0c8-30dbf6d27c14","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"7fddf3e0-5c6a-5813-b716-8b9348184adb","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"da53b090-256e-5185-877e-1c63d36292dd","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"76b96463-5dc0-5bce-9411-653b728c0d07","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"31f9951e-cfe2-5831-9791-bdd8a3f321f2","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"9f0c308a-f26f-5882-b1c0-603d65208794","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"6d7acb66-c296-5cb4-a56d-a6141652ba03","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"dd38b1c0-3bb7-5d67-9871-c8a997f7665a","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"4ae3792b-61e4-502c-997f-ea92464eb538","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"07f0687c-2335-5ce9-adbf-a9e3fdcdb964","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"08c0cd05-8fe6-5461-8c79-629efa4d3099","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"cd2c8fe7-7aa9-53d0-a66c-0157b8f0fdb5","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"567749b8-f03e-5f18-bf62-021e32de6506","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"92a49d11-9d7c-5fc9-b5f7-9575ee1886ea","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"9b4e8bd5-b184-5972-b687-b5a509707a35","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"f3e41032-8577-5a04-bb96-62be1e0aaf4b","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"5eb7df8d-a6a9-5e6c-a6a8-9e79a03cf5e8","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"c20926f6-1320-5a8c-9f4a-59e5892e6350","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"2469d97d-f2b6-544e-8ef9-20003ce2bd82","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"388b7df4-d323-53ac-80ff-f4ad265a6077","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"b3372752-9e81-5642-ae8e-179f5c6bc152","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"6a3accf7-a0c8-5423-ab54-e336ed105d22","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"5c4802cf-c4a3-5fde-9cde-044d3bf41c70","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"1dde30d6-b5f2-5e8e-bed9-9b829ed73a22","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"bf5f92c9-bce8-53e1-825f-5030efe6622a","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"1247175f-4af3-5f8d-a78f-eddc0317b772","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"02142718-5257-5488-b9d7-ce45ff8471b1","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"62ea7fd4-5557-5c1b-bced-0102a0ab8868","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"33da29ed-8ac4-5c3f-b024-3159e1da22b9","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"844abb8c-db3f-5c7a-b213-af7e4184750c","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"296e6b82-b35b-537d-a5a5-48d5d053235c","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"ac09eecc-30b4-525e-b40f-524fcc4dacc3","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"8ecadfc1-855e-53a0-97cc-6594b192981b","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"5bf017e2-3f6c-5f8a-b348-2b3586279023","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"d8ca9764-c28e-5491-b2d6-0f1fe3814612","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"9d857459-0fd2-5d37-8f39-eceec94e02b2","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a483c66e-f6c8-5ab3-ad60-d36392c1e724","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}},"next":{"fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},"pageContext":{"id":"43f4b29f-ed51-5fc0-bf47-a7bdb00ae9d8","series":"Android","previousPostId":"8ecadfc1-855e-53a0-97cc-6594b192981b","nextPostId":"5bf017e2-3f6c-5f8a-b348-2b3586279023"}},"staticQueryHashes":[],"slicesMap":{}}