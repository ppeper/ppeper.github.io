{"componentChunkName":"component---src-templates-post-jsx","path":"/compose-side-effect/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","excerpt":"Side Effect Sife Effect(부수 효과)는 컴포지블 외부에서 발생하는 앱의 상태 변경사항을 말한다. Compose에서는 Side Effect를 처리하기 위해 아래의 동작을 실행할 수 있는 를 사용할 수 있다. LaunchedEffect LaunchedEffect: 컴포저블에서 suspend fun을 실행하기 위해 사용된다. 컴포저블에서 시작…","html":"<img src='https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/3ee7a814-cc90-42ba-9411-6a20ff29c970'>\n<h1 id=\"Side-Effect\" style=\"position:relative;\"><a href=\"#Side-Effect\" aria-label=\"Side Effect permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Side Effect</h1>\n<p>Sife Effect(부수 효과)는 컴포지블 외부에서 발생하는 앱의 상태 변경사항을 말한다. Compose에서는 Side Effect를 처리하기 위해 아래의 동작을 실행할 수 있는 <code class=\"language-text\">Effect API</code>를 사용할 수 있다.</p>\n<h2 id=\"LaunchedEffect\" style=\"position:relative;\"><a href=\"#LaunchedEffect\" aria-label=\"LaunchedEffect permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>LaunchedEffect</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>\n\tkey1 <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\tblock <span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> CorountineScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p><strong>LaunchedEffect</strong>: 컴포저블에서 suspend fun을 실행하기 위해 사용된다.</p>\n<ul>\n<li>컴포저블에서 시작하면 매개변수로 전달된 블록이 코루틴으로 시작된다.</li>\n<li>컴포지션을 <strong>종료하면 실행중인 코루틴이 취소</strong> 된다.</li>\n<li>key값이 다른 키로 리컴포지션되면 <strong>기존 코루틴은 취소되고 새 코루틴에서 suspend 함수가 실행</strong> 된다.</li>\n</ul>\n</li>\n</ul>\n<p>이외에도 LaunchedEffect에서는 여러개의 key값을 매개변수로 받아 재실행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>\n\tkey1 <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\tkey2 <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\tblock <span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> CorountineScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">vararg</span> <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\tblock <span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> CorountineScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"DisposableEffect\" style=\"position:relative;\"><a href=\"#DisposableEffect\" aria-label=\"DisposableEffect permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>DisposableEffect</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">DisposableEffect</span><span class=\"token punctuation\">(</span>\n\tkey1 <span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\teffect <span class=\"token operator\">:</span> DisposableEffectScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> DisposableEffectResult\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">remember</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">DisposableEffectImpl</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>DisposableEffect</strong>: 컴포저블이 Dispose될 때 정리되어야 할 Side Effect를 정의하기 위해 사용된다. </li>\n</ul>\n<p>실제로 사용시 재수행 되는것을 결정하는 key값과 함께 <code class=\"language-text\">onDispose{}</code> 블록에서 초기화 로직을 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">HomeScreen</span><span class=\"token punctuation\">(</span>\n    lifecycleOwner<span class=\"token operator\">:</span> LifecycleOwner <span class=\"token operator\">=</span> LocalLifecycleOwner<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span>\n    onStart<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Send the 'started' analytics event</span>\n    onStop<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token comment\">// Send the 'stopped' analytics event</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Safely update the current lambdas when a new one is provided</span>\n    <span class=\"token keyword\">val</span> currentOnStart <span class=\"token keyword\">by</span> <span class=\"token function\">rememberUpdatedState</span><span class=\"token punctuation\">(</span>onStart<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> currentOnStop <span class=\"token keyword\">by</span> <span class=\"token function\">rememberUpdatedState</span><span class=\"token punctuation\">(</span>onStop<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// If `lifecycleOwner` changes, dispose and reset the effect</span>\n    <span class=\"token function\">DisposableEffect</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create an observer that triggers our remembered callbacks</span>\n        <span class=\"token comment\">// for sending analytics events</span>\n        <span class=\"token keyword\">val</span> observer <span class=\"token operator\">=</span> LifecycleEventObserver <span class=\"token punctuation\">{</span> _<span class=\"token punctuation\">,</span> event <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">currentOnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_STOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">currentOnStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Add the observer to the lifecycle</span>\n        lifecycleOwner<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// When the effect leaves the Composition, remove the observer</span>\n        onDispose <span class=\"token punctuation\">{</span>\n            lifecycleOwner<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* Home screen content */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시에서 onStart에서 시작하여 onStop에서 정리되어야 하는 경우에 <code class=\"language-text\">rememberUpdateState</code> 를 사용하여 각 매개변수의 onStart, onStop에 대한 state를 저장하고 lifecycle이 바뀔 때마다 새로운 observer가 lifecycle에 붙어 구독하고 <code class=\"language-text\">onDispose</code> 블록을 통하여 컴포저블이 제거될때 observer를 삭제할 수 있다.</p>\n<h2 id=\"SifeEffect\" style=\"position:relative;\"><a href=\"#SifeEffect\" aria-label=\"SifeEffect permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>SifeEffect</h2>\n<ul>\n<li><strong>SideEffect</strong>: 컴포저블 State를 Compose에서 관리하지 않는 객체와 공유하기 위해 사용된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">BackHandler</span><span class=\"token punctuation\">(</span>\n    backDispatcher<span class=\"token operator\">:</span> OnBackPressedDispatcher<span class=\"token punctuation\">,</span>\n    enabled<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Whether back events should be intercepted or not</span>\n    onBack<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    <span class=\"token keyword\">val</span> backCallback <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// On every successful composition, update the callback with the `enabled` value</span>\n    <span class=\"token comment\">// to tell `backCallback` whether back events should be intercepted or not</span>\n    SideEffect <span class=\"token punctuation\">{</span>\n        backCallback<span class=\"token punctuation\">.</span>isEnabled <span class=\"token operator\">=</span> enabled\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* Rest of the code */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시에서 BackHandler의 callback을 enable 할지 말지 통신을 하기위해 SideEffect를 사용해서 값을 업데이트한다.</p>\n<p>이외에 위의 3가지와 함께 사용할 수 있는 CoroutineScope와 State관련 함수를 제공한다.</p>\n<ul>\n<li><code class=\"language-text\">rememberCoroutineScope</code>: 컴포저블의 코루틴 스코프를 참조하여 외부에서 실행할 수 있도록 한다.</li>\n<li><code class=\"language-text\">rememberUpdatedState</code>: LaunchedEffect에서 State 변경시 재실행되지 않아도 되는 State를 정의하기 위해 사용한다.</li>\n<li><code class=\"language-text\">produceState</code>: Compose State가 아닌 것을 Compose State로 변환하기 위해 사용한다.</li>\n<li><code class=\"language-text\">deriveStateOf</code>: State를 다른 State로 변환하기 위해 사용한다.</li>\n<li><code class=\"language-text\">snapshotFlow</code>: 컴포저블의 State를 Flow형태로 변환한다.</li>\n</ul>\n<hr>\n<h1 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>정리</h1>\n<p>Compose에서 새로운 내용들이 많아 적용하고 한번 정리해 볼 시간이 필요하였는데 몰랐던 내용들을 많이 알고 가는 것 같다. 개념들을 알아보면서 실제로 서비스에 적용될 때 파악하고 쓰는 것이 중요할 것 같다.</p>\n<p>Compose를 처음 프로젝트에 적용하고 개발할 때 공부하는데 어려움이 많았는데 개념들을 정리해 보면서 꾸준히 공부해 나가야겠다! 🥲</p>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/jetpack/compose/side-effects?hl=ko\">Compose의 부수 효과</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Side Effect란?","date":"August 25, 2023","update":"August 25, 2023","tags":["Android","Compose","Side Effect"],"series":"Android"},"fields":{"slug":"/compose-side-effect/","readingTime":{"minutes":4.995}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"bc850df8-7668-542d-896a-6380a5c90b44","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}}]},"previous":{"fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}},"next":{"fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},"pageContext":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","series":"Android","previousPostId":"a3a56595-ff49-5d63-b85a-4db183a541b5","nextPostId":"57cc52b2-25b0-56fa-92d8-91e55927e81b"}},"staticQueryHashes":[],"slicesMap":{}}