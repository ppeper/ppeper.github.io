{"componentChunkName":"component---src-templates-post-jsx","path":"/livedata/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","excerpt":"이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 에 대해서 알게된 내용을 정리하려고 한다.😀\nViewModel을 사용하여 간단한 화폐 변환을 하는 예제에 LiveData 를 추가하여 좀 더 개선해 보려고 한다. LiveData 핵심 요약 LiveData 는 관찰 가능한(obserable) 데이터 홀더 클래스 이다. LiveData 의 인스…","html":"<img src='https://user-images.githubusercontent.com/63226023/151594101-266890b7-079a-47c5-9daa-2afbc335ccb7.png'>\n<p>이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 <code class=\"language-text\">LiveData</code>에 대해서 알게된 내용을 정리하려고 한다.😀\n<a href=\"https://ppeper.github.io/android/android-viewmodel/\">ViewModel을 사용하여</a> 간단한 화폐 변환을 하는 예제에 <strong>LiveData</strong> 를 추가하여 좀 더 개선해 보려고 한다.</p>\n<hr>\n<h1 id=\"LiveData-핵심-요약\" style=\"position:relative;\"><a href=\"#LiveData-%ED%95%B5%EC%8B%AC-%EC%9A%94%EC%95%BD\" aria-label=\"LiveData 핵심 요약 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>LiveData 핵심 요약</h1>\n<p><strong>LiveData</strong> 는 관찰 가능한(obserable) <strong>데이터 홀더 클래스</strong> 이다. <strong>LiveData</strong> 의 인스턴스에 포함된 데이터는 <strong>앱의 다른 객체</strong> 들이<code class=\"language-text\">(Activity나 Fragment와 같은 UI 컨트롤러)</code> 관찰할 수 있다. 또한 LiveData는 <strong>활동 생명 주기 상태</strong> 를 인식하여 앱의 <strong>메모리 누수</strong> 의 발생을 줄여준다.</p>\n<p><code class=\"language-text\">Observer</code> 클래스를 사용하여 <strong>실시간으로 데이터가 변경</strong> 되는지 감시하고 있다가 UI 컨트롤러(Activity)에게 알려주고, 알림을 받은 UI 컨트롤러는 데이터를 이용하여 UI를 업데이트한다.😮</p>\n<p>여기서 <code class=\"language-text\">Observer</code>가 관찰하는 데이터는 <code class=\"language-text\">LiveData라는 데이터 홀더 클래스</code>를 가지고 있는 데이터만 감시를 하게된다.</p>\n<p><strong>LiveData</strong> 는 LifeCycleOwner가 기본적으로 구현되어 있는 Activity와 Fragment에서 <strong>getLifecycle()</strong> 함수를 통하여 생명 주기를 가져와 <strong>활성화된 상태</strong> 에서만 변경사항을 알림을 받아 앞서 언급한 <strong>메모리 누수</strong> 의 발생을 줄여줄 수 있는것이다.👌</p>\n<blockquote>\n<p><code class=\"language-text\">Observer</code> 클래스로 표현되는 <strong>관찰자</strong> 의 수명주기가 <code class=\"language-text\">STARTED</code> 또는 <code class=\"language-text\">RESUMED</code> 상태일때 <strong>활성화</strong>(수신) ⭕</p>\n</blockquote>\n<blockquote>\n<p>수명주기가 끝나는 순간 <strong>관찰자</strong> 는 <strong>비 활성화</strong>(수신 거부)❌<br>\n<code class=\"language-text\">Lifecycle</code> 객체의 상태가 <code class=\"language-text\">DESTROYED</code>로 변경되면 <strong>관찰자를 삭제</strong> 가 가능. </p>\n</blockquote>\n<h2 id=\"LiveData의-사용의-장점\" style=\"position:relative;\"><a href=\"#LiveData%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"LiveData의 사용의 장점 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>LiveData의 사용의 장점</h2>\n<ul>\n<li>\n<p>데이터 상태와 UI의 일치 보장</p>\n<ul>\n<li><code class=\"language-text\">LiveData</code>는 데이터의 변경시 <code class=\"language-text\">Observer</code> 객체에 알린다. 따라서 <code class=\"language-text\">Observer</code>가 대신 UI를 업데이트하여 <strong>데이터와 UI의 일치를 보장</strong> 한다.</li>\n</ul>\n</li>\n<li>\n<p>메모리 누수 없음</p>\n<ul>\n<li><code class=\"language-text\">Observer</code>는 UI 컨트롤러(Activity/Fragment)의 수명 주기(Lifecycle) 객체에 결합이 되어있으므로 수명 주기가 끝나면 자동으로 삭제된다.</li>\n</ul>\n</li>\n<li>\n<p>중지된 활동으로 인한 비정상 종료 없음</p>\n<ul>\n<li><code class=\"language-text\">Oberver</code>의 수명 주기가 <strong>비활성 상태</strong> 에 있으면 어떤 <code class=\"language-text\">LiveData</code>의 이벤트를 수신하지 않기 때문에 비정상 종료가 없다.</li>\n</ul>\n</li>\n<li>\n<p>수명 주기의 자동화</p>\n<ul>\n<li>UI 구성 요소는 <strong>데이터를 관찰</strong> 만 하기 때문에 관찰을 중지나 다시시작을 하지 않는다. 따라서 <code class=\"language-text\">LiveData</code>는 <strong>데이터를 관찰하는 동안</strong> 관련 수명 주기 상태의 변경을 인식하여 자동으로 관리한다.</li>\n</ul>\n</li>\n<li>\n<p>최신 데이터 유지</p>\n<ul>\n<li>수명 주기가 비활성화에서 활성화가 될때는 최신의 데이트를 수신한다.</li>\n</ul>\n</li>\n<li>\n<p>적절한 구성 변경</p>\n<ul>\n<li>기기의 회전이 일어나면 기존에는 <code class=\"language-text\">savedInstanceState</code> 를 통하여 데이터를 저장하였다고 복원하는 방식이였지만 <code class=\"language-text\">LiveData</code>를 사용하면 최신의 데이터를 즉시 받을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>리소스 공유</p>\n<ul>\n<li><code class=\"language-text\">LiveData</code> 객체가 한번 시스템 서비스에 연결되면 리소스가 필요한 모든 관찰자(Observer)가 <code class=\"language-text\">LiveData</code> 객체를 볼 수 있다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"ViewModel에-LiveData-추가하기\" style=\"position:relative;\"><a href=\"#ViewModel%EC%97%90-LiveData-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"ViewModel에 LiveData 추가하기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>ViewModel에 LiveData 추가하기</h1>\n<p>기존의 MainViewModel 클래스에 결과로 보여질 값을 <code class=\"language-text\">LiveData</code>의 사용으로 바꿔준다.<br>\nLiveData의 사용은 <strong>캡슐화</strong> 를 통하여 접근할 수 있게 해준다.</p>\n<blockquote>\n<p>캡슐화💊: 객체의 변수와 함수를 하나로 묶고 실제 구현 내용 일부를 내부에 감추어 외부에서 쉽게 사용하지 못하도록 한다.</p>\n</blockquote>\n<h2 id=\"MutableLiveData-vs-LiveData\" style=\"position:relative;\"><a href=\"#MutableLiveData-vs-LiveData\" aria-label=\"MutableLiveData vs LiveData permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>MutableLiveData vs LiveData</h2>\n<p><code class=\"language-text\">MutableLiveData</code>는 변경이 가능하고 <code class=\"language-text\">LiveData</code>는 변경이 불가능 하다는 의미이다. </p>\n<p><code class=\"language-text\">ViewModel</code>의 관점에서 <code class=\"language-text\">LiveData</code>를 보게되면</p>\n<ul>\n<li>\n<p>ViewModel은 <strong>변경이 불가능한 LiveData</strong> 객체만 외부 관찰자에게 보여줘야한다.</p>\n<ul>\n<li>-> View(외부)에서는 LiveData 데이터를 변경하지 못해야 한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">LiveData</code>를 사용하면 <strong>실시간으로 데이터가 변경</strong> 을 관찰해야 하지만 변경이 불가능하면 이것 또한 모순이다😂</li>\n</ul>\n<blockquote>\n<p>📍 따라서 <strong>public</strong> 으로 <code class=\"language-text\">LiveData</code>을 만들고 <strong>private</strong> 으로 <code class=\"language-text\">MutableLiveData</code>를 선언하여 외부에서는 관찰만 하고, 내부에서는 수정을 하는 방식으로 사용을 하게된다.</p>\n</blockquote>\n<p><code class=\"language-text\">LiveData</code>을 변경을 할때는 <code class=\"language-text\">MutableLiveData</code>의 사용 말고도 다음의 방법이 있다.</p>\n<ul>\n<li><strong>Room 등의 라이브러리를 사용한다면</strong> Room의 데이터가 바뀌면 해당 LiveData로 바뀐 Data를 즉시 수정해준다.</li>\n<li>Room 등의 사용이 없다면 <code class=\"language-text\">viewModel</code>에서 <strong>MutableLiveData를 생성하여 LiveData와 연결</strong> 을 하고, 데이터의 변경은 <strong>MutableLiveData를 사용</strong> 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Room 등의 라이브러리를 사용하여 데이터를 직접 할당</span>\n<span class=\"token keyword\">val</span> livedata <span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span>함수이름\n\n<span class=\"token comment\">// MutableLiveData를 사용하여 직접 데이터를 가공하여 사용</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> _livedata <span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">MutableLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> livedata<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _livedata</code></pre></div>\n<hr>\n<h2 id=\"1-LiveData-추가\" style=\"position:relative;\"><a href=\"#1-LiveData-%EC%B6%94%EA%B0%80\" aria-label=\"1 LiveData 추가 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1. LiveData 추가</h2>\n<p>앞서 설명한 <code class=\"language-text\">LiveData</code>를 <strong>MainViewModel</strong> 클래스에 선언해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainViewModel<span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> usd_to_eu_rate <span class=\"token operator\">=</span> <span class=\"token number\">0.74f</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> dollarText <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> _result<span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">MutableLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _result\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dollarText <span class=\"token operator\">=</span> value\n        _result<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> usd_to_eu_rate\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"2-Observer-객체-생성\" style=\"position:relative;\"><a href=\"#2-Observer-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"2 Observer 객체 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>2. Observer 객체 생성</h2>\n<p><code class=\"language-text\">LiveData</code>를 선언하였다면 <code class=\"language-text\">Observer</code> 인터페이스를 구현하는 객체를 생성하여 <code class=\"language-text\">LiveData</code>의 데이터 변경을 관찰할 수 있다.</p>\n<p>일반적으로는 <code class=\"language-text\">UI 컨트롤러(Activity/Fragment)</code>에 <code class=\"language-text\">Observer</code> 객체를 만든다. <code class=\"language-text\">Observer</code> 인터페이스는 <code class=\"language-text\">LiveData</code>의 데이터 값이 변경될때 호출되는 <strong>onChange()</strong> 함수를 구현하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 데이터 관찰을 위한 옵저버 설정 -> onChange() 함수의 구현</span>\n<span class=\"token keyword\">val</span> resultObserver <span class=\"token operator\">=</span> Observer<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">-></span>\n    binding<span class=\"token punctuation\">.</span>resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-observe-함수-호출\" style=\"position:relative;\"><a href=\"#3-observe-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\" aria-label=\"3 observe 함수 호출 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>3. observe() 함수 호출</h2>\n<p><strong>observe()</strong> 함수를 사용하여<code class=\"language-text\">LiveData</code> 객체와 <code class=\"language-text\">Observer</code> 객체를 연결합니다. observe() 메서드는 <strong>LifecycleOwner</strong> 객체와 <strong>Observer 객체</strong> 를 파라미터로 받는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// viewModel를 Observer와 연결</span>\nviewModel<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultObserver<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 하면 <strong>ViewModel과 Observer 객체가 연결</strong> 이되고 <strong>Observer 객체는 LiveData 객체를 (여기선 변수 result)를 구독</strong> 하여 데이터의 변경사항에 대한 알림을 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding<span class=\"token operator\">:</span> ActivityMainBinding\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token operator\">:</span> MainViewModel\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        binding <span class=\"token operator\">=</span> ActivityMainBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n        viewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>MainViewModel<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 데이터 관찰을 위한 옵저버 설정</span>\n        <span class=\"token keyword\">val</span> resultObserver <span class=\"token operator\">=</span> Observer<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">-></span>\n            binding<span class=\"token punctuation\">.</span>resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// viewModel를 Observer와 연결</span>\n        viewModel<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultObserver<span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            convertButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dollarText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span>dollarText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"No Value\"</span></span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">LiveData</code>를 사용하여 실시간으로 데이터의 변경을 감지하도록 개선해 보았다. 다음에는 <code class=\"language-text\">DataBinding</code>을 <code class=\"language-text\">LiveData</code>와 같이 사용해보면서 <code class=\"language-text\">DataBinding</code>을 알아보도록 하겠다.</p>\n<blockquote>\n<p>📍<a href=\"https://ppeper.github.io/android/android-databinding/\">DataBinding + LiveData 적용하기</a></p>\n</blockquote>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/livedata?hl=ko\">안드로이드 LiveData 개요</a></li>\n<li><a href=\"https://comoi.io/300\">LiveData 와 MutableLiveData</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기","date":"January 31, 2022","update":"January 31, 2022","tags":["Android","LiveData","ACC"],"series":"Android"},"fields":{"slug":"/livedata/","readingTime":{"minutes":8.835}}},"seriesList":{"edges":[{"node":{"id":"8da53698-7fbf-50de-b57d-674258641696","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"32630555-7ffc-5c77-8e93-41b9441313c7","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"02cd12ae-6f40-58aa-be67-edbe6836235b","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"351d6f88-b8e1-5a92-8ab2-5a18f816e5f2","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"e77807c0-3767-530f-a643-b3c28eead54b","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"584879b5-e89c-570d-9728-e24e7543a406","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"7b7ee01b-c911-5343-9957-c4ef27024778","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"df99c5d4-e349-5463-9a5f-c65c2c714a98","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"c1750e54-c129-5248-b9a4-dc6ead87c256","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"ba69adf2-5458-521e-b6eb-85bbad0e6385","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"cc73ab05-b427-563d-82a2-220a8c3fedb6","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"832ca7b8-20af-5b55-9b16-2610187c24ae","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"379be128-999b-5d4c-b690-3f2552a189f3","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"f004c3a4-f9d8-509d-ab8f-7ae273cc1f6f","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"03b60894-ee1f-5d06-94b7-a41567772d61","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"7a30a0fa-f5f4-5b2a-9e51-03568d97de6d","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"793dad13-2ba5-5df0-957c-4763d3df25a2","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"e7e7c2d3-ace1-53dc-bd3b-ee4e96ad9b6c","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"fcc174d6-e820-5bfb-8407-5db69e9cff26","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"9ca4a2fd-2662-5c91-99af-5ddf44fc5fd4","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"2af94fb4-d2f5-5af1-9f2a-cd678174506d","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"4135a47f-c10c-5535-8b71-3add3f62dd6c","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"3f56723e-63f6-5dd9-b2e2-fe403e99c18b","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"b600df71-260c-567f-8ccf-592f16304768","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"e8c7ca90-23b4-5683-a655-90460391cf01","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"52277946-9258-55cd-9361-7b6cd2c26cf6","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"26ead8cc-53e7-5fca-8930-d6762ae10124","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"abbe933c-9872-5d48-8ef7-04d14e785ccc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f2966618-c744-5fb8-b785-3650ebae1072","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"bbef1829-8d9e-589f-b1c8-22945fc1bd11","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"75dc9cf5-f813-58b3-b426-c9125325ea76","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"1eaf8bbe-518b-5a56-bd4d-230253d4a1db","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"bae61635-412c-5e43-8a7b-1eafe2722928","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"28df186b-d648-5562-a726-a8c7350b5a01","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"eb0bbfb7-fa8e-53da-b0ad-3b250756090e","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}},{"node":{"id":"c4e9fd73-d14b-5068-9741-133bd0ab6738","fields":{"slug":"/android-scope-storage/"},"frontmatter":{"title":"안드로이드 Scope Storage 사용하기"}}}]},"previous":{"fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}},"next":{"fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},"pageContext":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","series":"Android","previousPostId":"832ca7b8-20af-5b55-9b16-2610187c24ae","nextPostId":"379be128-999b-5d4c-b690-3f2552a189f3"}},"staticQueryHashes":[],"slicesMap":{}}