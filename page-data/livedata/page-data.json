{"componentChunkName":"component---src-templates-post-jsx","path":"/livedata/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","excerpt":"이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 에 대해서 알게된 내용을 정리하려고 한다.😀\nViewModel을 사용하여 간단한 화폐 변환을 하는 예제에 LiveData 를 추가하여 좀 더 개선해 보려고 한다. LiveData 핵심 요약 LiveData 는 관찰 가능한(obserable) 데이터 홀더 클래스 이다. LiveData 의 인스…","html":"<img src=\"https://user-images.githubusercontent.com/63226023/151594101-266890b7-079a-47c5-9daa-2afbc335ccb7.png\">\n<p>이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 <code class=\"language-text\">LiveData</code>에 대해서 알게된 내용을 정리하려고 한다.😀\n<a href=\"https://ppeper.github.io/android/android-viewmodel/\">ViewModel을 사용하여</a> 간단한 화폐 변환을 하는 예제에 <strong>LiveData</strong> 를 추가하여 좀 더 개선해 보려고 한다.</p>\n<hr>\n<h1>LiveData 핵심 요약</h1>\n<p><strong>LiveData</strong> 는 관찰 가능한(obserable) <strong>데이터 홀더 클래스</strong> 이다. <strong>LiveData</strong> 의 인스턴스에 포함된 데이터는 <strong>앱의 다른 객체</strong> 들이<code class=\"language-text\">(Activity나 Fragment와 같은 UI 컨트롤러)</code> 관찰할 수 있다. 또한 LiveData는 <strong>활동 생명 주기 상태</strong> 를 인식하여 앱의 <strong>메모리 누수</strong> 의 발생을 줄여준다.</p>\n<p><code class=\"language-text\">Observer</code> 클래스를 사용하여 <strong>실시간으로 데이터가 변경</strong> 되는지 감시하고 있다가 UI 컨트롤러(Activity)에게 알려주고, 알림을 받은 UI 컨트롤러는 데이터를 이용하여 UI를 업데이트한다.😮</p>\n<p>여기서 <code class=\"language-text\">Observer</code>가 관찰하는 데이터는 <code class=\"language-text\">LiveData라는 데이터 홀더 클래스</code>를 가지고 있는 데이터만 감시를 하게된다.</p>\n<p><strong>LiveData</strong> 는 LifeCycleOwner가 기본적으로 구현되어 있는 Activity와 Fragment에서 <strong>getLifecycle()</strong> 함수를 통하여 생명 주기를 가져와 <strong>활성화된 상태</strong> 에서만 변경사항을 알림을 받아 앞서 언급한 <strong>메모리 누수</strong> 의 발생을 줄여줄 수 있는것이다.👌</p>\n<blockquote>\n<p><code class=\"language-text\">Observer</code> 클래스로 표현되는 <strong>관찰자</strong> 의 수명주기가 <code class=\"language-text\">STARTED</code> 또는 <code class=\"language-text\">RESUMED</code> 상태일때 <strong>활성화</strong>(수신) ⭕</p>\n</blockquote>\n<blockquote>\n<p>수명주기가 끝나는 순간 <strong>관찰자</strong> 는 <strong>비 활성화</strong>(수신 거부)❌<br>\n<code class=\"language-text\">Lifecycle</code> 객체의 상태가 <code class=\"language-text\">DESTROYED</code>로 변경되면 <strong>관찰자를 삭제</strong> 가 가능. </p>\n</blockquote>\n<h2>LiveData의 사용의 장점</h2>\n<ul>\n<li>\n<p>데이터 상태와 UI의 일치 보장</p>\n<ul>\n<li><code class=\"language-text\">LiveData</code>는 데이터의 변경시 <code class=\"language-text\">Observer</code> 객체에 알린다. 따라서 <code class=\"language-text\">Observer</code>가 대신 UI를 업데이트하여 <strong>데이터와 UI의 일치를 보장</strong> 한다.</li>\n</ul>\n</li>\n<li>\n<p>메모리 누수 없음</p>\n<ul>\n<li><code class=\"language-text\">Observer</code>는 UI 컨트롤러(Activity/Fragment)의 수명 주기(Lifecycle) 객체에 결합이 되어있으므로 수명 주기가 끝나면 자동으로 삭제된다.</li>\n</ul>\n</li>\n<li>\n<p>중지된 활동으로 인한 비정상 종료 없음</p>\n<ul>\n<li><code class=\"language-text\">Oberver</code>의 수명 주기가 <strong>비활성 상태</strong> 에 있으면 어떤 <code class=\"language-text\">LiveData</code>의 이벤트를 수신하지 않기 때문에 비정상 종료가 없다.</li>\n</ul>\n</li>\n<li>\n<p>수명 주기의 자동화</p>\n<ul>\n<li>UI 구성 요소는 <strong>데이터를 관찰</strong> 만 하기 때문에 관찰을 중지나 다시시작을 하지 않는다. 따라서 <code class=\"language-text\">LiveData</code>는 <strong>데이터를 관찰하는 동안</strong> 관련 수명 주기 상태의 변경을 인식하여 자동으로 관리한다.</li>\n</ul>\n</li>\n<li>\n<p>최신 데이터 유지</p>\n<ul>\n<li>수명 주기가 비활성화에서 활성화가 될때는 최신의 데이트를 수신한다.</li>\n</ul>\n</li>\n<li>\n<p>적절한 구성 변경</p>\n<ul>\n<li>기기의 회전이 일어나면 기존에는 <code class=\"language-text\">savedInstanceState</code> 를 통하여 데이터를 저장하였다고 복원하는 방식이였지만 <code class=\"language-text\">LiveData</code>를 사용하면 최신의 데이터를 즉시 받을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>리소스 공유</p>\n<ul>\n<li><code class=\"language-text\">LiveData</code> 객체가 한번 시스템 서비스에 연결되면 리소스가 필요한 모든 관찰자(Observer)가 <code class=\"language-text\">LiveData</code> 객체를 볼 수 있다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>ViewModel에 LiveData 추가하기</h1>\n<p>기존의 MainViewModel 클래스에 결과로 보여질 값을 <code class=\"language-text\">LiveData</code>의 사용으로 바꿔준다.<br>\nLiveData의 사용은 <strong>캡슐화</strong> 를 통하여 접근할 수 있게 해준다.</p>\n<blockquote>\n<p>캡슐화💊: 객체의 변수와 함수를 하나로 묶고 실제 구현 내용 일부를 내부에 감추어 외부에서 쉽게 사용하지 못하도록 한다.</p>\n</blockquote>\n<h2>MutableLiveData vs LiveData</h2>\n<p><code class=\"language-text\">MutableLiveData</code>는 변경이 가능하고 <code class=\"language-text\">LiveData</code>는 변경이 불가능 하다는 의미이다. </p>\n<p><code class=\"language-text\">ViewModel</code>의 관점에서 <code class=\"language-text\">LiveData</code>를 보게되면</p>\n<ul>\n<li>\n<p>ViewModel은 <strong>변경이 불가능한 LiveData</strong> 객체만 외부 관찰자에게 보여줘야한다.</p>\n<ul>\n<li>-> View(외부)에서는 LiveData 데이터를 변경하지 못해야 한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">LiveData</code>를 사용하면 <strong>실시간으로 데이터가 변경</strong> 을 관찰해야 하지만 변경이 불가능하면 이것 또한 모순이다😂</li>\n</ul>\n<blockquote>\n<p>📍 따라서 <strong>public</strong> 으로 <code class=\"language-text\">LiveData</code>을 만들고 <strong>private</strong> 으로 <code class=\"language-text\">MutableLiveData</code>를 선언하여 외부에서는 관찰만 하고, 내부에서는 수정을 하는 방식으로 사용을 하게된다.</p>\n</blockquote>\n<p><code class=\"language-text\">LiveData</code>을 변경을 할때는 <code class=\"language-text\">MutableLiveData</code>의 사용 말고도 다음의 방법이 있다.</p>\n<ul>\n<li><strong>Room 등의 라이브러리를 사용한다면</strong> Room의 데이터가 바뀌면 해당 LiveData로 바뀐 Data를 즉시 수정해준다.</li>\n<li>Room 등의 사용이 없다면 <code class=\"language-text\">viewModel</code>에서 <strong>MutableLiveData를 생성하여 LiveData와 연결</strong> 을 하고, 데이터의 변경은 <strong>MutableLiveData를 사용</strong> 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Room 등의 라이브러리를 사용하여 데이터를 직접 할당</span>\n<span class=\"token keyword\">val</span> livedata <span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span>함수이름\n\n<span class=\"token comment\">// MutableLiveData를 사용하여 직접 데이터를 가공하여 사용</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> _livedata <span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">MutableLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> livedata<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _livedata</code></pre></div>\n<hr>\n<h2>1. LiveData 추가</h2>\n<p>앞서 설명한 <code class=\"language-text\">LiveData</code>를 <strong>MainViewModel</strong> 클래스에 선언해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainViewModel<span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> usd_to_eu_rate <span class=\"token operator\">=</span> <span class=\"token number\">0.74f</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> dollarText <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> _result<span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">MutableLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _result\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dollarText <span class=\"token operator\">=</span> value\n        _result<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> usd_to_eu_rate\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>2. Observer 객체 생성</h2>\n<p><code class=\"language-text\">LiveData</code>를 선언하였다면 <code class=\"language-text\">Observer</code> 인터페이스를 구현하는 객체를 생성하여 <code class=\"language-text\">LiveData</code>의 데이터 변경을 관찰할 수 있다.</p>\n<p>일반적으로는 <code class=\"language-text\">UI 컨트롤러(Activity/Fragment)</code>에 <code class=\"language-text\">Observer</code> 객체를 만든다. <code class=\"language-text\">Observer</code> 인터페이스는 <code class=\"language-text\">LiveData</code>의 데이터 값이 변경될때 호출되는 <strong>onChange()</strong> 함수를 구현하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 데이터 관찰을 위한 옵저버 설정 -> onChange() 함수의 구현</span>\n<span class=\"token keyword\">val</span> resultObserver <span class=\"token operator\">=</span> Observer<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">-></span>\n    binding<span class=\"token punctuation\">.</span>resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>3. observe() 함수 호출</h2>\n<p><strong>observe()</strong> 함수를 사용하여<code class=\"language-text\">LiveData</code> 객체와 <code class=\"language-text\">Observer</code> 객체를 연결합니다. observe() 메서드는 <strong>LifecycleOwner</strong> 객체와 <strong>Observer 객체</strong> 를 파라미터로 받는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// viewModel를 Observer와 연결</span>\nviewModel<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultObserver<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 하면 <strong>ViewModel과 Observer 객체가 연결</strong> 이되고 <strong>Observer 객체는 LiveData 객체를 (여기선 변수 result)를 구독</strong> 하여 데이터의 변경사항에 대한 알림을 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding<span class=\"token operator\">:</span> ActivityMainBinding\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token operator\">:</span> MainViewModel\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        binding <span class=\"token operator\">=</span> ActivityMainBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n        viewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>MainViewModel<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 데이터 관찰을 위한 옵저버 설정</span>\n        <span class=\"token keyword\">val</span> resultObserver <span class=\"token operator\">=</span> Observer<span class=\"token operator\">&lt;</span>Float<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">-></span>\n            binding<span class=\"token punctuation\">.</span>resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// viewModel를 Observer와 연결</span>\n        viewModel<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultObserver<span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            convertButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dollarText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span>dollarText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    resultText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"No Value\"</span></span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">LiveData</code>를 사용하여 실시간으로 데이터의 변경을 감지하도록 개선해 보았다. 다음에는 <code class=\"language-text\">DataBinding</code>을 <code class=\"language-text\">LiveData</code>와 같이 사용해보면서 <code class=\"language-text\">DataBinding</code>을 알아보도록 하겠다.</p>\n<blockquote>\n<p>📍<a href=\"https://ppeper.github.io/android/android-databinding/\">DataBinding + LiveData 적용하기</a></p>\n</blockquote>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/livedata?hl=ko\">안드로이드 LiveData 개요</a></li>\n<li><a href=\"https://comoi.io/300\">LiveData 와 MutableLiveData</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기","date":"January 31, 2022","update":"January 31, 2022","tags":["Android","LiveData","ACC"],"series":"Android"},"fields":{"slug":"/livedata/","readingTime":{"minutes":8.835}}},"seriesList":{"edges":[{"node":{"id":"6925146a-2b07-5bc9-9607-184a4e3c68c3","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"a565c6a3-fcce-5c9a-ad4d-02af13741cf5","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"468a8f79-4ea8-5898-b283-757c8e875153","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"bb6db639-8e2b-5530-be8b-949a8b1760be","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"36ff293e-dde0-550d-aeb8-ec537b790e20","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"797d9ee9-2c11-55bc-b727-4ae592506f62","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"f324f418-379e-5586-bd19-dea6cc747952","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"1668e5f7-7335-5076-9f55-1bec5c8e40be","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"0b7da456-386b-5c28-b4a8-fefb68cdff05","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"75afba69-c4e6-5bef-ab1b-d9afad6a6115","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"b8aadf5e-7f02-5e8d-a985-a514d4d23797","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"3cb29f6c-c1ac-5e6b-806e-39b4dabde747","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"eb635b92-e487-54e6-ad67-e65845019036","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"98ef256e-b69d-550a-9092-ccea70762e3f","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"c555e79d-0c6c-55f6-bbe3-540d4870fbaa","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"120e4269-fab9-56d3-a8c3-4eb27ff99dbc","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"a23c3328-e672-5cda-b982-a2a0b412559e","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"97bedaf5-babf-55d6-9af8-caf47bb169b6","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"bb9a7240-98d9-538d-9224-6d110a0f0358","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"bf6ff02b-6b19-5062-a565-0d3f1955be42","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"8c9cfe55-c118-5907-b606-febd84308e2f","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"1f43678a-5010-5917-beb2-ad59b1882a3b","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"afd2b0e2-6cb5-5753-b370-ae59b99bcd30","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"4f0c8d12-3fbe-52d0-95da-58b34e9359fb","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"df647556-1bf0-55cc-af42-57acb7206e5f","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"9e5d89dd-6d3c-5442-bf07-3b6dbf2b3bb1","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"6412e19a-99a7-5938-90d1-7296a34757b2","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"c4fb68dc-0882-5bc8-8cf8-1e4bcb82d690","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"d5df013b-8ddd-5c33-ab15-38ddacceb71e","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"c3641eee-48c5-5870-a5d1-26d1401311e7","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"f0a71dbc-6c77-52e0-a749-cc19dbc1b8b3","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"ffdd7d7b-34ae-58f8-87f8-7c6c6513ddf5","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"38730b0e-28e4-544e-a8db-aad5668516cc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f3301d6b-63a2-5b07-b6cb-473f6ec13c7e","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a3a56595-ff49-5d63-b85a-4db183a541b5","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"b7fcd3ce-4e92-52fe-ba70-ada12c9ac982","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"57cc52b2-25b0-56fa-92d8-91e55927e81b","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"24c2c48e-3290-5d58-b125-033c68f50682","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"1da187ef-bc7f-5929-b60f-7ddda78148d4","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"a6e75dd2-49dc-5b27-9a47-308a25586348","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}}]},"previous":{"fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}},"next":{"fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},"pageContext":{"id":"664bce30-45ec-5072-80a9-787c6e62e8a1","series":"Android","previousPostId":"eb635b92-e487-54e6-ad67-e65845019036","nextPostId":"98ef256e-b69d-550a-9092-ccea70762e3f"}},"staticQueryHashes":[],"slicesMap":{}}