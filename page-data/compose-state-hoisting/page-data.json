{"componentChunkName":"component---src-templates-post-jsx","path":"/compose-state-hoisting/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","excerpt":"Stateful vs Stateless Compose에서는 의 상태를 트리거하여 리컴포지션을 통해 화면을 갱신한다. 여기서 remember와 mutableStateOf를 써서 객체를 저장하는 컴포저블은 내부 상태를 생성해서 컴포저블을 Stateful 로 만든다. Stateless Composable은 상태를 가지지 않는 컴포저블 이다. Stateless가…","html":"<img src='https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/3ee7a814-cc90-42ba-9411-6a20ff29c970'>\n<h1 id=\"Stateful-vs-Stateless\" style=\"position:relative;\"><a href=\"#Stateful-vs-Stateless\" aria-label=\"Stateful vs Stateless permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Stateful vs Stateless</h1>\n<p>Compose에서는 <code class=\"language-text\">State</code>의 상태를 트리거하여 리컴포지션을 통해 화면을 갱신한다. 여기서 remember와 mutableStateOf를 써서 객체를 저장하는 컴포저블은 <strong>내부 상태를 생성해서 컴포저블을 Stateful</strong> 로 만든다.</p>\n<p><strong>Stateless Composable은 상태를 가지지 않는 컴포저블</strong> 이다. Stateless가 되기위한 쉬운 방법으로는 <code class=\"language-text\">상태 호이스팅</code>을 사용하는 것이다. 즉 상태를 상위 컴포넌트로 이동하여 내부적으로 상태를 가지지 않는 것이다. 상태 호이스팅을 이용하면 불필요한 상태가 중복되는것을 막을 수 있고, 버그 발생도 방지가 가능하다.</p>\n<p>하지만 Caller가 컴포저블 함수의 상태를 알 필요가 없을 때는 상태 호이스팅 할 필요가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">ChatBubble</span><span class=\"token punctuation\">(</span>\n    message<span class=\"token operator\">:</span> Message\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> showDetails <span class=\"token keyword\">by</span> rememberSaveable <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// Define the UI element expanded state</span>\n\n    <span class=\"token function\">ClickableText</span><span class=\"token punctuation\">(</span>\n        text <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n        onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> showDetails <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>showDetails <span class=\"token punctuation\">}</span> <span class=\"token comment\">// Apply simple UI logic</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>showDetails<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 <code class=\"language-text\">showDetails</code>는 해당 컴포저블 UI 요소의 내부 상태이다. 이 변수는 이 컴포저블에서만 읽고 수정이 되기 때문에 이러한 경우에는 상태를 호이스팅해도 별 다른 이득이 없기 때문에 내부에 유지할 수 있다.</p>\n<h2 id=\"상태-호이스팅\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"상태 호이스팅 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>상태 호이스팅</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Preview</span>\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">ButtonEx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count <span class=\"token keyword\">by</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>\n        onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        contentPadding <span class=\"token operator\">=</span> <span class=\"token function\">PaddingValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Count: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">count</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src='https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/199a8c1b-ff11-444c-bd31-73f86fc49517' width='30%'>\n<p>버튼을 클릭하면 count값이 증가하여 Button에 보여주는 컴포저블 함수가 있다. 이 함수는 내부적으로 count를 가지고 있어 Stateful하게 되어있다.</p>\n<p>상태를 끌어올리기 위해서는 상태를 두 변수로 나누는 방식으로 끌어올리게 된다.</p>\n<ul>\n<li><strong>value: T</strong> (값)</li>\n<li><strong>onValueChange: (T) -> Unit</strong> (변경하도록 요청하는 함수)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">ButtonEx</span><span class=\"token punctuation\">(</span>\n    count<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    onValueChange<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>\n        onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">onValueChange</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        contentPadding <span class=\"token operator\">=</span> <span class=\"token function\">PaddingValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Count: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">count</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Preview</span>\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">ButtonStateless</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count <span class=\"token keyword\">by</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">ButtonEx</span><span class=\"token punctuation\">(</span>\n        count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">,</span>\n        onValueChange <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count <span class=\"token operator\">=</span> it <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 마지막 매개변수에 들어간 함수는 람다로 가능</span>\n    <span class=\"token function\">ButtonEx</span><span class=\"token punctuation\">(</span>\n        count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        count <span class=\"token operator\">=</span> it <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p align='center'><img src='https://github.com/ppeper/Kotlin_Algorithm/assets/63226023/03de1614-ea05-4198-b2c3-e327ba10c9b8' width='70%'></p>\n<p>위에서 내부에 있던 상태를 외부로 이동하고 ButtonEx 컴포저블 함수에서는 이벤트와 값만을 받아 Stateless하게 바뀐 것을 볼 수 있다.</p>\n<hr>\n<h1 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>References</h1>\n<ul>\n<li><a href=\"https://developer.android.com/jetpack/compose/state-hoisting?hl=ko\">상태를 호이스팅할 대상 위치</a></li>\n</ul>","frontmatter":{"title":"안드로이드 Compose 상태 호이스팅","date":"August 23, 2023","update":"August 23, 2023","tags":["Android","Compose","State Hoisting"],"series":"Android"},"fields":{"slug":"/compose-state-hoisting/","readingTime":{"minutes":3.27}}},"seriesList":{"edges":[{"node":{"id":"8da53698-7fbf-50de-b57d-674258641696","fields":{"slug":"/android-start/"},"frontmatter":{"title":"첫 안드로이드 개발에 대한 회고"}}},{"node":{"id":"32630555-7ffc-5c77-8e93-41b9441313c7","fields":{"slug":"/lifecycle/"},"frontmatter":{"title":"안드로이드 Lifecycle 제대로 알기"}}},{"node":{"id":"02cd12ae-6f40-58aa-be67-edbe6836235b","fields":{"slug":"/fragment/"},"frontmatter":{"title":"안드로이드 Fragment 사용"}}},{"node":{"id":"351d6f88-b8e1-5a92-8ab2-5a18f816e5f2","fields":{"slug":"/intent/"},"frontmatter":{"title":"안드로이드 인텐트의 개념"}}},{"node":{"id":"584879b5-e89c-570d-9728-e24e7543a406","fields":{"slug":"/android-context/"},"frontmatter":{"title":"안드로이드 Context의 개념"}}},{"node":{"id":"e77807c0-3767-530f-a643-b3c28eead54b","fields":{"slug":"/recyclerview/"},"frontmatter":{"title":"안드로이드 4대 컴포넌트란"}}},{"node":{"id":"7b7ee01b-c911-5343-9957-c4ef27024778","fields":{"slug":"/broadcast/"},"frontmatter":{"title":"안드로이드 브로드캐스트(Broadcast)"}}},{"node":{"id":"df99c5d4-e349-5463-9a5f-c65c2c714a98","fields":{"slug":"/android-service/"},"frontmatter":{"title":"안드로이드 서비스(Service) 개요"}}},{"node":{"id":"c1750e54-c129-5248-b9a4-dc6ead87c256","fields":{"slug":"/pendingintent/"},"frontmatter":{"title":"안드로이드 PendingIntent의 개념"}}},{"node":{"id":"915c5a43-52f4-5d96-9e4b-5dccace98788","fields":{"slug":"/notification/"},"frontmatter":{"title":"안드로이드 알림(Notification) 만들기"}}},{"node":{"id":"ba69adf2-5458-521e-b6eb-85bbad0e6385","fields":{"slug":"/android-jetpack/"},"frontmatter":{"title":"안드로이드 Jetpack에 대해"}}},{"node":{"id":"cc73ab05-b427-563d-82a2-220a8c3fedb6","fields":{"slug":"/android-acc/"},"frontmatter":{"title":"안드로이드 MVVM 패턴과 ACC 알아보기"}}},{"node":{"id":"832ca7b8-20af-5b55-9b16-2610187c24ae","fields":{"slug":"/viewmodel/"},"frontmatter":{"title":"안드로이드 Jetpack의 ViewModel 사용해보기"}}},{"node":{"id":"da0c8a2b-e2de-5ed4-b99f-fdcbcc59ee14","fields":{"slug":"/livedata/"},"frontmatter":{"title":"안드로이드 Jetpack의 LiveData 적용하기"}}},{"node":{"id":"379be128-999b-5d4c-b690-3f2552a189f3","fields":{"slug":"/databinding/"},"frontmatter":{"title":"안드로이드 DataBinding + LiveData 적용하기"}}},{"node":{"id":"f004c3a4-f9d8-509d-ab8f-7ae273cc1f6f","fields":{"slug":"/coroutine/"},"frontmatter":{"title":"안드로이드 코루틴의 기초 알아보기"}}},{"node":{"id":"03b60894-ee1f-5d06-94b7-a41567772d61","fields":{"slug":"/room-database/"},"frontmatter":{"title":"안드로이드 Room 사용하면서 알아보기"}}},{"node":{"id":"7a30a0fa-f5f4-5b2a-9e51-03568d97de6d","fields":{"slug":"/android-dagger2/"},"frontmatter":{"title":"안드로이드 Dagger2 맛보기"}}},{"node":{"id":"793dad13-2ba5-5df0-957c-4763d3df25a2","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"title":"안드로이드 Dagger2 좀 더 알아가기"}}},{"node":{"id":"e7e7c2d3-ace1-53dc-bd3b-ee4e96ad9b6c","fields":{"slug":"/android-hilt/"},"frontmatter":{"title":"안드로이드 Hilt에 대해 알아보기"}}},{"node":{"id":"fcc174d6-e820-5bfb-8407-5db69e9cff26","fields":{"slug":"/repository-pattern/"},"frontmatter":{"title":"안드로이드 Repository 패턴은 무엇인가"}}},{"node":{"id":"e7993b01-d5c9-5d7b-ac89-de6c6db8a927","fields":{"slug":"/datastore/"},"frontmatter":{"title":"새로운 동료 DataStore 알아보기"}}},{"node":{"id":"9ca4a2fd-2662-5c91-99af-5ddf44fc5fd4","fields":{"slug":"/android-diffutil/"},"frontmatter":{"title":"안드로이드 RecyclerView의 DiffUtil 알아보기"}}},{"node":{"id":"2af94fb4-d2f5-5af1-9f2a-cd678174506d","fields":{"slug":"/viewpager2/"},"frontmatter":{"title":"안드로이드 ViewPager2 사용기"}}},{"node":{"id":"55676805-c6d4-5a07-af82-a6a5239d2384","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"title":"안드로이드 runOnUiThread?"}}},{"node":{"id":"4135a47f-c10c-5535-8b71-3add3f62dd6c","fields":{"slug":"/android-launcher/"},"frontmatter":{"title":"안드로이드에서 Launcher를 통한 결과 전달"}}},{"node":{"id":"3f56723e-63f6-5dd9-b2e2-fe403e99c18b","fields":{"slug":"/android-menu/"},"frontmatter":{"title":"안드로이드 다양한 Menu들 사용하기"}}},{"node":{"id":"e8c7ca90-23b4-5683-a655-90460391cf01","fields":{"slug":"/android-permission/"},"frontmatter":{"title":"안드로이드 Permission 가져오기"}}},{"node":{"id":"b600df71-260c-567f-8ccf-592f16304768","fields":{"slug":"/android-sqlite/"},"frontmatter":{"title":"안드로이드 내부 데이터 저장 SQLite"}}},{"node":{"id":"ad7d73e5-a4b6-5f44-bd0f-867cb4d2e8ae","fields":{"slug":"/android-local-service/"},"frontmatter":{"title":"안드로이드 Local Service 알아보기"}}},{"node":{"id":"e3a294b0-afed-5673-8a7a-0affb6d3dcdc","fields":{"slug":"/android-fragment/"},"frontmatter":{"title":"안드로이드 Fragment 조각내기"}}},{"node":{"id":"52277946-9258-55cd-9361-7b6cd2c26cf6","fields":{"slug":"/livedata-transform/"},"frontmatter":{"title":"안드로이드 MediatorLiveData와 Transformations"}}},{"node":{"id":"26ead8cc-53e7-5fca-8930-d6762ae10124","fields":{"slug":"/android-navigation/"},"frontmatter":{"title":"안드로이드 Navigation 사용하기"}}},{"node":{"id":"abbe933c-9872-5d48-8ef7-04d14e785ccc","fields":{"slug":"/compose-start/"},"frontmatter":{"title":"안드로이드 Compose 알아보기"}}},{"node":{"id":"f2966618-c744-5fb8-b785-3650ebae1072","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}}},{"node":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"title":"안드로이드 Compose 상태 호이스팅"}}},{"node":{"id":"bbef1829-8d9e-589f-b1c8-22945fc1bd11","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},{"node":{"id":"75dc9cf5-f813-58b3-b426-c9125325ea76","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"title":"안드로이드 Version Catalog 도입하기"}}},{"node":{"id":"1eaf8bbe-518b-5a56-bd4d-230253d4a1db","fields":{"slug":"/android-webview/"},"frontmatter":{"title":"안드로이드 WebView로 웹과 놀기"}}},{"node":{"id":"bae61635-412c-5e43-8a7b-1eafe2722928","fields":{"slug":"/compose-theme/"},"frontmatter":{"title":"Compose 나만의 Custom Theme 설정하기"}}},{"node":{"id":"28df186b-d648-5562-a726-a8c7350b5a01","fields":{"slug":"/compose-bezier/"},"frontmatter":{"title":"Compose에서 Bezier 곡선으로 스쿼클 만들기"}}},{"node":{"id":"eb0bbfb7-fa8e-53da-b0ad-3b250756090e","fields":{"slug":"/multipart/"},"frontmatter":{"title":"Ktor와 Multipart로 파일 업로드 근데 이제 Ktrofit을 곁들인"}}},{"node":{"id":"c4e9fd73-d14b-5068-9741-133bd0ab6738","fields":{"slug":"/android-scope-storage/"},"frontmatter":{"title":"안드로이드 Scope Storage 사용하기"}}},{"node":{"id":"86411f6e-6586-595e-913b-476b89495496","fields":{"slug":"/proguard/"},"frontmatter":{"title":"안드로이드 Proguard 사용하여 빌드 하기"}}}]},"previous":{"fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"title":"안드로이드 Compose 수명 주기"}},"next":{"fields":{"slug":"/compose-side-effect/"},"frontmatter":{"title":"안드로이드 Side Effect란?"}}},"pageContext":{"id":"a2f497d1-88e4-5dee-b9ef-43228c17b4c3","series":"Android","previousPostId":"f2966618-c744-5fb8-b785-3650ebae1072","nextPostId":"bbef1829-8d9e-589f-b1c8-22945fc1bd11"}},"staticQueryHashes":[],"slicesMap":{}}