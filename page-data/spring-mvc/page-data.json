{"componentChunkName":"component---src-templates-post-jsx","path":"/spring-mvc/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"markdownRemark":{"id":"1615c639-0404-59d5-abca-da166e43bd79","excerpt":"Model-View-Controller (MVC) MVVM과 MVC의 패턴의 차이를 알아보면서 간단히 보았던 MVC 아키텍처 패턴은 애플리케이션의 확장을 위해 세가지 영역(Model, View, Controller)으로 분리 한 것으로 이러한 Model 2(Web MVC) 아키텍처 패턴은 화면과 비지니스 로직을 분리해서 작업하기 때문에 확장성이 뛰어나고,…","html":"<h1>Model-View-Controller (MVC)</h1>\n<p><a href=\"https://ppeper.github.io/android/android-acc/#-mvc-vs-mvvm\">MVVM과 MVC의 패턴의 차이</a>를 알아보면서 간단히 보았던 MVC 아키텍처 패턴은 애플리케이션의 확장을 위해 세가지 영역(Model, View, Controller)으로 분리 한 것으로 이러한 Model 2(Web MVC) 아키텍처 패턴은 화면과 비지니스 로직을 분리해서 작업하기 때문에 <strong>확장성이 뛰어나고</strong>, 표준화된 코드를 사용하여 공동작업이 용이하고 <strong>유지보수성이 좋다.</strong></p>\n<h1>스프링 MVC</h1>\n<p>스프링 프레임워크는 자바 언어 기반의 프레임워크 이지만 이중 <strong>웹 애플리케이션을 개발</strong> 할 때 사용할 수 있는 Servlet 기반의 WEB 개발을 위한 MVC 프레임워크를 제공하여  Model2 Architecture, Front Controller Pattern을 프레임워크 차원에서 제공한다. 스프링 MVC 프레임워크는 스프링을 기반으로 하여 스프링에서 제공하는 DI나 AOP 기능들과 함께 웹 MVC 개발하기 용이하게 해준다.</p>\n<h5>스프링 MVC 구조</h5>\n<img src=\"https://user-images.githubusercontent.com/63226023/220362426-46d6197a-2eeb-4dbc-8be9-cd61c5c0980f.png\">\n<h5>요청 순서</h5>\n<ol>\n<li>클라이언트가 HTTP 요청을 서버에 보내면 DispatcherServlet이 요청을 받는다.</li>\n<li>HandlerMapping이 클라이언트가 요청한 URL과 매핑된 Controller를 찾는다.</li>\n<li>해당 Controller가 요청을 처리하고 Model을 반환한다.</li>\n<li>ViewResolver가 Controller에서 반환한 논리적인 View 이름을 물리적인 View 파일 경로로 변환한다.</li>\n<li>View가 생성되고 처리되면 DispatcherServlet은 처리된 응답을 클라이언트에 보낸다.</li>\n</ol>\n<h2>구성 요소</h2>\n<ul>\n<li>\n<h5>DispatcherServlet (Front Controller)</h5>\n- 모든 클라이언트의 요청을 전달 받는다.\n- Controller에게 클라이언트 요청을 전달하고, Controller가 리턴한 결과값을 View에게 전달하여 알맞은 응답을 생성한다.\n</li>\n<li>\n<h5>HandlerMapping</h5>\n- 클라이언트의 요청 URL을 어떤 Controller가 처리할지를 결정한다.\n- URL과 요청 정보를 기준으로 어떤 핸들러 객체를 사용할지 결정하는 객체이며, DispatcherServlet은 하나 이상의 핸들러 매핑을 가질 수 있다.\n</li>\n<li>\n<h5>Controller</h5>\n- 클라이언트의 요청을 처리한 뒤, Model을 호출한 후 그 결과를 DispatcherServlet에 반환한다.\n</li>\n<li>\n<h5>ModelAndView</h5>\n- Controller가 처리한 데이터 및 화면에 대한 정보를 보유한 객체이다.\n</li>\n<li>\n<h5>ViewResolver</h5>\n- Controller가 반환한 이름을 기반으로 Controller의 처리 결과를 보여줄 View를 결정한다.\n</li>\n<li>\n<h5>View</h5>\n- Controller의 처리결과를 보여줄 화면을 생성한다.\n</li>\n</ul>\n<hr>\n<h1>스프링 Web MVC 구현</h1>\n<ul>\n<li>\n<p>스프링 MVC를 이용한 Application 구현의 순서는 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">web.xml</code> 에 DispatcherServlet과 스프링 설정파일을 등록한다.</li>\n<li>설정 파일에 HandlerMapping을 설정한다.</li>\n<li>Controller 구현 및 <code class=\"language-text\">servlet-context.xml</code>에 등록한다.</li>\n<li>Controller와 View(JSP)의 연결을 위해 <code class=\"language-text\">View Resolver</code>를 설정해 준다.</li>\n<li>클라이언트가 볼 View(JSP) 코드를 작성한다.</li>\n</ul>\n</li>\n</ul>\n<h2>스프링 MVC 프로젝트 생성해보기</h2>\n<p>스프링 STS를 통하여 <code class=\"language-text\">Spring Legacy Project</code> 의 템플릿에 있는 <code class=\"language-text\">Spring MVC Project</code>를 생성하면 다음과 같은 프로젝트 구조를 볼 수 있다. </p>\n<img src=\"https://user-images.githubusercontent.com/63226023/220368311-15d90709-6e23-4dd2-a51d-7d0dd8469bb9.png\">\n<h2>web.xml</h2>\n<p>기본적인 <code class=\"language-text\">web.xml</code> 파일의 전체 구성은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- 스프링에서 사용할 객체(빈)들을 등록한 최상위 xml --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-param</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>/WEB-INF/spring/root-context.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-param</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.context.ContextLoaderListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- 서블릿의 이름을 appServlet으로 지정하고 DispatcherServlet 로 정의한다--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>appServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- 위의 DispatcherServlet이 알아야하는 환경설정들이 있는 servlet-context.xml의 위치를 알려준다. --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>/WEB-INF/spring/appServlet/servlet-context.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token comment\">&lt;!-- / 로 들어오는 요청은 appServlet 라는 이름의 servlet 이 처리한다 -> 위에서의 DispatcherServlet--></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>appServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>Root Context</h3>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 스프링에서 사용할 객체(빈)들을 등록한 최상위 xml --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-param</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>/WEB-INF/spring/root-context.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-param</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.context.ContextLoaderListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>먼저 Context 파일들을 로드하기 위해 ContextLoaderListener를 설정한다. 리스너가 설정이 되면 해당하는 <code class=\"language-text\">&lt;context-param></code>으로 표현된 <code class=\"language-text\">/WEB-INF/spring/root-context.xml</code> 파일을 읽어서 공통적으로 사용되는 최상위 Context를 생성한다.</p>\n<p>이외에 다른 Context 파일들을 최상위 애플리케이션 Context로 로드하기 위해서는 <code class=\"language-text\">&lt;param-value></code> 태그 안에 추가하면 된다.</p>\n<h3>DispatcherServlet</h3>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 서블릿의 이름을 appServlet으로 지정하고 DispatcherServlet 로 정의한다--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>appServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 위의 DispatcherServlet이 알아야하는 환경설정들이 있는 servlet-context.xml의 위치를 알려준다. --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>/WEB-INF/spring/appServlet/servlet-context.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- / 로 들어오는 요청은 appServlet 라는 이름의 servlet 이 처리한다 -> 위에서의 DispatcherServlet--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>appServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이후에는 <code class=\"language-text\">DispatcherServlet</code>을 설정을 해주어야 한다. <code class=\"language-text\">&lt;init-param></code> 을 성정 하지 않으면 기본적으로 <code class=\"language-text\">&lt;servlet-name>-servlet.xml</code> 파일에서 ApplicationContext의 정보를 로드하게 된다.</p>\n<p>스프링 컨테이너는 설정파일의 내용을 읽고 ApplicationContext 객체를 생성하게 된다. Servlet이므로 1개 이상의 DispatcherServlet을 설정이 가능하고, <code class=\"language-text\">&lt;url-pattern></code> 에서 <code class=\"language-text\">/</code>로 설정하여 <strong>/book</strong>, <strong>/list</strong> 와 같은 요청이 들어오면 <strong>appServlet</strong> 이 요청을 처리하게 된다.</p>\n<h3>servlet-context.xml</h3>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">beans:</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/mvc<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>beans</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd\n\t\thttp://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token comment\">&lt;!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure --></span>\n\t\n\t<span class=\"token comment\">&lt;!-- Enables the Spring MVC @Controller programming model --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>annotation-driven</span> <span class=\"token punctuation\">/></span></span>\n\n\t<span class=\"token comment\">&lt;!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span> <span class=\"token attr-name\">mapping</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/resources/**<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/resources/<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n\t<span class=\"token comment\">&lt;!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">beans:</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">beans:</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/views/<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">beans:</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.jsp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">beans:</span>bean</span><span class=\"token punctuation\">></span></span>\n\t\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">beans:</span>beans</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">servlet-context.xml</code> 파일을 보게되면 <code class=\"language-text\">ViewResolver</code> 가 설정되어 있는 것을 볼 수 있다. 이로 인하여 ViewResolver에게  문자열 <strong>\"book\"</strong> 이 전달 된다고 가정하면 prefix의 경로 <code class=\"language-text\">/WEB-INF/views/</code>를 앞에 더하고 suffix <code class=\"language-text\">.jsp</code> 를 통하여 <strong>/WEB-INF/views/book.jsp</strong> 파일을 보여 주게 된다.</p>\n<p class=\"notice--info\">📍따라서 이 경로에 해당하는 파일이 있는지 확인해야한다</p>\n<h2>root-servlet vs servlet-context</h2>\n<p>설정파일을 보게되면 root-servlet과 servlet-context 두곳에서 빈에 대한 설정을 하는 것을 볼 수 있다. </p>\n<p>여기서 <strong>ApplicationContext는 ContextLoaderListener 클래스</strong> 에 의해 만들어지고, <strong>WebApplicationContext는 DispatcherServlet 클래스</strong> 에 의해 만들어 진다. 해당 Context들의 관계는 다음과 같다.</p>\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/63226023/220616153-acc474b3-2554-466a-a725-2c2e37ba2488.png\" width=\"50%\"></p>\n<blockquote>\n<p><strong>ApplicationContext</strong></p>\n<ul>\n<li>최상위 컨텍스트로 <code class=\"language-text\">root-context</code>에서 등록되는 빈들은 모든 컨텍스트에서 사용이 가능하다. (공유 가능)</li>\n<li>따라서 서로 다른 서블릿 컨텍스트에서 공유해야 하는 빈들을 등록해 놓고 사용이 가능하다.</li>\n<li><strong>servlet-context 내 빈들은 사용이 불가능하다.</strong></li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>WebApplicationContext</strong></p>\n<ul>\n<li>servlet-context에 등록되는 빈들은 해당 컨텍스트에서만 사용이 가능하다.</li>\n<li>DispatcherServlet이 직접 사용하는 Controller를 포함한 웹 관련 빈들을 등록하는 데 사용한다.</li>\n<li><strong>root-context 내 빈들을 사용이 가능하다.</strong></li>\n</ul>\n</blockquote>\n<hr>\n<h1>@Controller</h1>\n<p>클래스파일 내에 <code class=\"language-text\">@Controller</code> 어노테이션이 적용된 클래스는 클라이언트의 요청을 처리한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span> locale<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello Spring\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"home\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@Controller</code> 어노테이션은 스프링에서 관리해야할 빈 객체인 것을 알아야한다. 빈을 등록하기 위해서는 빈을 설정하는 방법과 자동 스캔을 통한 방법이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- servlet-context.xml --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">beans:</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myController<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.spring.mvc.controller.HomeController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- property에 서비스등을 사용하고 있다면 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">beans:</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MyService<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">beans:</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 자동 스캔을 통하여 해당 패키지 아래에 있는 component들을 모두 등록한다.--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.spring.mvc<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>위에서의 간단한 예시를 보게되면 RequestMapping의 <code class=\"language-text\">/test</code> 로 GET 요청이 들어오면 view에서 사용할 model에 <code class=\"language-text\">\"hello\"</code>의 이름에 <strong>Hello Spring</strong> 문자열이 담겨 <code class=\"language-text\">home</code> 이라는 이름의 View를 반환한다.</p>\n<p><code class=\"language-text\">home</code>은 위에서 보았던 <strong>ViewResolver</strong> 가 경로에 맞는 <strong>home.jsp</strong> 파일을 찾아 보여주게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsp\"><pre class=\"language-jsp\"><code class=\"language-jsp\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Home&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt; Message: ${hello}. &lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<img src=\"https://user-images.githubusercontent.com/63226023/220625753-87adb565-52a7-4f9b-ac39-0fa903dc7958.png\">\n<h2>@RequestMapping</h2>\n<p>클래스타입과 메소드에 설정이 가능하며 <strong>요청 URL mapping 정보를 설정할 때 사용</strong> 할 수 있으며 HTTP 메소드에 따라 서로 다른 메소드를 mapping 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span></code></pre></div>\n<blockquote>\n<p>이외에도 컨트롤러 메소드 parameter로 다양한 Object를 받을 수 있다.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Parameter Type</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HttpServletRequest<br>HttpServletResponse<br>HttpSession</td>\n<td>필요시 Servlet API를 사용할 수 있다.</td>\n</tr>\n<tr>\n<td>@PathVariable</td>\n<td>URI 템플릿 변수에 접근 할 때 사용한다.</td>\n</tr>\n<tr>\n<td>@RequestParam</td>\n<td>HTTP 요청 파라미터를 매핑한다.</td>\n</tr>\n<tr>\n<td>@RequestHeader</td>\n<td>HTTP 요청 헤더를 매핑한다.</td>\n</tr>\n<tr>\n<td>@CookieValue</td>\n<td>HTTP 쿠키를 매핑한다.</td>\n</tr>\n<tr>\n<td>@RequestBody</td>\n<td>HTTP 요청의 body 내용에 접근할 때 사용한다.</td>\n</tr>\n<tr>\n<td>Map, Model, ModelMap</td>\n<td>View에 전달한 model data를 설정할 때 사용 (예시에선 Model 사용)</td>\n</tr>\n<tr>\n<td>DTO</td>\n<td>HTTP 요청 parameter를 저장한 객체이다.<br>기본적으론 클래스 이름을 모델명으로 사용한다.<br>@ModelAttribute 설정으로 모델명을 설정할 수 있다.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>반환하는 타입또한 다양하게 줄 수 있다.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Return Type</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ModelAndView</td>\n<td>Model 정보 및 View 정보를 담고 있는 ModelAndView 객체이다.</td>\n</tr>\n<tr>\n<td>Model, Map</td>\n<td>View에 전달할 객체 정보를 담고 있는 Model/Map 객체이다.<br>이때 View 이름은 요청 URL로부터 결정된다.(RequestToViewNameTranslator)</td>\n</tr>\n<tr>\n<td>String</td>\n<td>View의 이름을 반환한다.</td>\n</tr>\n<tr>\n<td>void</td>\n<td>Method가 ServletResponse나 HttpServletResponse 타입의 parameter를 갖는 경우 method가 직접 응답을 처리한다고 가정한다. 그렇지 않을 경우 요청 URL로부터 결정된 View를 보여준다.<br>(RequestToViewNameTranslator)</td>\n</tr>\n<tr>\n<td>@ResponseBody</td>\n<td>Method에서 @ResponseBody 어노테이션이 적용된 경우, 반환 객체를 HTTP 응답으로 전송한다.<br>HttpMessageConverter를 이용해서 객체를 HTTP 응답 스트림으로 변환한다.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://kingofbackend.tistory.com/78\">https://kingofbackend.tistory.com/78</a></li>\n</ul>","frontmatter":{"title":"Spring Web MVC 프레임워크 보기","date":"February 22, 2023","update":"February 22, 2023","tags":["Spring","MVC"],"series":"Spring"},"fields":{"slug":"/spring-mvc/","readingTime":{"minutes":12.38}}},"seriesList":{"edges":[{"node":{"id":"7c2a5137-3083-5999-8100-ccb108826427","fields":{"slug":"/spring-basic/"},"frontmatter":{"title":"스프링 프레임워크의 등장"}}},{"node":{"id":"3965c2e7-02fa-5e20-aaef-608db72f48bb","fields":{"slug":"/spring-ioc/"},"frontmatter":{"title":"스프링 IoC와 컨테이너 알아보기"}}},{"node":{"id":"1615c639-0404-59d5-abca-da166e43bd79","fields":{"slug":"/spring-mvc/"},"frontmatter":{"title":"Spring Web MVC 프레임워크 보기"}}},{"node":{"id":"d22dd82e-1a09-5438-a537-05a70813157e","fields":{"slug":"/springboot/"},"frontmatter":{"title":"스프링을 편하게 스프링 부트를 사용해보자"}}}]},"previous":{"fields":{"slug":"/spring-ioc/"},"frontmatter":{"title":"스프링 IoC와 컨테이너 알아보기"}},"next":{"fields":{"slug":"/springboot/"},"frontmatter":{"title":"스프링을 편하게 스프링 부트를 사용해보자"}}},"pageContext":{"id":"1615c639-0404-59d5-abca-da166e43bd79","series":"Spring","previousPostId":"3965c2e7-02fa-5e20-aaef-608db72f48bb","nextPostId":"d22dd82e-1a09-5438-a537-05a70813157e"}},"staticQueryHashes":[],"slicesMap":{}}