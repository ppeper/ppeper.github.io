{"componentChunkName":"component---src-pages-tags-jsx","path":"/tags/","result":{"data":{"site":{"siteMetadata":{"title":"ppeper🥤"}},"allMarkdownRemark":{"group":[{"fieldValue":"ACC","totalCount":4},{"fieldValue":"Algorithm","totalCount":12},{"fieldValue":"Android","totalCount":40},{"fieldValue":"BFS","totalCount":1},{"fieldValue":"Blog","totalCount":4},{"fieldValue":"Broadcast","totalCount":1},{"fieldValue":"CS","totalCount":1},{"fieldValue":"Canvas","totalCount":1},{"fieldValue":"Component","totalCount":1},{"fieldValue":"Compose","totalCount":6},{"fieldValue":"Context","totalCount":1},{"fieldValue":"Coroutine","totalCount":1},{"fieldValue":"Coroutines","totalCount":1},{"fieldValue":"DFS","totalCount":1},{"fieldValue":"DI","totalCount":1},{"fieldValue":"DP","totalCount":1},{"fieldValue":"Dagger","totalCount":2},{"fieldValue":"DataBinding","totalCount":1},{"fieldValue":"Datastore","totalCount":1},{"fieldValue":"DiffUtil","totalCount":1},{"fieldValue":"Flow","totalCount":1},{"fieldValue":"Fragment","totalCount":2},{"fieldValue":"FragmentTransaction","totalCount":1},{"fieldValue":"Greedy","totalCount":1},{"fieldValue":"Hilt","totalCount":1},{"fieldValue":"Intent","totalCount":1},{"fieldValue":"Java","totalCount":4},{"fieldValue":"Jetpack","totalCount":1},{"fieldValue":"Kotlin","totalCount":5},{"fieldValue":"Kotlin Multiplatform","totalCount":2},{"fieldValue":"Lifecycle","totalCount":1},{"fieldValue":"LiveData","totalCount":2},{"fieldValue":"Local Data","totalCount":1},{"fieldValue":"MST","totalCount":1},{"fieldValue":"MVC","totalCount":1},{"fieldValue":"MVVM","totalCount":2},{"fieldValue":"MediatorLiveData","totalCount":2},{"fieldValue":"Menu","totalCount":1},{"fieldValue":"MyBatis","totalCount":1},{"fieldValue":"Navigation","totalCount":1},{"fieldValue":"Notification","totalCount":1},{"fieldValue":"OS","totalCount":1},{"fieldValue":"PendingIntent","totalCount":1},{"fieldValue":"Permission","totalCount":1},{"fieldValue":"RecyclerView","totalCount":1},{"fieldValue":"Repository Pattern","totalCount":1},{"fieldValue":"Retrospect","totalCount":3},{"fieldValue":"Room","totalCount":1},{"fieldValue":"SQLite","totalCount":1},{"fieldValue":"SafeArgs","totalCount":1},{"fieldValue":"Scope Function","totalCount":1},{"fieldValue":"Serizalization","totalCount":1},{"fieldValue":"Service","totalCount":2},{"fieldValue":"Servlet","totalCount":1},{"fieldValue":"Side Effect","totalCount":1},{"fieldValue":"Sort","totalCount":2},{"fieldValue":"Spring","totalCount":4},{"fieldValue":"Spring Boot","totalCount":1},{"fieldValue":"State","totalCount":1},{"fieldValue":"State Hoisting","totalCount":1},{"fieldValue":"Thread","totalCount":1},{"fieldValue":"Transformations","totalCount":1},{"fieldValue":"Version Catalog","totalCount":2},{"fieldValue":"ViewModel","totalCount":1},{"fieldValue":"ViewPager2","totalCount":1},{"fieldValue":"Webview","totalCount":1},{"fieldValue":"jetpack","totalCount":1},{"fieldValue":"programmers","totalCount":6},{"fieldValue":"registForActivityResult","totalCount":1},{"fieldValue":"runOnUiThread","totalCount":1},{"fieldValue":"공병성","totalCount":1},{"fieldValue":"그래프","totalCount":1},{"fieldValue":"다익스트라","totalCount":1},{"fieldValue":"반공병성","totalCount":1},{"fieldValue":"벨만포드","totalCount":1},{"fieldValue":"불변성","totalCount":1},{"fieldValue":"비동기","totalCount":2},{"fieldValue":"완전탐색","totalCount":1},{"fieldValue":"제네릭","totalCount":1},{"fieldValue":"크루스칼","totalCount":1},{"fieldValue":"프림","totalCount":1},{"fieldValue":"플로이드 와샬","totalCount":1}],"nodes":[{"excerpt":"사이드 프로젝트 중 스쿼클 모양을 디자인에 구현해야 하는 상황이 생겨, Compose의 Custom View를 활용하여 해당 화면을 구현하며 학습한 내용을 정리하고자 합니다. 스쿼클? 스쿼클은 정사각형과 원의 중간 형태로, 과 의 합성어이다. 위의 이미지에서 볼 수 있듯이, 일반적인 라운드 처리된 사각형과 비교하면 더 부드러운 곡률로 연결된 것을 알 수 …","fields":{"slug":"/compose-bezier/"},"frontmatter":{"date":"January 07, 2025","update":"Jan 07, 2025","title":"Compose에서 Bezier 곡선으로 스쿼클 만들기","tags":["Android","Compose","Canvas"]}},{"excerpt":"2024년을 되돌아보며 한해동안 있었던 일들을 돌아보고자 회고를 작성해보려고 합니다. File(2024).use { 📌 다사다난 했던 1년 2024년은 취업 준비에 많은 시간을 쏟았던 해로 기억됩니다. 하지만 되돌아보면, 여의도 불꽃놀이를 다녀오고, 힘든 시기를 스스로 이겨내며 성장했던 순간들이 함께 떠오릅니다. 상반기에는 졸린 눈을 비비며 면접 준비 스…","fields":{"slug":"/goodbye-2024/"},"frontmatter":{"date":"December 24, 2024","update":"Dec 24, 2024","title":"2024년 한해를 돌아보며 ","tags":["Blog","Retrospect"]}},{"excerpt":"개요 최근에 Kotlin Multiplatform을 활용하여 안드로이드 태블릿과 Desktop에서 사용할 서비스들을 개발하고 있습니다. 안드로이드에서는 화면간에 Jetpack Compose Navigation을 사용하고 있지만 현재 Android에서만 사용이 가능하여 대체할 여러 라이브러리를 찾아보던 도중 Decompose를 알게되어 한번 공유해보고자 합…","fields":{"slug":"/decompose/"},"frontmatter":{"date":"December 18, 2024","update":"Dec 18, 2024","title":"Kotlin Multiplatform - Decompose","tags":["Android","Kotlin Multiplatform"]}},{"excerpt":"안드로이드에서는 Rest Api 통신을 편리하게 해주는  ,  라이브러리를 사용을 현재까지도 많이 사용하고 있다. 최근 Kotlin Multiplatform을 사용하게 되면서 Retrofit을 사용하지 못하게 되어 말로만 듣던 Ktor를 살펴보고자 한다. Ktor? Ktor는 Kotlin으로만 작성된 경량 웹 프레임워크이다.  따라서 플랫폼에 종속적이지 …","fields":{"slug":"/ktor/"},"frontmatter":{"date":"December 04, 2024","update":"Dec 04, 2024","title":"KMP를 지원하는 Ktor Client를 사용해보자","tags":["Android","Kotlin Multiplatform"]}},{"excerpt":"안드로이드에서는 Material Design을 사용하여 컬러를 적용하여 라이트, 다크모드를 지원하는 앱을 만들 수 있게 해주고 있습니다. 하지만 Material의 지정된 테마가 한정적이고, 디자이너가 만든 색상의 네임을 사용해야 하는 경우에는 사용자 지정 테마를 만들어야 합니다. 이번에 Compose에서 사용자 지정 테마를 적용하는 방법을 하나씩 살펴보도…","fields":{"slug":"/compose-theme/"},"frontmatter":{"date":"April 26, 2024","update":"Apr 26, 2024","title":"Compose 나만의 Custom Theme 설정하기","tags":["Android","Compose"]}},{"excerpt":"서버에서 REST API를 구현하여 데이터를 다룰때는 Json 데이터 형태로 많이 다루게 된다. 안드로이드에서 서버의 데이터를 받아올때 편리하게  라이브러리를 활용하여 객체-Json 간의 Converter 작업을 하였었다. 이번에 구글 프로젝트를 보면서 새로운 직렬화/역직렬화를 다룰 수 있는 라이브러리를 보려고 한다. Kotlin의 Default Valu…","fields":{"slug":"/serialization/"},"frontmatter":{"date":"March 07, 2024","update":"Mar 07, 2024","title":"코틑린을 위한 Kotlinx Serizalization","tags":["Kotlin","Serizalization"]}},{"excerpt":"들어가며 👋🏼 2023년은 대부분 타지에서 생활을 했던 한해여서 그런지 유난히 빨리 지나간것 같다. 새로운 지역에서의 생활부터 대학교를 졸업하고 인턴경험까지 지난 2023년을 되돌아보며 회고록을 작성해보려고 한다. lateinit var 2024: 청룡의 해 2023.open() 📌 SSAFY 9th 이번 2023년은 시작부터 1월 초  9기 모바일 트랙 …","fields":{"slug":"/goodbye-2023/"},"frontmatter":{"date":"December 31, 2023","update":"Dec 31, 2023","title":"2023년 한해 회고록","tags":["Blog","Retrospect"]}},{"excerpt":"Gradle에서 최근에 많이 사용하는 버전관리는  를 통하여 하고 있다. 결국 version-catalog, BuildSrc 등은 의존성 버전, 관리에 대한 재사용성을 높여주고 멀티 모듈을 구성하게 되면 공통적으로 사용되는 코드 작성을 줄여주게 된다. 이번에 Now in Android 예시 프로젝트를 보면서 build-logic이 적용되어 있는 모듈을 한…","fields":{"slug":"/gradle-plugins/"},"frontmatter":{"date":"December 26, 2023","update":"Dec 26, 2023","title":"Gradle Convention Plugin 생성 및 적용하기","tags":["Version Catalog"]}},{"excerpt":"WebView 모바일 앱을 사용하다 보면 웹으로 리다이렉트 하거나 웹 페이지를 보여주는 화면들을 많이 볼 수 있다. 앱에서 웹페이지를 보여줄 수 있는 웹뷰를 사용하기 위해서는 안드로이드에서 WebView 를 사용하여 여러가지 옵션을 설정하고 웹 페이지와 상호작용 할 수 있다. 기본적으로 WebView를 사용하기 위해서는 안드로이드에서 Internet 퍼미…","fields":{"slug":"/android-webview/"},"frontmatter":{"date":"November 20, 2023","update":"Nov 20, 2023","title":"안드로이드 WebView로 웹과 놀기","tags":["Android","Webview"]}},{"excerpt":"안드로이드에서는 gradle 파일을 통하여 버전관리를 하고 있다. 프로젝트를 진행하면서 같은 implement를 해야하는 라이브러리들을 관리를 하지 못하여 유지보수에 좋지 못하다는 점에 있어서 공통된 파일로 관리하면 좋겠다는 생각이 들었다. 이번에 Gradle 7.0에서 추가된 가 있다는 것을 알게되어 이를 통하여 간편하게 버전관리를 하는 방법을 공부하고…","fields":{"slug":"/android-version-catalog/"},"frontmatter":{"date":"October 30, 2023","update":"Oct 30, 2023","title":"안드로이드 Version Catalog 도입하기","tags":["Android","Version Catalog"]}},{"excerpt":"Side Effect Sife Effect(부수 효과)는 컴포지블 외부에서 발생하는 앱의 상태 변경사항을 말한다. Compose에서는 Side Effect를 처리하기 위해 아래의 동작을 실행할 수 있는 를 사용할 수 있다. LaunchedEffect LaunchedEffect: 컴포저블에서 suspend fun을 실행하기 위해 사용된다. 컴포저블에서 시작…","fields":{"slug":"/compose-side-effect/"},"frontmatter":{"date":"August 25, 2023","update":"Aug 25, 2023","title":"안드로이드 Side Effect란?","tags":["Android","Compose","Side Effect"]}},{"excerpt":"Stateful vs Stateless Compose에서는 의 상태를 트리거하여 리컴포지션을 통해 화면을 갱신한다. 여기서 remember와 mutableStateOf를 써서 객체를 저장하는 컴포저블은 내부 상태를 생성해서 컴포저블을 Stateful 로 만든다. Stateless Composable은 상태를 가지지 않는 컴포저블 이다. Stateless가…","fields":{"slug":"/compose-state-hoisting/"},"frontmatter":{"date":"August 23, 2023","update":"Aug 23, 2023","title":"안드로이드 Compose 상태 호이스팅","tags":["Android","Compose","State Hoisting"]}},{"excerpt":"컴포지션(Composition) Jetpack Compose는 처음 컴포저블을 실행할때 생성되는 것으로 일종의 트리 구조로 되어 있다. 컴포지션에서 UI를 그리기 위해 호출한 한다.  컴포지션은 초기 컴포지션을 통해서만 생성 되고 리컴포지션을 통해서만 업데이트될 수 있다. 따라서 컴포지션을 수정하는 유일한 방법은 리컴포지션을 통하는 것이다. 📍 컴포저블의…","fields":{"slug":"/compose-lifecycle/"},"frontmatter":{"date":"August 22, 2023","update":"Aug 22, 2023","title":"안드로이드 Compose 수명 주기","tags":["Android","Compose","State"]}},{"excerpt":"최근에 Compose를 적용하여 프로젝트를 진행하면서 하나씩 만들어 보았는데 해당 내용들을 정리해 보려고 한다. Compose Compose는 Kotlin언어를 사용하여  방식으로 UI를 그리는 방식으로 기존의 xml의 방식과는 차이가 있다. Compose를 사용하면 아래와 같은 장점이 있다. 코드 감소 Kotlin, xml로 나눠서 개발하는 것이 아닌 …","fields":{"slug":"/compose-start/"},"frontmatter":{"date":"August 21, 2023","update":"Aug 21, 2023","title":"안드로이드 Compose 알아보기","tags":["Android","Compose"]}},{"excerpt":"SAA (Single Activity Architecture) SAA는 Google IO 2018에 소개된 개념으로 하나 혹은 적은 수의 Activity로 애플리케이션을 개발하는 것을 말한다. Fragment에 비해 상대적으로 무거운 Activity의 사용을 자제하고, Navigation 을 사용하여 한 눈에 앱의 흐름을 보여주고 유연한 화면 구성을 할 …","fields":{"slug":"/android-navigation/"},"frontmatter":{"date":"July 01, 2023","update":"Jul 01, 2023","title":"안드로이드 Navigation 사용하기","tags":["MediatorLiveData","Navigation","SafeArgs"]}},{"excerpt":"안드로이드에서 LiveData를 데이터를 저장하고 변화를 관찰 할 수 있는 객체이다.이번에는 LiveData를 조금 더 유연하게 사용하는 방법에 대해 몰랐던 내용을 알아보려고 한다. MediatorLiveData 지금까지 하나의 LiveData는 Observer 인터페이스를 구현하는 객체를 생성하여 LiveData 값이 변경될 때 호출되는  메소드를 통해…","fields":{"slug":"/livedata-transform/"},"frontmatter":{"date":"May 02, 2023","update":"May 02, 2023","title":"안드로이드 MediatorLiveData와 Transformations","tags":["MediatorLiveData","Transformations","LiveData"]}},{"excerpt":"안드로이드에서 UI 화면을 태블릿과 같은 큰 화면에서 역동적이고 유연한 디자인을 하기 위하여 Fragment가 나오게 되었다. Fragment는 Activity와 마찬가지로 자체적인 생명주기를 가지지만 Activity의 생명주기에 영향을 받기 때문에 좀 더 신경쓰고 조심해야 하는 부분들이 많다. 처음 적용하고 공부하였을 때 신경쓰지 못하였던 Fragmen…","fields":{"slug":"/android-fragment/"},"frontmatter":{"date":"April 12, 2023","update":"Apr 12, 2023","title":"안드로이드 Fragment 조각내기","tags":["Android","FragmentTransaction","Fragment"]}},{"excerpt":"안드로이드의 4대 컴포넌트중에 하나인 Service의 구성은 과거에 한번 나누어 본적이 있다.  안드로이드에서 Activity/Fragment는 많이 사용하지만 실제로 Service를 사용을 하지 않아 이번에 서비스에 대한 예시로 Local  Service 의 동작 과정을 보려고 한다. Bind Service 안드로이드에서 바운드 서비스는 와는 달리 하나…","fields":{"slug":"/android-local-service/"},"frontmatter":{"date":"April 10, 2023","update":"Apr 10, 2023","title":"안드로이드 Local Service 알아보기","tags":["Android","Service"]}},{"excerpt":"Android Permission 안드로이드에서는 특정한 앱을 실행하기 위해서는 권한이 필요하다. 안드로이드 마시멜로 버전(API 23) 이전에는 앱 설치시 모든 권한이 요청되었지만 이후에는 일반 권한, 위험 권한 으로 나눠게 되었다. 따라서 API 23 이후 버전의 기기에서는 위험 권한은 기능이 동작할 때 사용자가 직접 권한을 허락하도록 런타임에 권한을…","fields":{"slug":"/android-permission/"},"frontmatter":{"date":"March 24, 2023","update":"Mar 24, 2023","title":"안드로이드 Permission 가져오기","tags":["Android","Permission"]}},{"excerpt":"안드로이드 앱 내부에 데이터를 저장하게 되면 Jetpack 라이브러리에 있는 Room을 사용하게 된다.  처음 안드로이드 개발을 할 시 Room에 대한 학습을 통해 SQLite를 내부적으로 사용을 하고 있다는 것을 알았지만 직접적으로 SQLite를 사용해보지 않아 이번에 SQLite를 직접 사용해 보려고 한다. SQLite SQLite를 사용하면 Loca…","fields":{"slug":"/android-sqlite/"},"frontmatter":{"date":"March 24, 2023","update":"Mar 24, 2023","title":"안드로이드 내부 데이터 저장 SQLite","tags":["Android","SQLite"]}},{"excerpt":"안드로이드 Menu 안드로이드에서는 다양한 Menu들을 제공하여 편하게 옵션들을 보여줄 수 있다. 최근에는 사용자 경험이 바뀌어 Menu들을 통하여 옵션 세트들을 보여주는 방식이 변경이 되었지만 기본이 되는 Menu들의 각 차이점과 사용법을 알아 보려고 한다. 안드로이드에서 Menu는 크게 , , 로 구현할 수 있다. Menu 안드로이드에서 Menu를 X…","fields":{"slug":"/android-menu/"},"frontmatter":{"date":"March 10, 2023","update":"Mar 10, 2023","title":"안드로이드 다양한 Menu들 사용하기","tags":["Android","Menu"]}},{"excerpt":"기존의 startActivityForResult 안드로이드에서 일반적으로 Activity를 전환하기 위해서는 startActivity() 를 사용하지만 화면 전환 이후에 해당 Activity에서의 결과값을 전달 받기 위해서는 startActivityForResult() 과 onActivityResult() 를 사용 하였다. // 결과를 받는 FromAct…","fields":{"slug":"/android-launcher/"},"frontmatter":{"date":"February 27, 2023","update":"Feb 27, 2023","title":"안드로이드에서 Launcher를 통한 결과 전달","tags":["Android","registForActivityResult"]}},{"excerpt":"기존의 자바에서의 데이터베이스의 연결은 JDBC를 사용하여 Connection과 Statement를 가져와 SQL문을 전송하고 결과값을 받았었다. 이러한 코드를 통해 기존에는 JDBC의 연동과정과 자바 코드안에 SQL문이 들어가기 때문에 코드가 복잡하였다. 이에 대한 편의성을 제공해 주는 MyBatis Framework에 대해서 정리해 보려고 한다.(My…","fields":{"slug":"/mybatis/"},"frontmatter":{"date":"February 25, 2023","update":"Feb 25, 2023","title":"Spring + MyBatis 사용하기","tags":["Spring","MyBatis"]}},{"excerpt":"스프링 부트 기존의 스프링은 자바 기반의 프레임워크로 애플리케이션을 개발하려면 사전에 많은 작업(library, dependency 추가등) 을 해야 했다. 스프링 부트는 개발자들이 더욱 쉽게 스프링 애플리케이션을 개발할 수 있도록 도와준다. 스프링 부트는 스프링 프레임워크와 마찬가지로 이나 과 같은 빌드 도구를 사용하고, Tomcat, Jetty, Un…","fields":{"slug":"/springboot/"},"frontmatter":{"date":"February 25, 2023","update":"Feb 25, 2023","title":"스프링을 편하게 스프링 부트를 사용해보자","tags":["Spring Boot"]}},{"excerpt":"Model-View-Controller (MVC) MVVM과 MVC의 패턴의 차이를 알아보면서 간단히 보았던 MVC 아키텍처 패턴은 애플리케이션의 확장을 위해 세가지 영역(Model, View, Controller)으로 분리 한 것으로 이러한 Model 2(Web MVC) 아키텍처 패턴은 화면과 비지니스 로직을 분리해서 작업하기 때문에 확장성이 뛰어나고,…","fields":{"slug":"/spring-mvc/"},"frontmatter":{"date":"February 22, 2023","update":"Feb 22, 2023","title":"Spring Web MVC 프레임워크 보기","tags":["Spring","MVC"]}},{"excerpt":"IoC(제어의 역전) Dependency Injection 에서 보았던 자바에서의 객체 간의 결합도가 강하게 되면 클래스와 결합된 다른 클래스도 같이 유지보수 되어야 할 가능성이 높아지게 된다. IoC(제어의 역전)은 이름과 같이 제어하는 주체가 바뀌었다는 의미로 프로그램의 제어 흐름을 개발자가 제어권을 갖지 않고 외부에서 결정 하는 것을 말한다. 이러한…","fields":{"slug":"/spring-ioc/"},"frontmatter":{"date":"February 19, 2023","update":"Feb 19, 2023","title":"스프링 IoC와 컨테이너 알아보기","tags":["Java","Spring"]}},{"excerpt":"스프링 등장 배경 스프링 프레임워크는 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크이다. 스프링이 등장하기 이전에는 EJB (Enterprise JavaBeans) 를 포함한 J2EE(Java 2 Platform, Enterprise Edition) 기반의 애플리케이션 개발이 주류였다. 하지만 EJB의 불편한 API와 높은 부하, 복잡한 구성 등의…","fields":{"slug":"/spring-basic/"},"frontmatter":{"date":"February 18, 2023","update":"Feb 18, 2023","title":"스프링 프레임워크의 등장","tags":["Java","Spring"]}},{"excerpt":"Servlet 자바 서블릿 은 스프링 MVC 아키텍처가 나오기 전 사용하였다. \n자바 서블릿은 자바를 사용하여 웹페이지를 동적으로 생성하는 서버측 프로그램을 말한다. 자바 서블릿은 웹 서버의 성능을 향상 하기 위해 사용되는 자바 클래스의 일종으로. WAS 서버를 쉽게 구축할 수 있도록 도와준다.  즉 servlet은 정적인 리소스가 아닌 클라이언트로 부터…","fields":{"slug":"/servlet/"},"frontmatter":{"date":"February 15, 2023","update":"Feb 15, 2023","title":"Spring 이전에 자바 Servlet 알아보기","tags":["Java","Servlet"]}},{"excerpt":"다시 한번 마음을 잡고 기본을 쌓는 중에 객체 정렬에 대해서 다시 정리해 보았다. 최근 다시 공부를 하면서 내가 몰랐던 내용이나 애매했던 부분들을 잡아가면서 이번에는 객체 지향 언어에서의 클래스와 같은 객체 정렬에 대한 내용을 담아보려고 한다. 자바 Primitive 정렬 기본적으로  를 통하여 정렬이 가능하다 (기본은 오름차순이다.) Arrays.sor…","fields":{"slug":"/comparable-comparator/"},"frontmatter":{"date":"February 06, 2023","update":"Feb 06, 2023","title":"자바에서의 Comparable, Comparator 정렬","tags":["Java","Sort"]}},{"excerpt":"들어가며 2022년은 곧 졸업하는 대학생의 입장에서 정말 빠르게 지나갔던 것 같다.    한해를 빠르게 달려오다 보니 이렇게 새해가 밝았고 목표를 다짐하기 전에 블로그를 시작한 2022년도 첫 회고를 나름대로 풀어가 보려고 한다.😁 2022에는?? 2022 상반기 안드로이드 개발자 컴공 2학년때인 2020년에는 스마트폰의 애플리케이션들을 많이 사용하면서 …","fields":{"slug":"/hello-2023/"},"frontmatter":{"date":"January 02, 2023","update":"Jan 02, 2023","title":"2022 회고지만 새해가 밝은..?","tags":["Blog","Retrospect"]}},{"excerpt":"안드로이드 Thread 안드로이드에서는 Main Thread와 Sub Thread가 동시에 자원에 접근하여 생기는 동기화 이슈를 발생 할 수 있기 때문에 메인 스레드(UI 스레드) 에서만 뷰의 값을 바꿀 수 있는 싱글 스레드로 동작 한다. -> 위와 같이 멀티 스레드 환경에서 동시에 스레드가 UI를 갱신을 하여고 한다면 가 어떠한 값으로 변경될지 알 수 …","fields":{"slug":"/runOnUiThread/"},"frontmatter":{"date":"October 16, 2022","update":"Oct 16, 2022","title":"안드로이드 runOnUiThread?","tags":["Android","Thread","runOnUiThread"]}},{"excerpt":"🚀 ViewPager2 안드로이드 어플을 개발을 하다보면 RecyclerView를 통하여 데이터 목록을 보여주는 경우가 많다. 안드로이드에서 데이터의 목록이 아니라 Pager 형식의 ViewHolder를 구현하려면 를 사용을 해야한다. ViewPager와 ViewPager2 ViewPager2는 AndroidX가 발표된 이후에 새롭게 나온 ViewPage…","fields":{"slug":"/viewpager2/"},"frontmatter":{"date":"September 17, 2022","update":"Sep 17, 2022","title":"안드로이드 ViewPager2 사용기","tags":["Android","ViewPager2"]}},{"excerpt":"DiffUtil 넌 뭐니 안드로이드를 공부하거나 개발하다보면 대부분 리스트를 보여주기 위하여  의 사용을 하게되고, 리스트의 데이터가 변하게 되면  를 호출하여 리사이클러뷰를 갱신하였다. 이는 바뀐 데이터가 적더라도 간혹 를 호출하여 갱신하기도 하는데 이는 앱 성능에 굉장히 악영향 을 미치게된다. (난가..😅)  를 호출하게 되면 리스트의 모든 데이터를 …","fields":{"slug":"/android-diffutil/"},"frontmatter":{"date":"September 01, 2022","update":"Sep 01, 2022","title":"안드로이드 RecyclerView의 DiffUtil 알아보기","tags":["Android","DiffUtil","RecyclerView"]}},{"excerpt":"은 반응형 프로그래밍으로 비동기 프로그래밍을 구현하기 위하여 많이 사용이 되어 한번 학습을 해봐야 겠다는 생각이 들었다. Coroutine을 학습하는 도중 ReacticeX와 같은 기능을 할 수 있는 비동기 스트림 를 제공하고 있어 ReactiveX 이전에 먼저 Flow에 기본적인 개념에 대해 알아보려고 한다. Flow란 코루틴에서 Flow(흐름)은 단일…","fields":{"slug":"/flow/"},"frontmatter":{"date":"July 16, 2022","update":"Jul 16, 2022","title":"Kotlin Coroutines Flow 맛보기","tags":["Kotlin","Flow","Coroutines"]}},{"excerpt":"안드로이드와 코틀린을 공부 하면서 ,  키워드를 많이 봤지만 의미를 정확히 알지 못하였던 개념에 대해서 차근차근 알아가보려고 한다 😅 제네릭(Generic) 프로그래밍 언어에서는 Int, Char, String등 기본(Primitive) 데이터 타입을 지원한다. 제네릭 은 타입을 확실히 정하지 않고 동일한 코드를 사용할 수 있도록 지원해주는 유용한 기능이…","fields":{"slug":"/generic-in-out/"},"frontmatter":{"date":"June 25, 2022","update":"Jun 25, 2022","title":"Kotlin 제네릭의 in, out 키워드?","tags":["제네릭","공병성","반공병성","불변성"]}},{"excerpt":"로컬 저장 지금까지 안드로이드 로컬에 간단한 데이터를 저장하기 위해 를 사용하였다. 구글에서는 DataStore 의 사용을 적극 권장하고 있고 (SharedPreferences는 구글 공식 문서에서도 사용가이드가 사라졌다..😨) Datastore를 사용하면 어떤 좋은점들이 있어서 사용을 이렇게 권고하는 것인가? Datastore를 하나씩 알아가 보자! 🚀…","fields":{"slug":"/datastore/"},"frontmatter":{"date":"June 16, 2022","update":"Jun 16, 2022","title":"새로운 동료 DataStore 알아보기","tags":["Datastore","Local Data","jetpack"]}},{"excerpt":"🚀최단 경로 탐색 지난 시간에는 그래프와 최소 신장 트리(MST)를 구하는 알고리즘인 프림, 크루스칼 알고리즘을 알아보았다. (그래프 알고리즘이란 + 최소 신장 트리(MST)) 이번 포스팅은 그래프 최단 거리를 구하는 알고리즘에 대해서 알아보려고 한다. 📌다익스트라 다익스트라(dijkstra) 알고리즘은 그래프에서 최단 경로를 구하는 알고리즘 중 하나이다…","fields":{"slug":"/graph-sortest-path/"},"frontmatter":{"date":"May 30, 2022","update":"May 30, 2022","title":"그래프 최단거리 구하기","tags":["Algorithm","다익스트라","플로이드 와샬","벨만포드"]}},{"excerpt":"🎯그래프 정점(V)과 간선(E)로 이루어진 자료구조이다. 그래프는 사이클이 존재 할 수 있고 간선의 방향이 양뱡향일 수 있다. V개의 정점을 가지는 무방향 그래프  최대 간선 갯수 = V(V-1)/2 V개의 정점을 가지는 방향 그래프 의  최대 간선 갯수 = V(V-1) 🧷그래프의 종류 무방향 그래프: 두 정점을 연결하는 간선에 방향이 없는 그래프이다. …","fields":{"slug":"/graph-mst/"},"frontmatter":{"date":"May 20, 2022","update":"May 20, 2022","title":"그래프 알고리즘이란 + 최소 신장 트리(MST)","tags":["Algorithm","MST","그래프","크루스칼","프림"]}},{"excerpt":"Dynamic Programming(동적 프로그래밍) 동적 프로그래밍이란 주어진 문제를 부분 문제로 나누어 각 부분 문제의 답을 계산하고, 이 계산한 결과값을 이용해 원래 문제의 답을 산출 하는 방법이다. Divide And Conquer 동적 프로그래밍과 같이 큰 문제를 작은 문제로 나누는 알고리즘은 분할 정복(Divide And Conquer) 이 있…","fields":{"slug":"/dynamic-programming/"},"frontmatter":{"date":"May 13, 2022","update":"May 13, 2022","title":"알고리즘 Dynamic Programming(동적 프로그래밍) 살펴보기","tags":["Algorithm","DP"]}},{"excerpt":"최근에 알고리즘의 풀이를 에서 로 바꾸며 진행해 나가면서 알고리즘 문제 풀이에서 많이 사용되는 정렬을 하는 방법 에 대해서 알아가보려고 한다. 리스트 기본 정렬 코틀린에서 리스트의 정렬은 다음과 같이 크게 , , 의 세가지 방법이 있다. 코틀린에서는 Immutable 과 Mutable 로 나뉜다. 여기서 Immutable(데이터의 변경이 불가능)에서는 함…","fields":{"slug":"/sort/"},"frontmatter":{"date":"May 10, 2022","update":"May 10, 2022","title":"코틀린 리스트 정렬하는 방법 (sort vs sortBy vs sortWith)","tags":["Kotlin","Sort"]}},{"excerpt":"그래프에서는 와 방식으로 모든 정점을 탐색한다. 그래프는 따로 파트를 나누어 학습을 하고 이번 포스팅은 그래프의 탐색 방법의 기본이 되는 와 에 대해서 정리하려고 한다.🤔 깊이 우선 탐색(DFS, Depth-First Search) 🧷DFS는 미로에서 출구를 찾는것과 비슷하다고 볼 수 있다. 하나의 길을 갈때 쭉 진행하다가 길이 막히면 왔던길을 되돌아 가…","fields":{"slug":"/dfs-bfs/"},"frontmatter":{"date":"May 04, 2022","update":"May 04, 2022","title":"알고리즘 DFS/BFS 탐색 방법 알아보기","tags":["Algorithm","DFS","BFS"]}},{"excerpt":"그리디(탐욕) 알고리즘에서 그리디(탐욕법) 알고리즘이란 이름에서 유추해 볼 수 있듯이 현재 상황에서 가장 최선의 선택 을 하는 알고리즘을 말한다. 매 순간마다 하는 선택은 그 순간에 대해 으로는 최적이지만, 그 선택들을 계속 수집하여 최종적()인 해답을 만들었다고 해서, 그것이 최적의 해답이라는 보장은 없다.  하지만 그리디 알고리즘을 적용할수 있는 문제…","fields":{"slug":"/greedy/"},"frontmatter":{"date":"April 24, 2022","update":"Apr 24, 2022","title":"그리디 알고리즘(Greedy Algorithm)에 대해","tags":["Algorithm","Greedy"]}},{"excerpt":"Scope Function 코틀린에서는 기본적으로 \"표준 스코프 함수\" 라는것을 제공한다. 스코프 함수들을 사용하여 기존의 복잡한 코드를 단순화하고 효율적으로 만들 수 있다. 스코프 함수를 람다식으로 사용을 하게되면 일시적인 Scope(범위)가 형성 되고, 이 범위 안에서는 객체에 대해서 일일이 참조하지 않고 객체에 대한 접근 을 하여 사용할 수 있다. …","fields":{"slug":"/scope-function/"},"frontmatter":{"date":"April 20, 2022","update":"Apr 20, 2022","title":"코틀린의 Scope Function는 언제쓸까","tags":["Kotlin","Scope Function"]}},{"excerpt":"Repository 이전의 포스팅에서 안드로이드 MVVM 디자인 패턴에 대해서 알아보면서 아주 잠깐 Repository의 개념 대해서 알아보았다. 이번에 새로운 프로젝트에 Repository를 적용하면서 공부하였던 내용들을 정리해 보려고 한다. 단어의 의미보면 파악할 수 있듯이 Repository는 필요한 데이터들을 저장하고 있는 저장소라고 생각하면 된다…","fields":{"slug":"/repository-pattern/"},"frontmatter":{"date":"April 19, 2022","update":"Apr 19, 2022","title":"안드로이드 Repository 패턴은 무엇인가","tags":["Android","MVVM","Repository Pattern"]}},{"excerpt":"완전탐색이란? 완전탐색이란 가능한 모든 경우의 수 를 모두 찾는 방법이다. 이러한 방법은 무식한 한다는 의미로 'Brute Force'라고도 이름이 불린다. 완전탐색은 직관적이어서 이해하기 쉽고, 문제에 대한 결과값이 정확하게 얻을 수 있다 는 점에서 가장 확실하고 기초적인 문제 풀이 방법이다. 알고리즘 문제를 풀때에는 기본적으로 두가지를 생각하고 들어간…","fields":{"slug":"/brute-force/"},"frontmatter":{"date":"April 17, 2022","update":"Apr 17, 2022","title":"알고리즘 완전탐색(Exhaustive search)이란","tags":["Algorithm","완전탐색"]}},{"excerpt":"Hilt Hilt란 Google의 Dagger2를 기본으로 만든 의존성 주입 라이브러리이다. 따라서 Dagger2에 대한 Component, Scope를 기본적을 제공하며, 초기 프로젝트 환경 구축 비용을 크게 줄이는 것이 목적이 있다. Hilt에 대해 알아보기 전에 Dagger2를 사용하여 의존성 주입을 사용한 간단한 예시를 구성해 보면 다음과 같다. …","fields":{"slug":"/android-hilt/"},"frontmatter":{"date":"April 10, 2022","update":"Apr 10, 2022","title":"안드로이드 Hilt에 대해 알아보기","tags":["Android","Hilt"]}},{"excerpt":"Custom Application 저번 포스팅에서 Dagger의 Inject, Module, Component에 대해서 알아보고 SmartPhone 클래스에 적용시켜 보았다. 불변하는 데이터나 전역으로 사용되는 object 같은 경우 모든 Component 에 공유가 되어 사용되야 할 것이다 (ex) Room Database, SharedPreferenc…","fields":{"slug":"/android-dagger2-more/"},"frontmatter":{"date":"April 08, 2022","update":"Apr 08, 2022","title":"안드로이드 Dagger2 좀 더 알아가기","tags":["Android","Dagger"]}},{"excerpt":"Dagger Dagger는 의존성 주입(DI)을 도와주는 프레임워크이다. 의존성 주입(DI)에 대해서 전 포스팅에서 알아보았다. Dagger를 사용하여 의존성 주입을 자동화하도록 지원하여 코드 작성에 편의성을 제공한다. 전 포스팅에서 만들어 보았던 스마트폰 예시에 Dagger를 적용해 보려고 한다. 시작하기 build.gradle 프로젝트에 Dagger를…","fields":{"slug":"/android-dagger2/"},"frontmatter":{"date":"March 31, 2022","update":"Mar 31, 2022","title":"안드로이드 Dagger2 맛보기","tags":["Android","Dagger"]}},{"excerpt":"의존성 주입을 최근에 공부하게 되면서 의존성 주입에 대한 개념을 알아보려고 한다🤔 의존성 주입💉 의존성 주입(Dependency Injection)은 객체지향 프로그래밍을 하게 되면 한번씩 들어볼 수 있는 용어이다. 일반적으로 객체생성을 하게되면 사용할 클래스 내에서 객체를 생성하여 사용하지만, DI는 외부에서 생성된 객체를 주입 을 받는다.  📍의존성 …","fields":{"slug":"/dependency-injection/"},"frontmatter":{"date":"March 10, 2022","update":"Mar 10, 2022","title":"의존성 주입(DI) 알아보기","tags":["CS","DI"]}},{"excerpt":"Room Room은 안드로이드 앱 내부에서 데이터를 저장 하기 위한 jetpack 라이브러리이다. Room은 데이터베이스의 데이터(객체)를 자바나 코틀린 객체로 매핑해주는 ORM 라이브러리 이다. 📍ORM(Object Relational Mapping) : 객체-관계 매핑의 줄인말로 객체와 관계형 데이터베이스의 데이터 를 자동으로 매핑(연결) 해주는 것을…","fields":{"slug":"/room-database/"},"frontmatter":{"date":"March 04, 2022","update":"Mar 04, 2022","title":"안드로이드 Room 사용하면서 알아보기","tags":["Android","Room"]}},{"excerpt":"코루틴 개요 스레드와 코루틴을 알아보면서 코루틴에 대한 개념을 알아보았었다. 스레드와 코루틴은 둘다 동시성을 보장  관점에서 보면 비슷한 개념이라고 생각이 든다. 코투린은 실행되다가 일시 정지(예: 일정 시간 대기) 할 때 코틀린 런타임에 의해 자신이 실행되던 스레드가 다른 코루틴 에 할당된다. 이번 포스팅을 통해 코루틴의 구현에 필요한 요소 들을 살펴보…","fields":{"slug":"/coroutine/"},"frontmatter":{"date":"February 14, 2022","update":"Feb 14, 2022","title":"안드로이드 코루틴의 기초 알아보기","tags":["Android","Kotlin","Coroutine","비동기"]}},{"excerpt":"문제 설명 카카오는 하반기 경력 개발자 공개채용을 진행 중에 있으며 현재 지원서 접수와 코딩테스트가 종료되었습니다. 이번 채용에서 지원자는 지원서 작성 시 아래와 같이 4가지 항목을 반드시 선택하도록 하였습니다. 코딩테스트 참여 개발언어 항목에 cpp, java, python 중 하나를 선택해야 합니다. 지원 직군 항목에 backend와 frontend …","fields":{"slug":"/programmers-kakao-blind-2021-1/"},"frontmatter":{"date":"February 11, 2022","update":"Feb 11, 2022","title":"프로그래머스 2021 KAKAO BLIND RECRUITMENT - 순위 검색","tags":["Algorithm","programmers"]}},{"excerpt":"안드로이드 앱은 되면 'ANR(애플리케이션 응답 없음)' 오류가 발생하게 된다❗ 앱에서 개발을 하다보면 비동기 백그라운드 작업 을 통하여 이러한 ANR이 발생하지 않도록 노력을 해야한다.  처음으로 앱을 개발할때 네트워크 통신을 할때 위와 같은 문제에 봉착하여 큰 난관에 빠졌었던 기억이 많다. 이번 포스팅을 시작으로 비동기 작업 을 공부하며 정리해 보려고…","fields":{"slug":"/thread-coroutine/"},"frontmatter":{"date":"February 07, 2022","update":"Feb 07, 2022","title":"Thread와 Coroutine 짚고 넘어가기","tags":["OS","비동기"]}},{"excerpt":"문제 설명 지도개발팀에서 근무하는 제이지는 지도에서 도시 이름을 검색하면 해당 도시와 관련된 맛집 게시물들을 데이터베이스에서 읽어 보여주는 서비스를 개발하고 있다.\n이 프로그램의 테스팅 업무를 담당하고 있는 어피치는 서비스를 오픈하기 전 각 로직에 대한 성능 측정을 수행하였는데, 제이지가 작성한 부분 중 데이터베이스에서 게시물을 가져오는 부분의 실행시간이…","fields":{"slug":"/programmers-kakao-blind-2018-1/"},"frontmatter":{"date":"February 05, 2022","update":"Feb 05, 2022","title":"프로그래머스 2018 KAKAO RECRUITMENT - [1차]캐시","tags":["Algorithm","programmers"]}},{"excerpt":"이전의 포스팅은 를 추가하였었다.😀\n안드로이드 Jetpack의 LiveData 적용하기 이번에는 ACC 구성요소의 DataBinding 을 LiveData와 함께 사용하여 프로젝트를 더 개선된 형태로 만들어 보려고 한다. DataBinding(데이터 바인딩) 데이터 바인딩 의 주목적은 UI 레이아웃의 뷰(xml)와 앱 코드에 저장된 데이터(주요사용->Vi…","fields":{"slug":"/databinding/"},"frontmatter":{"date":"February 02, 2022","update":"Feb 02, 2022","title":"안드로이드 DataBinding + LiveData 적용하기","tags":["Android","DataBinding","ACC"]}},{"excerpt":"이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 에 대해서 알게된 내용을 정리하려고 한다.😀\nViewModel을 사용하여 간단한 화폐 변환을 하는 예제에 LiveData 를 추가하여 좀 더 개선해 보려고 한다. LiveData 핵심 요약 LiveData 는 관찰 가능한(obserable) 데이터 홀더 클래스 이다. LiveData 의 인스…","fields":{"slug":"/livedata/"},"frontmatter":{"date":"January 31, 2022","update":"Jan 31, 2022","title":"안드로이드 Jetpack의 LiveData 적용하기","tags":["Android","LiveData","ACC"]}},{"excerpt":"이번 포스팅은 안드로이드 안드로이드 ACC 구성 요소중 하\n나인 에 대해서 알게된 내용을 정리하려고 한다.😀 ViewModel에 대해 ViewModel 클래스는 UI 관련 데이터만을 저장하고 관리하도록 설계되어 있어 View(Activity/Fragment)의 UI 컨트롤러의 과도한 책임을 분담하여 코드가 복잡해지고 거대해지는것 을 방지하고 화면 회전등을…","fields":{"slug":"/viewmodel/"},"frontmatter":{"date":"January 30, 2022","update":"Jan 30, 2022","title":"안드로이드 Jetpack의 ViewModel 사용해보기","tags":["Android","ViewModel","ACC"]}},{"excerpt":"안드로이드 앱 개발을 시작하면 Activity에 거의 모든 동작하는 코드 를 직접 넣는다. 이렇게 모든 코드를 넣다보면 구조화된 코드의 작성이 없게되고 추후에 유지 보수 가 어려워진다. 처음 안드로이드 프로젝트를 진행하면서 기능을 바꾸거나 추가할 때 어느 부분을 수정해야하는지 굉장히 난해했던 경험이 있었고 자연스럽게 디자인 패턴을 공부를 하고 적용을 해봐…","fields":{"slug":"/android-acc/"},"frontmatter":{"date":"January 29, 2022","update":"Jan 29, 2022","title":"안드로이드 MVVM 패턴과 ACC 알아보기","tags":["Android","MVVM","ACC"]}},{"excerpt":"안드로이드 Jetpack은 2018년도에 릴리스가 되어 많은 시간이 지났지만 공부하기전에 이해하기 쉽게 정리를 하고가는것은 공부하는데 매우 효과적이라고 생각하여 조금 늦었지만 Jetpack에 대해서 정리해 보려고 한다.(나를 위한 포스팅😅) 안드로이드 JetPack이란 안드로이드 Jetpack은 개발자가 고품질 앱을 손쉽게 개발할 수 있도록 지원하는 라이…","fields":{"slug":"/android-jetpack/"},"frontmatter":{"date":"January 28, 2022","update":"Jan 28, 2022","title":"안드로이드 Jetpack에 대해","tags":["Android","Jetpack"]}},{"excerpt":"안드로이드의 첫 개발을 진행하면서 채팅기능을 만들어 보면서 푸시알림의 기능을 넣지 못했던것이 많이 생각났다.(공모전에 대한 회고도 조만간 작성해야겠다😢) 따라서 이번 포스팅은 알림에 대해서 정리해 보려고 한다. 알림(Notification) 알림에는 로컬 알림과 원격 알림(푸시 알림)이 있다. 은 장치에서 실행 중인 앱에서 생성되며 은 원격 서버에서 생성…","fields":{"slug":"/notification/"},"frontmatter":{"date":"January 27, 2022","update":"Jan 27, 2022","title":"안드로이드 알림(Notification) 만들기","tags":["Android","Notification"]}},{"excerpt":"안드로이드의 개념을 다시 한번 보면서 Notification(알림)을 처음으로 공부해 보았다. 알림 구현에서 를 사용하라고 하여 사용했지만 명확한 개념을 알려주지 않고 넘어가 와 가 무엇이 다른지 궁금하여 정리해 보았다. PendingIntent 안드로이드 developer에서 PendingIntent는 다른 응용 프로그램(프로세스)이 동일한 권한 및 I…","fields":{"slug":"/pendingintent/"},"frontmatter":{"date":"January 25, 2022","update":"Jan 25, 2022","title":"안드로이드 PendingIntent의 개념","tags":["Android","PendingIntent"]}},{"excerpt":"서비스(Service) 안드로이드 Service 클래스는 앱이 백그라운드 작업을 시작시켜 수행할 수 있게 특별히 설계되었다. 작업을 빨리 수행하고 종료하는 브로드캐스트 수신자와는 다르게, 서비스는 실행 시간이 길면서 사용자 인터페이스를 필요로 하지 않는 작업을 수행 한다. (예시: 음악을 스트리밍을 하거나, 다른앱을 사용하면서 전화를 한다.) 서\n비스는 …","fields":{"slug":"/android-service/"},"frontmatter":{"date":"January 24, 2022","update":"Jan 24, 2022","title":"안드로이드 서비스(Service) 개요","tags":["Android","Service"]}},{"excerpt":"문제 설명 양의 정수 이 주어집니다. 이 숫자를 진수로 바꿨을 때, 변환된 수 안에 아래 조건에 맞는 소수(Prime number)가 몇 개인지 알아보려 합니다.  처럼 소수 양쪽에 0이 있는 경우  처럼 소수 오른쪽에만 0이 있고 왼쪽에는 아무것도 없는 경우  처럼 소수 왼쪽에만 0이 있고 오른쪽에는 아무것도 없는 경우  처럼 소수 양쪽에 아무것도 없는…","fields":{"slug":"/programmers-kakao-blind-2020-3/"},"frontmatter":{"date":"January 23, 2022","update":"Jan 23, 2022","title":"프로그래머스 2022 KAKAO RECRUITMENT - k진수에서 소수 개수 구하기","tags":["Algorithm","programmers"]}},{"excerpt":"브로드캐스트(Broadcast) 앱의 액티비티를 시작시키는 메커니즘을 제공하는 것과 더불어 인텐트는 시스템의 다른 컴포넌트에 시스템 차원의 메시지를 전파하는 방법으로 사용될 수 있다. 예를 들어 안드로이드 시스템은 부팅이나 배터리가 부족할때와 같은 시스템 이벤트가 발생하면 브로드캐스트 를 전송한다.  브로드캐스트(방송)를 보낸다고 하면 어떠한 정의된 방법…","fields":{"slug":"/broadcast/"},"frontmatter":{"date":"January 20, 2022","update":"Jan 20, 2022","title":"안드로이드 브로드캐스트(Broadcast)","tags":["Android","Broadcast"]}},{"excerpt":"문제 설명 신입사원 무지는 게시판 불량 이용자를 신고하고 처리 결과를 메일로 발송하는 시스템을 개발하려 합니다. 무지가 개발하려는 시스템은 다음과 같습니다. 각 유저는 한 번에 한 명의 유저를 신고할 수 있습니다. 신고 횟수에 제한은 없습니다. 서로 다른 유저를 계속해서 신고할 수 있습니다. 한 유저를 여러 번 신고할 수도 있지만, 동일한 유저에 대한 신…","fields":{"slug":"/programmers-kakao-blind-2020-2/"},"frontmatter":{"date":"January 20, 2022","update":"Jan 20, 2022","title":"프로그래머스 2022 KAKAO RECRUITMENT - 신고 결과 받기","tags":["Algorithm","programmers"]}},{"excerpt":"Context?? 안드로이드 개발시 의 사용은 거의 모든 곳에서 사용되며 필자 또한 당연하게 생각하고 사용하였다.  를 자세하게 알고 사용하지 못하면 안드로이드 어플리케이션 개발시 메모리 누수가 쉽게 발생할 수 있다고 하여 제대로 정리를 하려고 한다. 안드로이드에서 Context(문맥, 맥락)는 현재 사용되고 있는 앱에 대한 전역 환경 정보 라고 한다. …","fields":{"slug":"/android-context/"},"frontmatter":{"date":"January 17, 2022","update":"Jan 17, 2022","title":"안드로이드 Context의 개념","tags":["Android","Context"]}},{"excerpt":"image 안드로이드 4대 컴포넌트 안드로이드 공부를 시작하면 \"안드로이드 4대 컴포넌트\" 라는 말을 많이 봤을 것이다.  4대 컴포넌트는 안드로이드의 대표적인 구성으로 \"액티비티\", \"브로드캐스트\", \"서비스\", \"콘텐트 제공자\" 가 있다. 이 주요 컴포넌트들은 안드로이드에서 를 사용하여 상호작용 할 수 있다. (안드로이드 Intent) 인텐트를 이용하…","fields":{"slug":"/recyclerview/"},"frontmatter":{"date":"January 17, 2022","update":"Jan 17, 2022","title":"안드로이드 4대 컴포넌트란","tags":["Android","Component"]}},{"excerpt":"문제 설명 카카오에 신입 개발자로 입사한 \"콘\"은 선배 개발자로부터 개발역량 강화를 위해 다른 개발자가 작성한 소스 코드를 분석하여 문제점을 발견하고 수정하라는 업무 과제를 받았습니다. 소스를 컴파일하여 로그를 보니 대부분 소스 코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류가 나는 것을 알게 되었습니다.\n수정해야 할 소스 파일…","fields":{"slug":"/programmers-kakao-blind-2020-1/"},"frontmatter":{"date":"January 16, 2022","update":"Jan 16, 2022","title":"프로그래머스 2020 KAKAO BLIND RECRUITMENT - 괄호 변환","tags":["Algorithm","programmers"]}},{"excerpt":"Intent?? 인텐트는 하나의 액티비티가 다른 액티비티를 시작할 수 있는 메시징 시스템이며, 이때  클래스 인스턴스를 사용한다. 액티비티가 안드로이드 런타임에 인텐트를 요청하면 해당 인텐트에 부합되는 액티비티를 안드로이드 런타임이 찾아서 시작한다. Intent 유형 인텐트의 유형에는  인텐트와  인텐트가 있다. 명시적 인텐트 : 클래스 이름으로 액티비티…","fields":{"slug":"/intent/"},"frontmatter":{"date":"January 09, 2022","update":"Jan 09, 2022","title":"안드로이드 인텐트의 개념","tags":["Android","Intent"]}},{"excerpt":"프래그먼트란? 프래그먼트는 대표적으로 큰 화면은 가진 태블릿과 같은 기기에서 보다 역동적이고 유연한 UI 디자인을 지원하는 것이 목적이다.  image 이러한 큰화면에서 하나의 액티비티를 통한 레이아웃을 구성하기엔 구현하기도 버겁고 유지보수에도 좋지 않을것이다. 이러한 버거움을 해결하고자 나온것이 프래그먼트이다. 프래그먼트는 액티비티 내부에서 독립적으로 …","fields":{"slug":"/fragment/"},"frontmatter":{"date":"January 03, 2022","update":"Jan 03, 2022","title":"안드로이드 Fragment 사용","tags":["Android","Fragment"]}},{"excerpt":"안드로이드 Lifecycle? 안드로이드를 처음 공부를 하였을때 가장 놀랐던것이 앱이 회전이 되었을때도 앱을 다시 처음부터 그려준다는것이였다. 사용자들이 어플을 쓰게되면 한 화면에서 여러가지 이벤트가 발생할 수 있다(ex. 사용자가 정보를 입력, 게임을 하던도중 전화가 옴..) 정보를 입력하다가 화면이 회전되었음 -> 많은 정보가 사라진다면? 게임을 하던…","fields":{"slug":"/lifecycle/"},"frontmatter":{"date":"January 01, 2022","update":"Jan 01, 2022","title":"안드로이드 Lifecycle 제대로 알기","tags":["Android","Lifecycle"]}},{"excerpt":"지난 안드로이드에 대한 회고 처음 안드로이드 공부를 시작을 한것은 7월 여름방학이였다. 1학기가 끝나가는 6월달 말에 동기를 통하여 공개SW 개발자대회라는 좋은 기회가 있다는 소식을 들었다. 평소에 어느정도 개념을 알고 진행되는 프로젝트만 했기 때문에 처음부터 끝까지 한번도 경험하지못한 안드로이드라는 모바일 플랫폼쪽을 공부를 하며  개발한다는것에 대한 해…","fields":{"slug":"/android-start/"},"frontmatter":{"date":"December 28, 2021","update":"Dec 28, 2021","title":"첫 안드로이드 개발에 대한 회고","tags":["Android","Blog"]}},{"excerpt":"문제 설명 짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지…","fields":{"slug":"/programmers-tips-town/"},"frontmatter":{"date":"December 25, 2021","update":"Dec 25, 2021","title":"프로그래머스 2017 팁스타운 - 짝지어 제거하기","tags":["Algorithm","programmers"]}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}